/*
 * generated by Xtext 2.13.0
 */
package org.xtext.validation

import org.eclipse.xtext.validation.Check
import org.xtext.go.GoPackage
import org.xtext.go.assignment
import org.xtext.go.compositeLit
import org.xtext.go.conversion
import org.xtext.go.expression
import org.xtext.go.expressionList
import org.xtext.go.expressionMatched
import org.xtext.go.functionLit
import org.xtext.go.ifStmt
import org.xtext.go.incDecStmt
import org.xtext.go.literal
import org.xtext.go.methodExpr
import org.xtext.go.operand
import org.xtext.go.operandName
import org.xtext.go.primaryExpr
import org.xtext.go.primaryExprArguments
import org.xtext.go.primaryExprIndex
import org.xtext.go.primaryExprSelector
import org.xtext.go.primaryExprSlice
import org.xtext.go.primaryExprTypeAssertion
import org.xtext.go.qualifiedIdent
import org.xtext.go.sendStmt
import org.xtext.go.shortVarDecl
import org.xtext.go.simpleStmt
import org.xtext.go.unaryExpr

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class GoValidator extends AbstractGoValidator {

	@Check
	def checkIf(ifStmt stmt) {
		if (stmt.getSimplStatement() !== null) {
			checkSimple(stmt.getSimplStatement());
		}
		if (stmt.getExpr() !== null) {
			checkExpression(stmt.getExpr());
		}
	}

	@Check
	def checkDeclaration() {
	}

	def checkOperation(String string) {
		//TODO: auto-generated method stub"
	}

	def checkLiteral(literal literal) {
		if (literal.getLitBasic() !== null) {
			return checkLitBasic(literal.getLitBasic());
		}
		if (literal.getLitComposite() !== null) {
			checkLitComposite(literal.getLitComposite());
		}
		if (literal.getLitFunc() !== null) {
			checkLitFunc(literal.getLitFunc());
		}
	}
		
	def checkLitBasic(String string) {
		try {
			var value = Float.valueOf(string);
			if(value % 1 == 0){
				return "int";
			} else {
				return "float";
			}
		} catch (Exception exception) {
			try {
				var value = Boolean.valueOf(string);
				return "boolean";
			} catch (Exception exception2) {
				return "string";
			}
			
		}
	}



	def checkLitComposite(compositeLit lit) {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}

	def checkPrimary(primaryExpr expr) {
		if (expr.getOperand() !== null) {
			return checkOperand(expr.getOperand());
		}
		if (expr.getConversion() !== null) {
			checkConversion(expr.getConversion());
		}
		if (expr.getPrimaryExprArguments() !== null) {
			checkPrimaryExprArguments(expr.getPrimaryExprArguments());
		}
		if (expr.getPrimaryExprIndex() !== null) {
			checkPrimaryExprIndex(expr.getPrimaryExprIndex());
		}
		if (expr.getPrimaryExprSelector() !== null) {
			checkPrimaryExprSelector(expr.getPrimaryExprSelector());
		}
		if (expr.getPrimaryExprSlice() !== null) {
			checkPrimaryExprSlice(expr.getPrimaryExprSlice());
		}
		if (expr.getPrimaryExprTypeAssertion() !== null) {
			checkPrimaryExprTypeAssertion(expr.getPrimaryExprTypeAssertion());
		}
	}

	def checkPrimaryExprTypeAssertion(primaryExprTypeAssertion assertion) {
		// TODO: auto-generated method stub"
	}

	def checkPrimaryExprSlice(primaryExprSlice slice) {
		// TODO: auto-generated method stub"
	}

	def checkPrimaryExprSelector(primaryExprSelector selector) {
		// TODO: auto-generated method stub"
	}

	def checkPrimaryExprIndex(primaryExprIndex index) {
		// TODO: auto-generated method stub"
	}

	def checkPrimaryExprArguments(primaryExprArguments arguments) {
		// TODO: auto-generated method stub"
	}

	def checkConversion(conversion conversion) {
		// TODO: auto-generated method stub"
	}

	def checkOperand(operand operand) {
		if (operand.getLiteral() !== null) {
			 return checkLiteral(operand.getLiteral());
		}
		if (operand.getMethodExpr() !== null) {
			checkMethodExpr(operand.getMethodExpr());
		}
		if (operand.getOperandName() !== null) {
			checkOperandName(operand.getOperandName());
		}
		if (operand.getExpr() !== null) {
			// checkExpression(operand.getExpr()); TODO: fix this
		}
	}

	def checkOperandName(operandName name) {
		if (name.getName !== null) { // This is a string
			//Identifier first char must be a letter
			var idFirstChar = name.getName().charAt(0);
			if(!Character.isLetter(idFirstChar)){
				error(
					"First char of operand name must be a letter",
					GoPackage.Literals.MODEL__GREETINGS
				)
			}
			
		}
		if (name.getQualIdent() !== null) {
			checkQualIdent(name.getQualIdent());
		}
	}
	
	def checkQualIdent(qualifiedIdent ident) {
		if (ident.getPackageName() !== null) {
			var name = ident.getPackageName()
			
			//PackageName cannot be blank
			if(name == '_'){
				error(
					"PackageName cannot be blank",
					GoPackage.Literals.MODEL__GREETINGS
				)
			}
			
			//Package name must start with a letter
			if(!Character.isLetter(name.charAt(0))){
				error(
					"First char of package name must be a letter",
					GoPackage.Literals.MODEL__GREETINGS
				)
			}
		}
		
		if (ident.getName() !== null) {
			
			var name = ident.getName();
			//Identifier's name cannot be blank
			if(name == '_'){
				error(
					"Identifier cannot be blank",
					GoPackage.Literals.MODEL__GREETINGS
				)
			}
			
			//Identifier's name must start with a letter
			if(!Character.isLetter(name.charAt(0))){
				error(
					"First char of identifier name must be a letter",
					GoPackage.Literals.MODEL__GREETINGS
				)
			}
		}
	}

	def checkMethodExpr(methodExpr expr) {
		// TODO: auto-generated method stub"

	}

	def checkLitFunc(functionLit lit) {
		// TODO:			
	}

	def checkCompLit(compositeLit lit) {
		// TODO:
	}

	def checkBasicLit(String string) {
		// TODO:		

	}

	def checkSimple(simpleStmt stmt) {
		if (stmt.getSendStmt() !== null) {
			checkSendStmt(stmt.getSendStmt());
		}
		if (stmt.getExpressionStmt() !== null) {
			checkExpression(stmt.getExpressionStmt().getExpr());
		}
		if (stmt.getIncDecStmt() !== null) {
			checkDcStmt(stmt.getIncDecStmt());
		}
		if (stmt.getAssignment() !== null) {
			checkAssignment(stmt.getAssignment());
		}
		if (stmt.getShortVarDecl() !== null) {
			checkShortVar(stmt.getShortVarDecl());
		}
	}

	def checkSendStmt(sendStmt stmt) {
		if (stmt.getExpr1() !== null) {
			if (stmt.getExpr2() !== null) {
				checkExpression(stmt.getExpr1());
				checkExpression(stmt.getExpr2());
			} else {
				error(
					"expression value can not be empty",
					GoPackage.Literals.MODEL__GREETINGS,
					stmt.toString()
				)
			}
		}
	}

	def checkDcStmt(incDecStmt stmt) {
		// TODO:		
	}



	def checkAssignment(assignment assignment) {
		checkExpList(assignment.getExprList1);
		checkExpList(assignment.getExprList2);
	}

	def checkShortVar(shortVarDecl decl) {
		if (decl.getIdList() !== null) {
			if (decl.getExprList() !== null) {
				checkExpList(decl.getExprList());
			}
		// TODO: check declaration
		}
	}
		
	def checkExpList(expressionList list) {
		var type = "";
		for (var i = 0; i < list.getExpr().size(); i++) {
			var nextType = checkExpression(list.getExpr().get(i));
			if(type !== ""){
				if (type !== nextType) {
					error(
						"Incompatible types in assignment",
						GoPackage.Literals.MODEL__GREETINGS,
						list.toString()
					)
				}
			}

		}
	}


	def checkExpression(expression expression) {
		if (expression.getUnaryExpr() !== null) {
			return checkUnary(expression.getUnaryExpr());
		}
		if (expression.getExpressionMatched() !== null) {
			checkMatched(expression.getExpressionMatched());
		}
	}

	def checkMatched(expressionMatched matched) {
		if (matched.getExpression() !== null) {
			checkExpression(matched.getExpression());
		}
		if (matched.getOperator() !== null) {
			var operator = matched.getOperator();
			var type = getOperatorType(operator);
		}
	}

	def getOperatorType(String operator) {
		if (operator.equals("+") || operator.equals("-") || operator.equals("/") || operator.equals("*")) {
			return "ari";
		} else if (operator.equals(">") || operator.equals("<") || operator.equals(">=") || operator.equals("<=") ||
			operator.equals("==") || operator.equals("!=")) {
			return "rel";
		}
		return null;
	}

	def checkUnary(unaryExpr expr) {
		if (expr.getPrimaryExpr() !== null) {
			return checkPrimary(expr.getPrimaryExpr());
		}
		if (expr.getUnaryExpr() !== null) {
			checkUnary(expr.getUnaryExpr());
		}
	}

}
