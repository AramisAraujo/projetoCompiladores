/*
 * generated by Xtext 2.13.0
 */
package org.xtext.validation

import org.eclipse.xtext.validation.Check
import org.xtext.go.GoPackage
import org.xtext.go.assignment
import org.xtext.go.compositeLit
import org.xtext.go.conversion
import org.xtext.go.expression
import org.xtext.go.expressionMatched
import org.xtext.go.functionLit
import org.xtext.go.ifStmt
import org.xtext.go.incDecStmt
import org.xtext.go.literal
import org.xtext.go.methodExpr
import org.xtext.go.operand
import org.xtext.go.operandName
import org.xtext.go.primaryExpr
import org.xtext.go.primaryExprArguments
import org.xtext.go.primaryExprIndex
import org.xtext.go.primaryExprSelector
import org.xtext.go.primaryExprSlice
import org.xtext.go.primaryExprTypeAssertion
import org.xtext.go.qualifiedIdent
import org.xtext.go.sendStmt
import org.xtext.go.shortVarDecl
import org.xtext.go.simpleStmt
import org.xtext.go.unaryExpr
import org.xtext.go.expressionList

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class GoValidator extends AbstractGoValidator {

	@Check
	def checkIf(ifStmt stmt) {
		if (stmt.getSimplStatement() !== null) {
			checkSimple(stmt.getSimplStatement());
		}
		if (stmt.getExpr() !== null) {
			checkExpression(stmt.getExpr());
		}
	}

	def checkPrimary(primaryExpr expr) {
		if (expr.getOperand() !== null) {
			checkOperand(expr.getOperand());
		}
		if (expr.getConversion() !== null) {
			checkConversion(expr.getConversion());
		}
		if (expr.getPrimaryExprArguments() !== null) {
			checkPrimaryExprArguments(expr.getPrimaryExprArguments());
		}
		if (expr.getPrimaryExprIndex() !== null) {
			checkPrimaryExprIndex(expr.getPrimaryExprIndex());
		}
		if (expr.getPrimaryExprSelector() !== null) {
			checkPrimaryExprSelector(expr.getPrimaryExprSelector());
		}
		if (expr.getPrimaryExprSlice() !== null) {
			checkPrimaryExprSlice(expr.getPrimaryExprSlice());
		}
		if (expr.getPrimaryExprTypeAssertion() !== null) {
			checkPrimaryExprTypeAssertion(expr.getPrimaryExprTypeAssertion());
		}
	}

	def checkPrimaryExprTypeAssertion(primaryExprTypeAssertion assertion) {
		// TODO: auto-generated method stub"
	}

	def checkPrimaryExprSlice(primaryExprSlice slice) {
		// TODO: auto-generated method stub"
	}

	def checkPrimaryExprSelector(primaryExprSelector selector) {
		// TODO: auto-generated method stub"
	}

	def checkPrimaryExprIndex(primaryExprIndex index) {
		// TODO: auto-generated method stub"
	}

	def checkPrimaryExprArguments(primaryExprArguments arguments) {
		// TODO: auto-generated method stub"
	}

	def checkConversion(conversion conversion) {
		// TODO: auto-generated method stub"
	}

	def checkOperand(operand operand) {
		if (operand.getLiteral() !== null) {
			checkLiteral(operand.getLiteral());
		}
		if (operand.getMethodExpr() !== null) {
			checkMethodExpr(operand.getMethodExpr());
		}
		if (operand.getOperandName() !== null) {
			checkOperandName(operand.getOperandName());
		}
		if (operand.getExpr() !== null) {
			// checkExpression(operand.getExpr()); TODO: fix this
		}
	}

	def checkOperandName(operandName name) {
		if (name.getName !== null) { // This is a string
			// TODO: do something to the string
		}
		if (name.getQualIdent() !== null) {
			checkQualIdent(name.getQualIdent());
		}
	}

	def checkQualIdent(qualifiedIdent ident) {
		if (ident.getPackageName() !== null) {
			// TODO: check this string(what should we do?)
		}
		if (ident.getName() !== null) {
			// TODO: what to do with this string?
		}
	}

	def checkMethodExpr(methodExpr expr) {
		// TODO: auto-generated method stub"
	}

	def checkLiteral(literal literal) {
		if (literal.getLitBasic() !== null) {
			checkBasicLit(literal.getLitBasic());
		}
		if (literal.getLitComposite() !== null) {
			checkCompLit(literal.getLitComposite());
		}
		if (literal.getLitFunc() !== null) {
			checkLitFunc(literal.getLitFunc());
		}
	}

	def checkLitFunc(functionLit lit) {
		// TODO:			
	}

	def checkCompLit(compositeLit lit) {
		// TODO:
	}

	def checkBasicLit(String string) {
		// TODO:		
	}

	def checkSimple(simpleStmt stmt) {
		if (stmt.getSendStmt() !== null) {
			checkSendStmt(stmt.getSendStmt());
		}
		if (stmt.getExpressionStmt() !== null) {
			checkExpression(stmt.getExpressionStmt().getExpr());
		}
		if (stmt.getIncDecStmt() !== null) {
			checkDcStmt(stmt.getIncDecStmt());
		}
		if (stmt.getAssignment() !== null) {
			checkAssignment(stmt.getAssignment());
		}
		if (stmt.getShortVarDecl() !== null) {
			checkShortVar(stmt.getShortVarDecl());
		}
	}

	def checkSendStmt(sendStmt stmt) {
		if (stmt.getExpr1() !== null) {
			if (stmt.getExpr2() !== null) {
				checkExpression(stmt.getExpr1());
				checkExpression(stmt.getExpr2());
			} else {
				error(
					"expression value can not be empty",
					GoPackage.Literals.MODEL__GREETINGS,
					stmt.toString()
				)
			}
		}
	}

	def checkDcStmt(incDecStmt stmt) {
		// TODO:		
	}

	def checkAssignment(assignment assignment) {
		checkExpList(assignment.getExprList1);
		checkExpList(assignment.getExprList2);
	}

	def checkShortVar(shortVarDecl decl) {
		if (decl.getIdList() !== null) {
			if (decl.getExprList() !== null) {
				checkExpList(decl.getExprList());
			}
		// TODO: check declaration
		}
	}
		
	def checkExpList(expressionList list) {
		for (var i = 0; i < list.getExpr().size(); i++) {
			checkExpression(list.getExpr().get(i));
		}
	}


	def checkExpression(expression expression) {
		if (expression.getUnaryExpr() !== null) {
			checkUnary(expression.getUnaryExpr());
		}
		if (expression.getExpressionMatched() !== null) {
			checkMatched(expression.getExpressionMatched());
		}
	}

	def checkMatched(expressionMatched matched) {
		if (matched.getExpression() !== null) {
			checkExpression(matched.getExpression());
		}
		if (matched.getOperator() !== null) {
			var operator = matched.getOperator();
			var type = getOperatorType(operator);
		}
	}

	def getOperatorType(String operator) {
		if (operator.equals("+") || operator.equals("-") || operator.equals("/") || operator.equals("*")) {
			return "ari";
		} else if (operator.equals(">") || operator.equals("<") || operator.equals(">=") || operator.equals("<=") ||
			operator.equals("==") || operator.equals("!=")) {
			return "rel";
		}
		return null;
	}

	def checkUnary(unaryExpr expr) {
		if (expr.getPrimaryExpr() !== null) {
			checkPrimary(expr.getPrimaryExpr());
		}
		if (expr.getUnaryExpr() !== null) {
			checkUnary(expr.getUnaryExpr());
		}
	}

}
