/*
 * generated by Xtext 2.13.0
 */
package org.xtext.validation

import org.xtext.go.expression
import org.xtext.go.unaryExpr
import org.xtext.go.expressionMatched
import org.eclipse.xtext.validation.Check
import org.xtext.go.primaryExpr
import org.xtext.go.ifStmt
import org.xtext.go.simpleStmt
import org.xtext.go.sendStmt
import org.xtext.go.incDecStmt
import org.xtext.go.assignment
import org.xtext.go.shortVarDecl

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class GoValidator extends AbstractGoValidator {
	
	@Check
	def checkIf(ifStmt stmt) {
		if(stmt.getSimplStatement() !== null) {
			checkSimple(stmt.getSimplStatement());
		}
		if(stmt.getExpr() !== null) {
			checkExpression(stmt.getExpr());
		}
	}
		
	def checkPrimary(primaryExpr expr) {
		// TODO: 
	}
	
	def checkSimple(simpleStmt stmt) {
		if (stmt.getSendStmt() !== null) {
			checkSendStmt(stmt.getSendStmt());
		}
		if (stmt.getExpressionStmt() !== null) {
			checkExpression(stmt.getExpressionStmt().getExpr());
		}
		if (stmt.getIncDecStmt() !== null) {
			checkDcStmt(stmt.getIncDecStmt());
		}
		if (stmt.getAssignment() !== null) {
			checkAssignment(stmt.getAssignment());
		}
		if(stmt.getShortVarDecl() !== null) {
			checkShortVar(stmt.getShortVarDecl());	
		}
	}
		
		
		
		
	def checkSendStmt(sendStmt stmt) {
		if(stmt.getExpr1() !== null) {
			if(stmt.getExpr2() !== null) {
				checkExpression(stmt.getExpr1());
				checkExpression(stmt.getExpr2());
			}else {
				// TODO: error
			}
		}		
	}
	
	def checkDcStmt(incDecStmt stmt) {
		// TODO:		
	}
	
	def checkAssignment(assignment assignment) {
		// TODO:	
	}

	def checkShortVar(shortVarDecl decl) {
		// TODO:
	}
	
	def checkExpression(expression expression) {
		if(expression.getUnaryExpr() !== null) {
			checkUnary(expression.getUnaryExpr());
		}
		if(expression.getExpressionMatched() !== null) {
			checkMatched(expression.getExpressionMatched());
		}
	}
		
	def checkMatched(expressionMatched matched) {
		if(matched.getExpression() !== null) {
			checkExpression(matched.getExpression());
		}
	}
	
	def checkUnary(unaryExpr expr) {
		if(expr.getPrimaryExpr() !== null) {
			checkPrimary(expr.getPrimaryExpr());
		}
	}
		
}
