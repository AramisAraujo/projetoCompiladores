/*
 * generated by Xtext 2.13.0
 */
package org.xtext.validation

import org.eclipse.xtext.validation.Check
import org.xtext.go.expression
import org.xtext.go.basicLit
import org.xtext.go.constDecl
import org.xtext.go.varDecl
import org.xtext.go.importDecl
import org.xtext.go.functionDecl
import org.xtext.go.operand
import org.xtext.go.shortVarDecl
import org.xtext.go.expressionList

import org.xtext.go.typeName
import java.util.ArrayList
import org.xtext.go.type

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class GoValidator extends AbstractGoValidator {
	val ids = newLinkedHashMap();

	@Check
	def checkExpression(expression e) {

		if (e.expressionMatched.operator !== null) {

			var binaryOperator = e.expressionMatched.operator;

			if (binaryOperator == "||" || binaryOperator == "&&") {
				checkRelExp(e);
			} else if (isArithimeticOp(binaryOperator)) {
				checkAritOp(e, binaryOperator);
			} else if (isBooleanOp(binaryOperator)) {
				checkBooleanOp(e, binaryOperator);
			}
		}
	}

//	@Check
//	def checkConstDecl(constDecl cd) {
//		
//		var constId   = cd.constspec.id.id;
//		nullDeclaration(constId);
//		
//		var constType = cd.constspec.tp.tp;
//		var constExp  = cd.constspec.expressionlist.exp.up.pr.op.literal.basic;
//				
//				
//		if(constType !== null && constExp !== null) {
//			var error = checkAndMakeDecl(constId, constType, constExp);
//			if(constId !== constId.toUpperCase() && !error) {
//				warning ("Constants usually be declared with Upper Case", null);
//			}
//		}
//	}
	@Check
	def checkVarDecl(varDecl vd) {
		for (var i = 0; i < vd.specs.length; i++) {
			var varspec = vd.specs.get(i);
			
			
			if (varspec.idList.ids.length == varspec.exprList.length) {
				var index = 0
				var type = varspec.type;
				for (id : varspec.idList.ids) {
					if (type !== null) {
//						checkAndMakeDecl(id, extractType(type), varspec.exprList.get(index));
						// TODO: FIX ME
					} else {
						nullDeclaration(id)
					}
				}
			} else {
				error('Semantic Error: Wrong number of atributes', null)
			}
			
			for (var j = 0; j < varspec.idList.ids.length; j++) {
				
				var varId = varspec.idList.ids.get(j);
				nullDeclaration(varId);
				var type = varspec.type;
				
				for (var k = 0; k < varspec.exprList.get(j).expr.length; k++) {
					var exp = varspec.exprList.get(j).expr.get(k);
					
					var varExp = exp.unaryExpr.primaryExpr.operand.literal.litBasic;
					
					if (type !== null && varExp !== null) {
						var varType = extractType(type);
						
						if (varType !== null) {
							var error = checkAndMakeDecl(varId, varType, varExp);
							if (varId.charAt(0) !== varId.toLowerCase().charAt(0) && !error) {
								warning("Variables usually starts with Lower Case", null);
							}
						}
					}
				}
			}
		}
	}
		
	def String extractType(type type) {
		if(type.contentL !== null) {
			return type.contentL.contentType;
		} else if(type.contentT !== null) {
			return type.contentT.name;
		}
		return extractType(type.content);
	}

	@Check
	def imporDeclCheck(importDecl id) {
		var imports = id.specs
		for (import : imports) {
			nullDeclaration(import.path.replaceAll("\"", ""))
		}
	}

	@Check
	def ifDclrCheck() {
		// TODO: GOD PLEASE HELP ME
	}

	@Check
	def funcDecla(functionDecl fd) {

		var funcName = fd.name;
		var parameters = fd.sig.params.paramList;
		var parameterList = newLinkedHashMap()

		for (var i = 0; i < parameters.length; i++) {
			for (var j = 0; j < parameters.get(i).paramsDecl.length; j++) {
				var p = parameters.get(i).paramsDecl.get(j);
				
				for (var k = 0; k < p.identifierList.ids.length; k++) {
					
					if (p.type !== null) {

						parameterList.put(
							p.identifierList.ids.get(k),
							p.type.content
						);

						ids.put(
							p.identifierList.ids.get(k),
							p.type.content
						);
					} else {
						parameterList.put(
							p.identifierList.ids.get(k),
							new NullObj()
						);

						ids.put(
							p.identifierList.ids.get(k),
							new NullObj()
						);
					}
				}
			}
		}
		for (p : parameters) {

//			for (param : parameters.parameterdecl) {
//				if (param.type !== null) {
//					parameterList.put(
//						param.id,
//						param.type.tp
//					)
//				} else {
//					parameterList.put(
//						param.id,
//						new NullObj()
//					)
//				}
//			}
			ids.put(funcName, parameterList.toString);
		}
	}

	@Check
	def checkOperandName(operand op) {

		if (!ids.containsKey(op.operandName.name)) {
			error("Semantic Error: Identifier " + op.operandName.name + " was never declared", null)
		} else if (ids.get(op.operandName.name).toString().contains(',')) {

			var elements = ids.get(op.operandName.name).toString().split(",");
			var expList = op.expr;
			callMethodCheck(expList, elements, op)
		}

	}

	@Check
	def shortVarDecl(shortVarDecl sv) {
		for (var i = 0; i < sv.idList.ids.size; i++) {
			ids.put(
				sv.idList.ids.get(i),
				sv.exprList
			);
		}

	}

	def checkRelExp(expression e) {

		if (e.unaryExpr.primaryExpr.operand.literal !== null &&
			e.expressionMatched.expression.unaryExpr.primaryExpr.operand.literal !== null) {
			var basicLiteral1 = e.unaryExpr.primaryExpr.operand.literal.litBasic
			var basicLiteral2 = e.expressionMatched.expression.unaryExpr.primaryExpr.operand.literal.litBasic

			if (basicLiteral1.boolLit === null || basicLiteral2.boolLit === null) {
				error("Semantic Error: Invalid boolean expression", null);
			}
		}
	}

	def checkAritOp(expression e, String binaryOp) {

		var type1 = "";
		var type2 = "";
		var id1 = "";
		var id2 = "";

		if (e.unaryExpr.primaryExpr.operand.literal !== null &&
			e.expressionMatched.expression.unaryExpr.primaryExpr.operand.literal !== null) {
			var basicLiteral1 = e.unaryExpr.primaryExpr.operand.literal.litBasic;
			var basicLiteral2 = e.expressionMatched.expression.unaryExpr.primaryExpr.operand.literal.litBasic;

			type1 = getBasicLitType(basicLiteral1);
			type2 = getBasicLitType(basicLiteral2);
		} else if (e.unaryExpr.primaryExpr.operand.literal !== null) {
			var basicLiteral1 = e.unaryExpr.primaryExpr.operand.literal.litBasic;
			id2 = e.expressionMatched.expression.unaryExpr.primaryExpr.operand.operandName.name;

			type1 = getBasicLitType(basicLiteral1);
			type2 = getType(ids.get(id2));
		} else if (e.expressionMatched.expression.unaryExpr.primaryExpr.operand.literal !== null) {
			id1 = e.unaryExpr.primaryExpr.operand.operandName.name;
			var basicLiteral2 = e.expressionMatched.expression.unaryExpr.primaryExpr.operand.literal.litBasic;

			type2 = getBasicLitType(basicLiteral2);
			type1 = getType(ids.get(id1));
		} else {
			id1 = e.unaryExpr.primaryExpr.operand.operandName.name
			id2 = e.expressionMatched.expression.unaryExpr.primaryExpr.operand.operandName.name

			type1 = getType(ids.get(id1));
			type2 = getType(ids.get(id2));
		}

		if (type1 == "null" || type2 == "null") {
			if (type1 == "null") {
				error("Semantic Error: " + id1 + " was declared but never assigned.", null)
			}
			if (type2 == "null") {
				error("Semantic Error: " + id2 + " was declared but never assigned.", null)
			}
		} else {
			checkTypesInAritimeticOp(binaryOp, type1, type2)
		}
	}

	def checkBooleanOp(expression e, String binaryOp) {

		var type1 = "";
		var type2 = "";

		var id1 = "";
		var id2 = "";

		if (e.unaryExpr.primaryExpr.operand.literal !== null &&
			e.expressionMatched.expression.unaryExpr.primaryExpr.operand.literal !== null) {
			var basicLiteral1 = e.unaryExpr.primaryExpr.operand.literal.litBasic;
			var basicLiteral2 = e.expressionMatched.expression.unaryExpr.primaryExpr.operand.literal.litBasic;

			type1 = getBasicLitType(basicLiteral1);
			type2 = getBasicLitType(basicLiteral2);
		} else if (e.unaryExpr.primaryExpr.operand.literal !== null) {
			var basicLiteral1 = e.unaryExpr.primaryExpr.operand.literal.litBasic;
			id2 = e.expressionMatched.expression.unaryExpr.primaryExpr.operand.operandName.name

			type1 = getBasicLitType(basicLiteral1);
			type2 = getType(ids.get(id2));
		} else if (e.expressionMatched.expression.unaryExpr.primaryExpr.operand.literal !== null) {
			id1 = e.unaryExpr.primaryExpr.operand.operandName.name
			var basicLiteral2 = e.expressionMatched.expression.unaryExpr.primaryExpr.operand.literal.litBasic;

			type2 = getBasicLitType(basicLiteral2);
			type1 = getType(ids.get(id1));
		} else {
			id1 = e.unaryExpr.primaryExpr.operand.operandName.name
			id2 = e.expressionMatched.expression.unaryExpr.primaryExpr.operand.operandName.name

			type1 = getType(ids.get(id1));
			type2 = getType(ids.get(id2));
		}

		if (type1 == "null" || type2 == "null") {
			if (type1 == "null") {
				error("Semantic Error: " + id1 + " was declared but never assigned.", null)
			}
			if (type2 == "null") {
				error("Semantic Error: " + id2 + " was declared but never assigned.", null)
			}
		} else {
			checkTypesInBoolOp(binaryOp, type1, type2)
		}
	}

	protected def void checkTypesInBoolOp(String binaryOp, String type1, String type2) {
		if (binaryOp == "==" || binaryOp == "!=") {
			if (type1 != type2) {
				error("Semantic Error: Invalid boolean operation. Mismatched types " + type1 + " and " + type2, null)
			}
		} else {
			if (type1 == "int") {
				if (type2 == "bool" || type2 == "string") {
					error("Semantic Error: Invalid boolean operation. Mismatched types " + type1 + " and " + type2,
						null)
				}
			} else if (type1 == "float") {
				if (type2 == "bool" || type2 == "string") {
					error("Semantic Error: Invalid boolean operation. Mismatched types " + type1 + " and " + type2,
						null)
				}
			} else if (type1 == "bool" || type2 == "bool") {
				error("Semantic Error: Invalid boolean operation. Operator " + binaryOp + " not defined on bool.", null)
			} else if (type1 == "string") {
				if (type2 != "string") {
					error("Semantic Error: Invalid boolean operation. Mismatched types " + type1 + " and " + type2,
						null)
				}
			}
		}
	}

	def getBasicLitType(basicLit lit) {
		if (lit.getFloatLit !== null) {
			return "float";
		} else if (lit.getIntLit !== null) {
			return "int";
		} else if (lit.getStringLit !== null) {
			return "string";
		}
	}

	protected def boolean isArithimeticOp(String binaryOperator) {
		return (binaryOperator == "+" || binaryOperator == "-" || binaryOperator == "*" || binaryOperator == "/" ||
			binaryOperator == "%")
	}

	protected def boolean isBooleanOp(String binaryOperator) {

		return (  binaryOperator == "==" || binaryOperator == "!=" || binaryOperator == "<" || binaryOperator == "<=" ||
			binaryOperator == ">" || binaryOperator == ">="  );
	}

	def nullDeclaration(String id) {
		ids.put(id, new NullObj());
	}

	def checkAndMakeDecl(String id, String constType, basicLit literal) {

		var error = false;

		if (constType == "float") {
			if (literal.intLit !== null) {
				ids.put(id, new Integer(literal.intLit));
			} else if (literal.floatLit !== null) {
				ids.put(id, new Double(literal.floatLit));
			} else {
				error = true;
				error("Semantic Error: Invalid declaration, operator 
						not assigned to float.", null);
			}
		} else if (constType == "int") {
			if (literal.intLit !== null) {
				ids.put(id, new Integer(literal.intLit));
			} else {
				error = true;
				error("Semantic Error: Invalid declaration, operator 
						not assigned to int.", null);
			}
		} else if (constType == "string") {
			if (literal.stringLit !== null) {
				ids.put(id, new String(literal.stringLit));
			} else {
				error = true;
				error("Semantic Error: Invalid declaration, operator 
						not assigned to string.", null);
			}
		} else if (constType == "bool") {
			if (literal.boolLit !== null) {
				ids.put(id, new Boolean(literal.boolLit));
			} else {
				error = true;
				error("Semantic Error: Invalid declaration, operator 
						not assigned to boolean.", null);
			}
		}

		return error;
	}

	protected def void callMethodCheck(expressionList expList, String[] elements, operand op) {
		var termsCount = 0

		for (exp : expList.expr) {
			if (exp.unaryExpr.primaryExpr.operand.operandName !== null) {
				if (exp.unaryExpr.primaryExpr.operand.operandName.name !== null) {
					termsCount += 1;
				}
			} else if (exp.unaryExpr.primaryExpr.operand.literal.litBasic !== null) {
				termsCount += 1;
			}
		}

		if (termsCount !== elements.length) {
			error("Semantic Error: Wrong number of parameters for " + op.operandName.name, null)
		}
	}

	protected def void callMethodCheck(expression exp, String[] elements, operand op) {
		var termsCount = 0
	
		if(exp.unaryExpr.primaryExpr.operand.operandName !== null) {
			if(exp.unaryExpr.primaryExpr.operand.operandName.name !== null) {
				termsCount += 1;
			}
		}else if(exp.unaryExpr.primaryExpr.operand.literal.litBasic !== null) {
			termsCount += 1;
		}
		
		if(termsCount !== elements.length) {
			error("Semantic Error: Wrong number of parameters for " + op.operandName.name, null )
		}
	}

	def getType(Object obj) {
		if (obj instanceof Integer) {
			return "int"
		} else if (obj instanceof Double) {
			return "float"
		} else if (obj instanceof Boolean) {
			return "bool"
		} else if (obj instanceof String) {
			return "string"
		} else if (obj instanceof NullObj) {
			return "null"
		}
	}

	def checkTypesInAritimeticOp(String binaryOp, String type1, String type2) {

		if (type1 == "string" || type2 == "string") {
			if (type1 == "string" && binaryOp == "+") {
				if (type2 !== "string") {
					error("Semantic Error: Invalid arithmetic operation", null)
				}
			} else if (type2 == "string" && binaryOp == "+") {
				if (type1 !== "string") {
					error("Semantic Error: Invalid arithmetic operation", null)
				}
			} else {
				error(
					"Semantic Error: Invalid arithmetic operation, operator " + binaryOp + " not defined on string.",
					null
				)
			}
		} else if (type1 == "bool" || type2 == "bool") {
			error("Semantic Error: Invalid arithmetic operation", null)
		}
	}

//	@Check
//	def checkIf(ifStmt stmt) {
//		if (stmt.getSimplStatement() !== null) {
//			checkSimple(stmt.getSimplStatement());
//		}
//		if (stmt.getExpr() !== null) {
//			checkExpression(stmt.getExpr());
//		}
//	}
//
//	@Check
//	def checkDeclaration() {
//	}
//
//	def checkOperation(String string) {
//		//TODO: auto-generated method stub"
//	}
//
//	def checkLiteral(literal literal) {
//		if (literal.getLitBasic() !== null) {
//			return checkLitBasic(literal.getLitBasic());
//		}
//		if (literal.getLitComposite() !== null) {
//			checkLitComposite(literal.getLitComposite());
//		}
//		if (literal.getLitFunc() !== null) {
//			checkLitFunc(literal.getLitFunc());
//		}
//	}
//		
//		def checkLitBasic(basicLit lit) {
//			if(lit.getFloatLit !== null) {
//				return "float";
//			} else
//			if(lit.getIntLit !== null) {
//				return "int";
//			} else
//			if(lit.getStringLit !== null) {
//				return "string";
//			}
//		}
//		
////	def checkLitBasic(String string) {
////		try {
////			var value = Float.valueOf(string);
////			if(value % 1 == 0){
////				return "int";
////			} else {
////				return "float";
////			}
////		} catch (Exception exception) {
////			try {
////				var value = Boolean.valueOf(string);
////				return "boolean";
////			} catch (Exception exception2) {
////				return "string";
////			}
////			
////		}
////	}
//
//
//
//	def checkLitComposite(compositeLit lit) {
//		throw new UnsupportedOperationException("TODO: auto-generated method stub")
//	}
//
//	def checkPrimary(primaryExpr expr) {
//		if (expr.getOperand() !== null) {
//			return checkOperand(expr.getOperand());
//		}
//		if (expr.getConversion() !== null) {
//			checkConversion(expr.getConversion());
//		}
//		if (expr.getPrimaryExprArguments() !== null) {
//			checkPrimaryExprArguments(expr.getPrimaryExprArguments());
//		}
//		if (expr.getPrimaryExprIndex() !== null) {
//			checkPrimaryExprIndex(expr.getPrimaryExprIndex());
//		}
//		if (expr.getPrimaryExprSelector() !== null) {
//			checkPrimaryExprSelector(expr.getPrimaryExprSelector());
//		}
//		if (expr.getPrimaryExprSlice() !== null) {
//			checkPrimaryExprSlice(expr.getPrimaryExprSlice());
//		}
//		if (expr.getPrimaryExprTypeAssertion() !== null) {
//			checkPrimaryExprTypeAssertion(expr.getPrimaryExprTypeAssertion());
//		}
//	}
//
//	def checkPrimaryExprTypeAssertion(primaryExprTypeAssertion assertion) {
//		// TODO: auto-generated method stub"
//	}
//
//	def checkPrimaryExprSlice(primaryExprSlice slice) {
//		// TODO: auto-generated method stub"
//	}
//
//	def checkPrimaryExprSelector(primaryExprSelector selector) {
//		// TODO: auto-generated method stub"
//	}
//
//	def checkPrimaryExprIndex(primaryExprIndex index) {
//		// TODO: auto-generated method stub"
//	}
//
//	def checkPrimaryExprArguments(primaryExprArguments arguments) {
//		// TODO: auto-generated method stub"
//	}
//
//	def checkConversion(conversion conversion) {
//		// TODO: auto-generated method stub"
//	}
//
//	def checkOperand(operand operand) {
//		if (operand.getLiteral() !== null) {
//			 return checkLiteral(operand.getLiteral());
//		}
//		if (operand.getMethodExpr() !== null) {
//			checkMethodExpr(operand.getMethodExpr());
//		}
//		if (operand.getOperandName() !== null) {
//			checkOperandName(operand.getOperandName());
//		}
//		if (operand.getExpr() !== null) {
//			// checkExpression(operand.getExpr()); TODO: fix this
//		}
//	}
//
//	def checkOperandName(operandName name) {
//		if (name.getName !== null) { // This is a string
//			//Identifier first char must be a letter
//			var idFirstChar = name.getName().charAt(0);
//			if(!Character.isLetter(idFirstChar)){
//				error(
//					"First char of operand name must be a letter",
//					GoPackage.Literals.MODEL__GREETINGS
//				)
//			}
//			
//		}
//		if (name.getQualIdent() !== null) {
//			checkQualIdent(name.getQualIdent());
//		}
//	}
//	
//	def checkQualIdent(qualifiedIdent ident) {
//		if (ident.getPackageName() !== null) {
//			var name = ident.getPackageName()
//			
//			//PackageName cannot be blank
//			if(name == '_'){
//				error(
//					"PackageName cannot be blank",
//					GoPackage.Literals.MODEL__GREETINGS
//				)
//			}
//			
//			//Package name must start with a letter
//			if(!Character.isLetter(name.charAt(0))){
//				error(
//					"First char of package name must be a letter",
//					GoPackage.Literals.MODEL__GREETINGS
//				)
//			}
//		}
//		
//		if (ident.getName() !== null) {
//			
//			var name = ident.getName();
//			//Identifier's name cannot be blank
//			if(name == '_'){
//				error(
//					"Identifier cannot be blank",
//					GoPackage.Literals.MODEL__GREETINGS
//				)
//			}
//			
//			//Identifier's name must start with a letter
//			if(!Character.isLetter(name.charAt(0))){
//				error(
//					"First char of identifier name must be a letter",
//					GoPackage.Literals.MODEL__GREETINGS
//				)
//			}
//		}
//	}
//
//	def checkMethodExpr(methodExpr expr) {
//		// TODO: auto-generated method stub"
//
//	}
//
//	def checkLitFunc(functionLit lit) {
//		// TODO:			
//	}
//
//	def checkCompLit(compositeLit lit) {
//		// TODO:
//	}
//
//	def checkBasicLit(String string) {
//		// TODO:		
//
//	}
//
//	def checkSimple(simpleStmt stmt) {
//		if (stmt.getSendStmt() !== null) {
//			checkSendStmt(stmt.getSendStmt());
//		}
//		if (stmt.getExpressionStmt() !== null) {
//			checkExpression(stmt.getExpressionStmt().getExpr());
//		}
//		if (stmt.getIncDecStmt() !== null) {
//			checkDcStmt(stmt.getIncDecStmt());
//		}
//		if (stmt.getAssignment() !== null) {
//			checkAssignment(stmt.getAssignment());
//		}
//		if (stmt.getShortVarDecl() !== null) {
//			checkShortVar(stmt.getShortVarDecl());
//		}
//	}
//
//	def checkSendStmt(sendStmt stmt) {
//		if (stmt.getExpr1() !== null) {
//			if (stmt.getExpr2() !== null) {
//				var type1 = checkExpression(stmt.getExpr1());
//				var type2 = checkExpression(stmt.getExpr2());
//				
//				if(type1 !== type2) {
//					if (type1 === "float" && type2 === "int"){
//						// ITS OK
//					}else {
//						error(
//							"Incompatible types in send stmt",
//							GoPackage.Literals.MODEL__GREETINGS,
//							type1.toString() + type2
//						)
//					}
//				}
//			} else {
//				error(
//					"expression value can not be empty",
//					GoPackage.Literals.MODEL__GREETINGS,
//					stmt.toString()
//				)
//			}
//		}
//	}
//
//	def checkDcStmt(incDecStmt stmt) {
//		if(stmt.getExpr() !== null) {
//			var type = checkExpression(stmt.getExpr());
//			if(!(type === "int" || type == "float")){
//				error(
//					"only number can be incremented/decremented",
//					GoPackage.Literals.MODEL__GREETINGS,
//					stmt.toString()
//				)
//			}
//		}		
//	}
//
//
//
//	def checkAssignment(assignment assignment) {
//		checkExpList(assignment.getExprList1);
//		checkExpList(assignment.getExprList2);
//	}
//
//	def checkShortVar(shortVarDecl decl) {
//		if (decl.getIdList() !== null) {
//			if (decl.getExprList() !== null) {
//				checkExpList(decl.getExprList());
//			}
//		// TODO: check declaration
//		}
//	}
//		
//	def checkExpList(expressionList list) {
//		var type = "";
//		for (var i = 0; i < list.getExpr().size(); i++) {
//			var nextType = checkExpression(list.getExpr().get(i));
//			if(type !== ""){
//				if (type !== nextType) {
//					error(
//						"Incompatible types in assignment",
//						GoPackage.Literals.MODEL__GREETINGS,
//						list.toString()
//					)
//				}
//			}
//
//		}
//	}
//
//
//	def checkExpression(expression expression) {
//		if (expression.getUnaryExpr() !== null) {
//			return checkUnary(expression.getUnaryExpr());
//		}
//		if (expression.getExpressionMatched() !== null) {
//			checkMatched(expression.getExpressionMatched());
//		}
//	}
//
//	def checkMatched(expressionMatched matched) {
//		if (matched.getExpression() !== null) {
//			checkExpression(matched.getExpression());
//		}
//		if (matched.getOperator() !== null) {
//			var operator = matched.getOperator();
//			var type = getOperatorType(operator);
//		}
//	}
//
//	def getOperatorType(String operator) {
//		if (operator.equals("+") || operator.equals("-") || operator.equals("/") || operator.equals("*")) {
//			return "ari";
//		} else if (operator.equals(">") || operator.equals("<") || operator.equals(">=") || operator.equals("<=") ||
//			operator.equals("==") || operator.equals("!=")) {
//			return "rel";
//		}
//		return null;
//	}
//
//	def checkUnary(unaryExpr expr) {
//		if (expr.getPrimaryExpr() !== null) {
//			return checkPrimary(expr.getPrimaryExpr());
//		}
//		if (expr.getUnaryExpr() !== null) {
//			checkUnary(expr.getUnaryExpr());
//		}
//	}
}
