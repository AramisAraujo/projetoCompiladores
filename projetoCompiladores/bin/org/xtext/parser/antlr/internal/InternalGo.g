/*
 * generated by Xtext 2.14.0
 */
grammar InternalGo;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.GoGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private GoGrammarAccess grammarAccess;

    public InternalGoParser(TokenStream input, GoGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected GoGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getGreetingsSourceFileParserRuleCall_0());
			}
			lv_greetings_0_0=rulesourceFile
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"greetings",
					lv_greetings_0_0,
					"org.xtext.Go.sourceFile");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulesourceFile
entryRulesourceFile returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSourceFileRule()); }
	iv_rulesourceFile=rulesourceFile
	{ $current=$iv_rulesourceFile.current.getText(); }
	EOF;

// Rule sourceFile
rulesourceFile returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSourceFileAccess().getPackageClauseParserRuleCall_0());
		}
		this_packageClause_0=rulepackageClause
		{
			$current.merge(this_packageClause_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getSourceFileAccess().getEosParserRuleCall_1());
		}
		this_eos_1=ruleeos
		{
			$current.merge(this_eos_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getSourceFileAccess().getImportDeclParserRuleCall_2_0());
			}
			this_importDecl_2=ruleimportDecl
			{
				$current.merge(this_importDecl_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getSourceFileAccess().getEosParserRuleCall_2_1());
			}
			this_eos_3=ruleeos
			{
				$current.merge(this_eos_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
		(
			{
				newCompositeNode(grammarAccess.getSourceFileAccess().getTopLevelDeclParserRuleCall_3_0());
			}
			this_topLevelDecl_4=ruletopLevelDecl
			{
				$current.merge(this_topLevelDecl_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getSourceFileAccess().getEosParserRuleCall_3_1());
			}
			this_eos_5=ruleeos
			{
				$current.merge(this_eos_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRulepackageClause
entryRulepackageClause returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPackageClauseRule()); }
	iv_rulepackageClause=rulepackageClause
	{ $current=$iv_rulepackageClause.current.getText(); }
	EOF;

// Rule packageClause
rulepackageClause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='package'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPackageClauseAccess().getPackageKeyword_0());
		}
		this_IDENTIFIER_1=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_1);
		}
		{
			newLeafNode(this_IDENTIFIER_1, grammarAccess.getPackageClauseAccess().getIDENTIFIERTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleimportDecl
entryRuleimportDecl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getImportDeclRule()); }
	iv_ruleimportDecl=ruleimportDecl
	{ $current=$iv_ruleimportDecl.current.getText(); }
	EOF;

// Rule importDecl
ruleimportDecl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='import'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getImportDeclAccess().getImportKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getImportDeclAccess().getImportSpecParserRuleCall_1_0());
			}
			this_importSpec_1=ruleimportSpec
			{
				$current.merge(this_importSpec_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			(
				kw='('
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getImportDeclAccess().getLeftParenthesisKeyword_1_1_0());
				}
				(
					{
						newCompositeNode(grammarAccess.getImportDeclAccess().getImportSpecParserRuleCall_1_1_1_0());
					}
					this_importSpec_3=ruleimportSpec
					{
						$current.merge(this_importSpec_3);
					}
					{
						afterParserOrEnumRuleCall();
					}
					{
						newCompositeNode(grammarAccess.getImportDeclAccess().getEosParserRuleCall_1_1_1_1());
					}
					this_eos_4=ruleeos
					{
						$current.merge(this_eos_4);
					}
					{
						afterParserOrEnumRuleCall();
					}
				)*
				kw=')'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getImportDeclAccess().getRightParenthesisKeyword_1_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuleimportSpec
entryRuleimportSpec returns [String current=null]:
	{ newCompositeNode(grammarAccess.getImportSpecRule()); }
	iv_ruleimportSpec=ruleimportSpec
	{ $current=$iv_ruleimportSpec.current.getText(); }
	EOF;

// Rule importSpec
ruleimportSpec returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getImportSpecAccess().getFullStopKeyword_0_0());
			}
			    |
			this_IDENTIFIER_1=RULE_IDENTIFIER
			{
				$current.merge(this_IDENTIFIER_1);
			}
			{
				newLeafNode(this_IDENTIFIER_1, grammarAccess.getImportSpecAccess().getIDENTIFIERTerminalRuleCall_0_1());
			}
		)?
		{
			newCompositeNode(grammarAccess.getImportSpecAccess().getImportPathParserRuleCall_1());
		}
		this_importPath_2=ruleimportPath
		{
			$current.merge(this_importPath_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleimportPath
entryRuleimportPath returns [String current=null]:
	{ newCompositeNode(grammarAccess.getImportPathRule()); }
	iv_ruleimportPath=ruleimportPath
	{ $current=$iv_ruleimportPath.current.getText(); }
	EOF;

// Rule importPath
ruleimportPath returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_STRING_LIT_0=RULE_STRING_LIT
	{
		$current.merge(this_STRING_LIT_0);
	}
	{
		newLeafNode(this_STRING_LIT_0, grammarAccess.getImportPathAccess().getSTRING_LITTerminalRuleCall());
	}
;

// Entry rule entryRuletopLevelDecl
entryRuletopLevelDecl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTopLevelDeclRule()); }
	iv_ruletopLevelDecl=ruletopLevelDecl
	{ $current=$iv_ruletopLevelDecl.current.getText(); }
	EOF;

// Rule topLevelDecl
ruletopLevelDecl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTopLevelDeclAccess().getDeclarationParserRuleCall_0());
		}
		this_declaration_0=ruledeclaration
		{
			$current.merge(this_declaration_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTopLevelDeclAccess().getFunctionDeclParserRuleCall_1());
		}
		this_functionDecl_1=rulefunctionDecl
		{
			$current.merge(this_functionDecl_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTopLevelDeclAccess().getMethodDeclParserRuleCall_2());
		}
		this_methodDecl_2=rulemethodDecl
		{
			$current.merge(this_methodDecl_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuledeclaration
entryRuledeclaration returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	iv_ruledeclaration=ruledeclaration
	{ $current=$iv_ruledeclaration.current.getText(); }
	EOF;

// Rule declaration
ruledeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getConstDeclParserRuleCall_0());
		}
		this_constDecl_0=ruleconstDecl
		{
			$current.merge(this_constDecl_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getTypeDeclParserRuleCall_1());
		}
		this_typeDecl_1=ruletypeDecl
		{
			$current.merge(this_typeDecl_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getVarDeclParserRuleCall_2());
		}
		this_varDecl_2=rulevarDecl
		{
			$current.merge(this_varDecl_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleconstDecl
entryRuleconstDecl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getConstDeclRule()); }
	iv_ruleconstDecl=ruleconstDecl
	{ $current=$iv_ruleconstDecl.current.getText(); }
	EOF;

// Rule constDecl
ruleconstDecl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='const'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getConstDeclAccess().getConstKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getConstDeclAccess().getConstSpecParserRuleCall_1_0());
			}
			this_constSpec_1=ruleconstSpec
			{
				$current.merge(this_constSpec_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			(
				kw='('
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getConstDeclAccess().getLeftParenthesisKeyword_1_1_0());
				}
				(
					{
						newCompositeNode(grammarAccess.getConstDeclAccess().getConstSpecParserRuleCall_1_1_1_0());
					}
					this_constSpec_3=ruleconstSpec
					{
						$current.merge(this_constSpec_3);
					}
					{
						afterParserOrEnumRuleCall();
					}
					{
						newCompositeNode(grammarAccess.getConstDeclAccess().getEosParserRuleCall_1_1_1_1());
					}
					this_eos_4=ruleeos
					{
						$current.merge(this_eos_4);
					}
					{
						afterParserOrEnumRuleCall();
					}
				)*
				kw=')'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getConstDeclAccess().getRightParenthesisKeyword_1_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuleconstSpec
entryRuleconstSpec returns [String current=null]:
	{ newCompositeNode(grammarAccess.getConstSpecRule()); }
	iv_ruleconstSpec=ruleconstSpec
	{ $current=$iv_ruleconstSpec.current.getText(); }
	EOF;

// Rule constSpec
ruleconstSpec returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConstSpecAccess().getIdentifierListParserRuleCall_0());
		}
		this_identifierList_0=ruleidentifierList
		{
			$current.merge(this_identifierList_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstSpecAccess().getTypeParserRuleCall_1_0());
				}
				this_type_1=ruletype
				{
					$current.merge(this_type_1);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)?
			kw='='
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getConstSpecAccess().getEqualsSignKeyword_1_1());
			}
			{
				newCompositeNode(grammarAccess.getConstSpecAccess().getExpressionListParserRuleCall_1_2());
			}
			this_expressionList_3=ruleexpressionList
			{
				$current.merge(this_expressionList_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleidentifierList
entryRuleidentifierList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIdentifierListRule()); }
	iv_ruleidentifierList=ruleidentifierList
	{ $current=$iv_ruleidentifierList.current.getText(); }
	EOF;

// Rule identifierList
ruleidentifierList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENTIFIER_0=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_0);
		}
		{
			newLeafNode(this_IDENTIFIER_0, grammarAccess.getIdentifierListAccess().getIDENTIFIERTerminalRuleCall_0());
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIdentifierListAccess().getCommaKeyword_1_0());
			}
			this_IDENTIFIER_2=RULE_IDENTIFIER
			{
				$current.merge(this_IDENTIFIER_2);
			}
			{
				newLeafNode(this_IDENTIFIER_2, grammarAccess.getIdentifierListAccess().getIDENTIFIERTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleexpressionList
entryRuleexpressionList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpressionListRule()); }
	iv_ruleexpressionList=ruleexpressionList
	{ $current=$iv_ruleexpressionList.current.getText(); }
	EOF;

// Rule expressionList
ruleexpressionList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionListAccess().getExpressionParserRuleCall_0());
		}
		this_expression_0=ruleexpression
		{
			$current.merge(this_expression_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExpressionListAccess().getCommaKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getExpressionListAccess().getExpressionParserRuleCall_1_1());
			}
			this_expression_2=ruleexpression
			{
				$current.merge(this_expression_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuletypeDecl
entryRuletypeDecl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeDeclRule()); }
	iv_ruletypeDecl=ruletypeDecl
	{ $current=$iv_ruletypeDecl.current.getText(); }
	EOF;

// Rule typeDecl
ruletypeDecl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='type'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeDeclAccess().getTypeKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getTypeDeclAccess().getTypeSpecParserRuleCall_1_0());
			}
			this_typeSpec_1=ruletypeSpec
			{
				$current.merge(this_typeSpec_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			(
				kw='('
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getTypeDeclAccess().getLeftParenthesisKeyword_1_1_0());
				}
				(
					{
						newCompositeNode(grammarAccess.getTypeDeclAccess().getTypeSpecParserRuleCall_1_1_1_0());
					}
					this_typeSpec_3=ruletypeSpec
					{
						$current.merge(this_typeSpec_3);
					}
					{
						afterParserOrEnumRuleCall();
					}
					{
						newCompositeNode(grammarAccess.getTypeDeclAccess().getEosParserRuleCall_1_1_1_1());
					}
					this_eos_4=ruleeos
					{
						$current.merge(this_eos_4);
					}
					{
						afterParserOrEnumRuleCall();
					}
				)*
				kw=')'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getTypeDeclAccess().getRightParenthesisKeyword_1_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuletypeSpec
entryRuletypeSpec returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeSpecRule()); }
	iv_ruletypeSpec=ruletypeSpec
	{ $current=$iv_ruletypeSpec.current.getText(); }
	EOF;

// Rule typeSpec
ruletypeSpec returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENTIFIER_0=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_0);
		}
		{
			newLeafNode(this_IDENTIFIER_0, grammarAccess.getTypeSpecAccess().getIDENTIFIERTerminalRuleCall_0());
		}
		{
			newCompositeNode(grammarAccess.getTypeSpecAccess().getTypeParserRuleCall_1());
		}
		this_type_1=ruletype
		{
			$current.merge(this_type_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulefunctionDecl
entryRulefunctionDecl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFunctionDeclRule()); }
	iv_rulefunctionDecl=rulefunctionDecl
	{ $current=$iv_rulefunctionDecl.current.getText(); }
	EOF;

// Rule functionDecl
rulefunctionDecl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='func'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunctionDeclAccess().getFuncKeyword_0());
		}
		this_IDENTIFIER_1=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_1);
		}
		{
			newLeafNode(this_IDENTIFIER_1, grammarAccess.getFunctionDeclAccess().getIDENTIFIERTerminalRuleCall_1());
		}
		(
			{
				newCompositeNode(grammarAccess.getFunctionDeclAccess().getFunctionParserRuleCall_2_0());
			}
			this_function_2=rulefunction
			{
				$current.merge(this_function_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getFunctionDeclAccess().getSignatureParserRuleCall_2_1());
			}
			this_signature_3=rulesignature
			{
				$current.merge(this_signature_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulefunction
entryRulefunction returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_rulefunction=rulefunction
	{ $current=$iv_rulefunction.current.getText(); }
	EOF;

// Rule function
rulefunction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getSignatureParserRuleCall_0());
		}
		this_signature_0=rulesignature
		{
			$current.merge(this_signature_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getBlockParserRuleCall_1());
		}
		this_block_1=ruleblock
		{
			$current.merge(this_block_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulemethodDecl
entryRulemethodDecl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMethodDeclRule()); }
	iv_rulemethodDecl=rulemethodDecl
	{ $current=$iv_rulemethodDecl.current.getText(); }
	EOF;

// Rule methodDecl
rulemethodDecl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='func'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMethodDeclAccess().getFuncKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getMethodDeclAccess().getReceiverParserRuleCall_1());
		}
		this_receiver_1=rulereceiver
		{
			$current.merge(this_receiver_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		this_IDENTIFIER_2=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_2);
		}
		{
			newLeafNode(this_IDENTIFIER_2, grammarAccess.getMethodDeclAccess().getIDENTIFIERTerminalRuleCall_2());
		}
		(
			{
				newCompositeNode(grammarAccess.getMethodDeclAccess().getFunctionParserRuleCall_3_0());
			}
			this_function_3=rulefunction
			{
				$current.merge(this_function_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getMethodDeclAccess().getSignatureParserRuleCall_3_1());
			}
			this_signature_4=rulesignature
			{
				$current.merge(this_signature_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulereceiver
entryRulereceiver returns [String current=null]:
	{ newCompositeNode(grammarAccess.getReceiverRule()); }
	iv_rulereceiver=rulereceiver
	{ $current=$iv_rulereceiver.current.getText(); }
	EOF;

// Rule receiver
rulereceiver returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getReceiverAccess().getParametersParserRuleCall());
	}
	this_parameters_0=ruleparameters
	{
		$current.merge(this_parameters_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRulevarDecl
entryRulevarDecl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVarDeclRule()); }
	iv_rulevarDecl=rulevarDecl
	{ $current=$iv_rulevarDecl.current.getText(); }
	EOF;

// Rule varDecl
rulevarDecl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='var'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVarDeclAccess().getVarKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getVarDeclAccess().getVarSpecParserRuleCall_1_0());
			}
			this_varSpec_1=rulevarSpec
			{
				$current.merge(this_varSpec_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			(
				kw='('
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getVarDeclAccess().getLeftParenthesisKeyword_1_1_0());
				}
				(
					{
						newCompositeNode(grammarAccess.getVarDeclAccess().getVarSpecParserRuleCall_1_1_1_0());
					}
					this_varSpec_3=rulevarSpec
					{
						$current.merge(this_varSpec_3);
					}
					{
						afterParserOrEnumRuleCall();
					}
					{
						newCompositeNode(grammarAccess.getVarDeclAccess().getEosParserRuleCall_1_1_1_1());
					}
					this_eos_4=ruleeos
					{
						$current.merge(this_eos_4);
					}
					{
						afterParserOrEnumRuleCall();
					}
				)*
				kw=')'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getVarDeclAccess().getRightParenthesisKeyword_1_1_2());
				}
			)
		)
	)
;

// Entry rule entryRulevarSpec
entryRulevarSpec returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVarSpecRule()); }
	iv_rulevarSpec=rulevarSpec
	{ $current=$iv_rulevarSpec.current.getText(); }
	EOF;

// Rule varSpec
rulevarSpec returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVarSpecAccess().getIdentifierListParserRuleCall_0());
		}
		this_identifierList_0=ruleidentifierList
		{
			$current.merge(this_identifierList_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVarSpecAccess().getTypeParserRuleCall_1_0_0());
				}
				this_type_1=ruletype
				{
					$current.merge(this_type_1);
				}
				{
					afterParserOrEnumRuleCall();
				}
				(
					kw='='
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getVarSpecAccess().getEqualsSignKeyword_1_0_1_0());
					}
					{
						newCompositeNode(grammarAccess.getVarSpecAccess().getExpressionListParserRuleCall_1_0_1_1());
					}
					this_expressionList_3=ruleexpressionList
					{
						$current.merge(this_expressionList_3);
					}
					{
						afterParserOrEnumRuleCall();
					}
				)?
			)
			    |
			(
				kw='='
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getVarSpecAccess().getEqualsSignKeyword_1_1_0());
				}
				{
					newCompositeNode(grammarAccess.getVarSpecAccess().getExpressionListParserRuleCall_1_1_1());
				}
				this_expressionList_5=ruleexpressionList
				{
					$current.merge(this_expressionList_5);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleblock
entryRuleblock returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleblock=ruleblock
	{ $current=$iv_ruleblock.current.getText(); }
	EOF;

// Rule block
ruleblock returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getBlockAccess().getStatementListParserRuleCall_1());
		}
		this_statementList_1=rulestatementList
		{
			$current.merge(this_statementList_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRulestatementList
entryRulestatementList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStatementListRule()); }
	iv_rulestatementList=rulestatementList
	{ $current=$iv_rulestatementList.current.getText(); }
	EOF;

// Rule statementList
rulestatementList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementListAccess().getStatementParserRuleCall_0());
		}
		this_statement_0=rulestatement
		{
			$current.merge(this_statement_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getStatementListAccess().getEosParserRuleCall_1());
		}
		this_eos_1=ruleeos
		{
			$current.merge(this_eos_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)*
;

// Entry rule entryRulestatement
entryRulestatement returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_rulestatement=rulestatement
	{ $current=$iv_rulestatement.current.getText(); }
	EOF;

// Rule statement
rulestatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getDeclarationParserRuleCall_0());
		}
		this_declaration_0=ruledeclaration
		{
			$current.merge(this_declaration_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getLabeledStmtParserRuleCall_1());
		}
		this_labeledStmt_1=rulelabeledStmt
		{
			$current.merge(this_labeledStmt_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSimpleStmtParserRuleCall_2());
		}
		this_simpleStmt_2=rulesimpleStmt
		{
			$current.merge(this_simpleStmt_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getGoStmtParserRuleCall_3());
		}
		this_goStmt_3=rulegoStmt
		{
			$current.merge(this_goStmt_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getReturnStmtParserRuleCall_4());
		}
		this_returnStmt_4=rulereturnStmt
		{
			$current.merge(this_returnStmt_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getBreakStmtParserRuleCall_5());
		}
		this_breakStmt_5=rulebreakStmt
		{
			$current.merge(this_breakStmt_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getContinueStmtParserRuleCall_6());
		}
		this_continueStmt_6=rulecontinueStmt
		{
			$current.merge(this_continueStmt_6);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getGotoStmtParserRuleCall_7());
		}
		this_gotoStmt_7=rulegotoStmt
		{
			$current.merge(this_gotoStmt_7);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getFallthroughStmtParserRuleCall_8());
		}
		this_fallthroughStmt_8=rulefallthroughStmt
		{
			$current.merge(this_fallthroughStmt_8);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getBlockParserRuleCall_9());
		}
		this_block_9=ruleblock
		{
			$current.merge(this_block_9);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIfStmtParserRuleCall_10());
		}
		this_ifStmt_10=ruleifStmt
		{
			$current.merge(this_ifStmt_10);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSwitchStmtParserRuleCall_11());
		}
		this_switchStmt_11=ruleswitchStmt
		{
			$current.merge(this_switchStmt_11);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSelectStmtParserRuleCall_12());
		}
		this_selectStmt_12=ruleselectStmt
		{
			$current.merge(this_selectStmt_12);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getForStmtParserRuleCall_13());
		}
		this_forStmt_13=ruleforStmt
		{
			$current.merge(this_forStmt_13);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getDeferStmtParserRuleCall_14());
		}
		this_deferStmt_14=ruledeferStmt
		{
			$current.merge(this_deferStmt_14);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulesimpleStmt
entryRulesimpleStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSimpleStmtRule()); }
	iv_rulesimpleStmt=rulesimpleStmt
	{ $current=$iv_rulesimpleStmt.current.getText(); }
	EOF;

// Rule simpleStmt
rulesimpleStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSimpleStmtAccess().getSendStmtParserRuleCall_0());
		}
		this_sendStmt_0=rulesendStmt
		{
			$current.merge(this_sendStmt_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSimpleStmtAccess().getExpressionStmtParserRuleCall_1());
		}
		this_expressionStmt_1=ruleexpressionStmt
		{
			$current.merge(this_expressionStmt_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSimpleStmtAccess().getIncDecStmtParserRuleCall_2());
		}
		this_incDecStmt_2=ruleincDecStmt
		{
			$current.merge(this_incDecStmt_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSimpleStmtAccess().getAssignmentParserRuleCall_3());
		}
		this_assignment_3=ruleassignment
		{
			$current.merge(this_assignment_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSimpleStmtAccess().getShortVarDeclParserRuleCall_4());
		}
		this_shortVarDecl_4=ruleshortVarDecl
		{
			$current.merge(this_shortVarDecl_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSimpleStmtAccess().getEmptyStmtParserRuleCall_5());
		}
		this_emptyStmt_5=ruleemptyStmt
		{
			$current.merge(this_emptyStmt_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleexpressionStmt
entryRuleexpressionStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpressionStmtRule()); }
	iv_ruleexpressionStmt=ruleexpressionStmt
	{ $current=$iv_ruleexpressionStmt.current.getText(); }
	EOF;

// Rule expressionStmt
ruleexpressionStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpressionStmtAccess().getExpressionParserRuleCall());
	}
	this_expression_0=ruleexpression
	{
		$current.merge(this_expression_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRulesendStmt
entryRulesendStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSendStmtRule()); }
	iv_rulesendStmt=rulesendStmt
	{ $current=$iv_rulesendStmt.current.getText(); }
	EOF;

// Rule sendStmt
rulesendStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSendStmtAccess().getExpressionParserRuleCall_0());
		}
		this_expression_0=ruleexpression
		{
			$current.merge(this_expression_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='<-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSendStmtAccess().getLessThanSignHyphenMinusKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getSendStmtAccess().getExpressionParserRuleCall_2());
		}
		this_expression_2=ruleexpression
		{
			$current.merge(this_expression_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleincDecStmt
entryRuleincDecStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIncDecStmtRule()); }
	iv_ruleincDecStmt=ruleincDecStmt
	{ $current=$iv_ruleincDecStmt.current.getText(); }
	EOF;

// Rule incDecStmt
ruleincDecStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getIncDecStmtAccess().getExpressionParserRuleCall_0());
		}
		this_expression_0=ruleexpression
		{
			$current.merge(this_expression_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='++'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIncDecStmtAccess().getPlusSignPlusSignKeyword_1_0());
			}
			    |
			kw='--'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIncDecStmtAccess().getHyphenMinusHyphenMinusKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleassignment
entryRuleassignment returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	iv_ruleassignment=ruleassignment
	{ $current=$iv_ruleassignment.current.getText(); }
	EOF;

// Rule assignment
ruleassignment returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAssignmentAccess().getExpressionListParserRuleCall_0());
		}
		this_expressionList_0=ruleexpressionList
		{
			$current.merge(this_expressionList_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getAssignmentAccess().getAssign_opParserRuleCall_1());
		}
		this_assign_op_1=ruleassign_op
		{
			$current.merge(this_assign_op_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getAssignmentAccess().getExpressionListParserRuleCall_2());
		}
		this_expressionList_2=ruleexpressionList
		{
			$current.merge(this_expressionList_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleassign_op
entryRuleassign_op returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAssign_opRule()); }
	iv_ruleassign_op=ruleassign_op
	{ $current=$iv_ruleassign_op.current.getText(); }
	EOF;

// Rule assign_op
ruleassign_op returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='+'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAssign_opAccess().getPlusSignKeyword_0_0());
			}
			    |
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAssign_opAccess().getHyphenMinusKeyword_0_1());
			}
			    |
			kw='|'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAssign_opAccess().getVerticalLineKeyword_0_2());
			}
			    |
			kw='^'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAssign_opAccess().getCircumflexAccentKeyword_0_3());
			}
			    |
			kw='*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAssign_opAccess().getAsteriskKeyword_0_4());
			}
			    |
			kw='/'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAssign_opAccess().getSolidusKeyword_0_5());
			}
			    |
			kw='%'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAssign_opAccess().getPercentSignKeyword_0_6());
			}
			    |
			kw='<<'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAssign_opAccess().getLessThanSignLessThanSignKeyword_0_7());
			}
			    |
			kw='>>'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAssign_opAccess().getGreaterThanSignGreaterThanSignKeyword_0_8());
			}
			    |
			kw='&'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAssign_opAccess().getAmpersandKeyword_0_9());
			}
			    |
			kw='&^'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAssign_opAccess().getAmpersandCircumflexAccentKeyword_0_10());
			}
		)?
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAssign_opAccess().getEqualsSignKeyword_1());
		}
	)
;

// Entry rule entryRuleshortVarDecl
entryRuleshortVarDecl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getShortVarDeclRule()); }
	iv_ruleshortVarDecl=ruleshortVarDecl
	{ $current=$iv_ruleshortVarDecl.current.getText(); }
	EOF;

// Rule shortVarDecl
ruleshortVarDecl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getShortVarDeclAccess().getIdentifierListParserRuleCall_0());
		}
		this_identifierList_0=ruleidentifierList
		{
			$current.merge(this_identifierList_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=':='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getShortVarDeclAccess().getColonEqualsSignKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getShortVarDeclAccess().getExpressionListParserRuleCall_2());
		}
		this_expressionList_2=ruleexpressionList
		{
			$current.merge(this_expressionList_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleemptyStmt
entryRuleemptyStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEmptyStmtRule()); }
	iv_ruleemptyStmt=ruleemptyStmt
	{ $current=$iv_ruleemptyStmt.current.getText(); }
	EOF;

// Rule emptyStmt
ruleemptyStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=';'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getEmptyStmtAccess().getSemicolonKeyword());
	}
;

// Entry rule entryRulelabeledStmt
entryRulelabeledStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLabeledStmtRule()); }
	iv_rulelabeledStmt=rulelabeledStmt
	{ $current=$iv_rulelabeledStmt.current.getText(); }
	EOF;

// Rule labeledStmt
rulelabeledStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENTIFIER_0=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_0);
		}
		{
			newLeafNode(this_IDENTIFIER_0, grammarAccess.getLabeledStmtAccess().getIDENTIFIERTerminalRuleCall_0());
		}
		kw=':'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLabeledStmtAccess().getColonKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getLabeledStmtAccess().getStatementParserRuleCall_2());
		}
		this_statement_2=rulestatement
		{
			$current.merge(this_statement_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulereturnStmt
entryRulereturnStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getReturnStmtRule()); }
	iv_rulereturnStmt=rulereturnStmt
	{ $current=$iv_rulereturnStmt.current.getText(); }
	EOF;

// Rule returnStmt
rulereturnStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='return'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getReturnStmtAccess().getReturnKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getReturnStmtAccess().getExpressionListParserRuleCall_1());
			}
			this_expressionList_1=ruleexpressionList
			{
				$current.merge(this_expressionList_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRulebreakStmt
entryRulebreakStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBreakStmtRule()); }
	iv_rulebreakStmt=rulebreakStmt
	{ $current=$iv_rulebreakStmt.current.getText(); }
	EOF;

// Rule breakStmt
rulebreakStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='break'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBreakStmtAccess().getBreakKeyword_0());
		}
		(
			this_IDENTIFIER_1=RULE_IDENTIFIER
			{
				$current.merge(this_IDENTIFIER_1);
			}
			{
				newLeafNode(this_IDENTIFIER_1, grammarAccess.getBreakStmtAccess().getIDENTIFIERTerminalRuleCall_1());
			}
		)?
	)
;

// Entry rule entryRulecontinueStmt
entryRulecontinueStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getContinueStmtRule()); }
	iv_rulecontinueStmt=rulecontinueStmt
	{ $current=$iv_rulecontinueStmt.current.getText(); }
	EOF;

// Rule continueStmt
rulecontinueStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='continue'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getContinueStmtAccess().getContinueKeyword_0());
		}
		(
			this_IDENTIFIER_1=RULE_IDENTIFIER
			{
				$current.merge(this_IDENTIFIER_1);
			}
			{
				newLeafNode(this_IDENTIFIER_1, grammarAccess.getContinueStmtAccess().getIDENTIFIERTerminalRuleCall_1());
			}
		)?
	)
;

// Entry rule entryRulegotoStmt
entryRulegotoStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getGotoStmtRule()); }
	iv_rulegotoStmt=rulegotoStmt
	{ $current=$iv_rulegotoStmt.current.getText(); }
	EOF;

// Rule gotoStmt
rulegotoStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='goto'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getGotoStmtAccess().getGotoKeyword_0());
		}
		this_IDENTIFIER_1=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_1);
		}
		{
			newLeafNode(this_IDENTIFIER_1, grammarAccess.getGotoStmtAccess().getIDENTIFIERTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRulefallthroughStmt
entryRulefallthroughStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFallthroughStmtRule()); }
	iv_rulefallthroughStmt=rulefallthroughStmt
	{ $current=$iv_rulefallthroughStmt.current.getText(); }
	EOF;

// Rule fallthroughStmt
rulefallthroughStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='fallthrough'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getFallthroughStmtAccess().getFallthroughKeyword());
	}
;

// Entry rule entryRuledeferStmt
entryRuledeferStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDeferStmtRule()); }
	iv_ruledeferStmt=ruledeferStmt
	{ $current=$iv_ruledeferStmt.current.getText(); }
	EOF;

// Rule deferStmt
ruledeferStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='defer'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDeferStmtAccess().getDeferKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getDeferStmtAccess().getExpressionParserRuleCall_1());
		}
		this_expression_1=ruleexpression
		{
			$current.merge(this_expression_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleifStmt
entryRuleifStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIfStmtRule()); }
	iv_ruleifStmt=ruleifStmt
	{ $current=$iv_ruleifStmt.current.getText(); }
	EOF;

// Rule ifStmt
ruleifStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='if'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIfStmtAccess().getIfKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getIfStmtAccess().getSimpleStmtParserRuleCall_1_0());
			}
			this_simpleStmt_1=rulesimpleStmt
			{
				$current.merge(this_simpleStmt_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=';'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIfStmtAccess().getSemicolonKeyword_1_1());
			}
		)?
		{
			newCompositeNode(grammarAccess.getIfStmtAccess().getExpressionParserRuleCall_2());
		}
		this_expression_3=ruleexpression
		{
			$current.merge(this_expression_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getIfStmtAccess().getBlockParserRuleCall_3());
		}
		this_block_4=ruleblock
		{
			$current.merge(this_block_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='else'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIfStmtAccess().getElseKeyword_4_0());
			}
			(
				{
					newCompositeNode(grammarAccess.getIfStmtAccess().getIfStmtParserRuleCall_4_1_0());
				}
				this_ifStmt_6=ruleifStmt
				{
					$current.merge(this_ifStmt_6);
				}
				{
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getIfStmtAccess().getBlockParserRuleCall_4_1_1());
				}
				this_block_7=ruleblock
				{
					$current.merge(this_block_7);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleswitchStmt
entryRuleswitchStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSwitchStmtRule()); }
	iv_ruleswitchStmt=ruleswitchStmt
	{ $current=$iv_ruleswitchStmt.current.getText(); }
	EOF;

// Rule switchStmt
ruleswitchStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSwitchStmtAccess().getExprSwitchStmtParserRuleCall_0());
		}
		this_exprSwitchStmt_0=ruleexprSwitchStmt
		{
			$current.merge(this_exprSwitchStmt_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSwitchStmtAccess().getTypeSwitchStmtParserRuleCall_1());
		}
		this_typeSwitchStmt_1=ruletypeSwitchStmt
		{
			$current.merge(this_typeSwitchStmt_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleexprSwitchStmt
entryRuleexprSwitchStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExprSwitchStmtRule()); }
	iv_ruleexprSwitchStmt=ruleexprSwitchStmt
	{ $current=$iv_ruleexprSwitchStmt.current.getText(); }
	EOF;

// Rule exprSwitchStmt
ruleexprSwitchStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='switch'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExprSwitchStmtAccess().getSwitchKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getExprSwitchStmtAccess().getSimpleStmtParserRuleCall_1_0());
			}
			this_simpleStmt_1=rulesimpleStmt
			{
				$current.merge(this_simpleStmt_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=';'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprSwitchStmtAccess().getSemicolonKeyword_1_1());
			}
		)?
		(
			{
				newCompositeNode(grammarAccess.getExprSwitchStmtAccess().getExpressionParserRuleCall_2());
			}
			this_expression_3=ruleexpression
			{
				$current.merge(this_expression_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExprSwitchStmtAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			{
				newCompositeNode(grammarAccess.getExprSwitchStmtAccess().getExprCaseClauseParserRuleCall_4());
			}
			this_exprCaseClause_5=ruleexprCaseClause
			{
				$current.merge(this_exprCaseClause_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExprSwitchStmtAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleexprCaseClause
entryRuleexprCaseClause returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExprCaseClauseRule()); }
	iv_ruleexprCaseClause=ruleexprCaseClause
	{ $current=$iv_ruleexprCaseClause.current.getText(); }
	EOF;

// Rule exprCaseClause
ruleexprCaseClause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExprCaseClauseAccess().getExprSwitchCaseParserRuleCall_0());
		}
		this_exprSwitchCase_0=ruleexprSwitchCase
		{
			$current.merge(this_exprSwitchCase_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=':'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExprCaseClauseAccess().getColonKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getExprCaseClauseAccess().getStatementListParserRuleCall_2());
		}
		this_statementList_2=rulestatementList
		{
			$current.merge(this_statementList_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleexprSwitchCase
entryRuleexprSwitchCase returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExprSwitchCaseRule()); }
	iv_ruleexprSwitchCase=ruleexprSwitchCase
	{ $current=$iv_ruleexprSwitchCase.current.getText(); }
	EOF;

// Rule exprSwitchCase
ruleexprSwitchCase returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='case'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExprSwitchCaseAccess().getCaseKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getExprSwitchCaseAccess().getExpressionListParserRuleCall_0_1());
			}
			this_expressionList_1=ruleexpressionList
			{
				$current.merge(this_expressionList_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		kw='default'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExprSwitchCaseAccess().getDefaultKeyword_1());
		}
	)
;

// Entry rule entryRuletypeSwitchStmt
entryRuletypeSwitchStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeSwitchStmtRule()); }
	iv_ruletypeSwitchStmt=ruletypeSwitchStmt
	{ $current=$iv_ruletypeSwitchStmt.current.getText(); }
	EOF;

// Rule typeSwitchStmt
ruletypeSwitchStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='switch'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeSwitchStmtAccess().getSwitchKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getTypeSwitchStmtAccess().getSimpleStmtParserRuleCall_1_0());
			}
			this_simpleStmt_1=rulesimpleStmt
			{
				$current.merge(this_simpleStmt_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=';'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTypeSwitchStmtAccess().getSemicolonKeyword_1_1());
			}
		)?
		{
			newCompositeNode(grammarAccess.getTypeSwitchStmtAccess().getTypeSwitchGuardParserRuleCall_2());
		}
		this_typeSwitchGuard_3=ruletypeSwitchGuard
		{
			$current.merge(this_typeSwitchGuard_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeSwitchStmtAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			{
				newCompositeNode(grammarAccess.getTypeSwitchStmtAccess().getTypeCaseClauseParserRuleCall_4());
			}
			this_typeCaseClause_5=ruletypeCaseClause
			{
				$current.merge(this_typeCaseClause_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeSwitchStmtAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuletypeSwitchGuard
entryRuletypeSwitchGuard returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeSwitchGuardRule()); }
	iv_ruletypeSwitchGuard=ruletypeSwitchGuard
	{ $current=$iv_ruletypeSwitchGuard.current.getText(); }
	EOF;

// Rule typeSwitchGuard
ruletypeSwitchGuard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_IDENTIFIER_0=RULE_IDENTIFIER
			{
				$current.merge(this_IDENTIFIER_0);
			}
			{
				newLeafNode(this_IDENTIFIER_0, grammarAccess.getTypeSwitchGuardAccess().getIDENTIFIERTerminalRuleCall_0_0());
			}
			kw=':='
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTypeSwitchGuardAccess().getColonEqualsSignKeyword_0_1());
			}
		)?
		{
			newCompositeNode(grammarAccess.getTypeSwitchGuardAccess().getPrimaryExprParserRuleCall_1());
		}
		this_primaryExpr_2=ruleprimaryExpr
		{
			$current.merge(this_primaryExpr_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeSwitchGuardAccess().getFullStopKeyword_2());
		}
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeSwitchGuardAccess().getLeftParenthesisKeyword_3());
		}
		kw='type'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeSwitchGuardAccess().getTypeKeyword_4());
		}
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeSwitchGuardAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuletypeCaseClause
entryRuletypeCaseClause returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeCaseClauseRule()); }
	iv_ruletypeCaseClause=ruletypeCaseClause
	{ $current=$iv_ruletypeCaseClause.current.getText(); }
	EOF;

// Rule typeCaseClause
ruletypeCaseClause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeCaseClauseAccess().getTypeSwitchCaseParserRuleCall_0());
		}
		this_typeSwitchCase_0=ruletypeSwitchCase
		{
			$current.merge(this_typeSwitchCase_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=':'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeCaseClauseAccess().getColonKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getTypeCaseClauseAccess().getStatementListParserRuleCall_2());
		}
		this_statementList_2=rulestatementList
		{
			$current.merge(this_statementList_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuletypeSwitchCase
entryRuletypeSwitchCase returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeSwitchCaseRule()); }
	iv_ruletypeSwitchCase=ruletypeSwitchCase
	{ $current=$iv_ruletypeSwitchCase.current.getText(); }
	EOF;

// Rule typeSwitchCase
ruletypeSwitchCase returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='case'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTypeSwitchCaseAccess().getCaseKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getTypeSwitchCaseAccess().getTypeListParserRuleCall_0_1());
			}
			this_typeList_1=ruletypeList
			{
				$current.merge(this_typeList_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		kw='default'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeSwitchCaseAccess().getDefaultKeyword_1());
		}
	)
;

// Entry rule entryRuletypeList
entryRuletypeList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeListRule()); }
	iv_ruletypeList=ruletypeList
	{ $current=$iv_ruletypeList.current.getText(); }
	EOF;

// Rule typeList
ruletypeList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeListAccess().getTypeParserRuleCall_0());
		}
		this_type_0=ruletype
		{
			$current.merge(this_type_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTypeListAccess().getCommaKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getTypeListAccess().getTypeParserRuleCall_1_1());
			}
			this_type_2=ruletype
			{
				$current.merge(this_type_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleselectStmt
entryRuleselectStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSelectStmtRule()); }
	iv_ruleselectStmt=ruleselectStmt
	{ $current=$iv_ruleselectStmt.current.getText(); }
	EOF;

// Rule selectStmt
ruleselectStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='select'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSelectStmtAccess().getSelectKeyword_0());
		}
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSelectStmtAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			{
				newCompositeNode(grammarAccess.getSelectStmtAccess().getCommClauseParserRuleCall_2());
			}
			this_commClause_2=rulecommClause
			{
				$current.merge(this_commClause_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSelectStmtAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRulecommClause
entryRulecommClause returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCommClauseRule()); }
	iv_rulecommClause=rulecommClause
	{ $current=$iv_rulecommClause.current.getText(); }
	EOF;

// Rule commClause
rulecommClause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCommClauseAccess().getCommCaseParserRuleCall_0());
		}
		this_commCase_0=rulecommCase
		{
			$current.merge(this_commCase_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=':'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCommClauseAccess().getColonKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getCommClauseAccess().getStatementListParserRuleCall_2());
		}
		this_statementList_2=rulestatementList
		{
			$current.merge(this_statementList_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulecommCase
entryRulecommCase returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCommCaseRule()); }
	iv_rulecommCase=rulecommCase
	{ $current=$iv_rulecommCase.current.getText(); }
	EOF;

// Rule commCase
rulecommCase returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='case'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCommCaseAccess().getCaseKeyword_0_0());
			}
			(
				{
					newCompositeNode(grammarAccess.getCommCaseAccess().getSendStmtParserRuleCall_0_1_0());
				}
				this_sendStmt_1=rulesendStmt
				{
					$current.merge(this_sendStmt_1);
				}
				{
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getCommCaseAccess().getRecvStmtParserRuleCall_0_1_1());
				}
				this_recvStmt_2=rulerecvStmt
				{
					$current.merge(this_recvStmt_2);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		kw='default'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCommCaseAccess().getDefaultKeyword_1());
		}
	)
;

// Entry rule entryRulerecvStmt
entryRulerecvStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRecvStmtRule()); }
	iv_rulerecvStmt=rulerecvStmt
	{ $current=$iv_rulerecvStmt.current.getText(); }
	EOF;

// Rule recvStmt
rulerecvStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRecvStmtAccess().getExpressionListParserRuleCall_0_0_0());
				}
				this_expressionList_0=ruleexpressionList
				{
					$current.merge(this_expressionList_0);
				}
				{
					afterParserOrEnumRuleCall();
				}
				kw='='
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getRecvStmtAccess().getEqualsSignKeyword_0_0_1());
				}
			)
			    |
			(
				{
					newCompositeNode(grammarAccess.getRecvStmtAccess().getIdentifierListParserRuleCall_0_1_0());
				}
				this_identifierList_2=ruleidentifierList
				{
					$current.merge(this_identifierList_2);
				}
				{
					afterParserOrEnumRuleCall();
				}
				kw=':='
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getRecvStmtAccess().getColonEqualsSignKeyword_0_1_1());
				}
			)
		)?
		{
			newCompositeNode(grammarAccess.getRecvStmtAccess().getExpressionParserRuleCall_1());
		}
		this_expression_4=ruleexpression
		{
			$current.merge(this_expression_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleforStmt
entryRuleforStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getForStmtRule()); }
	iv_ruleforStmt=ruleforStmt
	{ $current=$iv_ruleforStmt.current.getText(); }
	EOF;

// Rule forStmt
ruleforStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='for'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getForStmtAccess().getForKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getForStmtAccess().getExpressionParserRuleCall_1_0());
			}
			this_expression_1=ruleexpression
			{
				$current.merge(this_expression_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getForStmtAccess().getForClauseParserRuleCall_1_1());
			}
			this_forClause_2=ruleforClause
			{
				$current.merge(this_forClause_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getForStmtAccess().getRangeClauseParserRuleCall_1_2());
			}
			this_rangeClause_3=rulerangeClause
			{
				$current.merge(this_rangeClause_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		{
			newCompositeNode(grammarAccess.getForStmtAccess().getBlockParserRuleCall_2());
		}
		this_block_4=ruleblock
		{
			$current.merge(this_block_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleforClause
entryRuleforClause returns [String current=null]:
	{ newCompositeNode(grammarAccess.getForClauseRule()); }
	iv_ruleforClause=ruleforClause
	{ $current=$iv_ruleforClause.current.getText(); }
	EOF;

// Rule forClause
ruleforClause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getForClauseAccess().getSimpleStmtParserRuleCall_0());
			}
			this_simpleStmt_0=rulesimpleStmt
			{
				$current.merge(this_simpleStmt_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getForClauseAccess().getSemicolonKeyword_1());
		}
		(
			{
				newCompositeNode(grammarAccess.getForClauseAccess().getExpressionParserRuleCall_2());
			}
			this_expression_2=ruleexpression
			{
				$current.merge(this_expression_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getForClauseAccess().getSemicolonKeyword_3());
		}
		(
			{
				newCompositeNode(grammarAccess.getForClauseAccess().getSimpleStmtParserRuleCall_4());
			}
			this_simpleStmt_4=rulesimpleStmt
			{
				$current.merge(this_simpleStmt_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRulerangeClause
entryRulerangeClause returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRangeClauseRule()); }
	iv_rulerangeClause=rulerangeClause
	{ $current=$iv_rulerangeClause.current.getText(); }
	EOF;

// Rule rangeClause
rulerangeClause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRangeClauseAccess().getExpressionListParserRuleCall_0_0_0());
				}
				this_expressionList_0=ruleexpressionList
				{
					$current.merge(this_expressionList_0);
				}
				{
					afterParserOrEnumRuleCall();
				}
				kw='='
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getRangeClauseAccess().getEqualsSignKeyword_0_0_1());
				}
			)
			    |
			(
				{
					newCompositeNode(grammarAccess.getRangeClauseAccess().getIdentifierListParserRuleCall_0_1_0());
				}
				this_identifierList_2=ruleidentifierList
				{
					$current.merge(this_identifierList_2);
				}
				{
					afterParserOrEnumRuleCall();
				}
				kw=':='
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getRangeClauseAccess().getColonEqualsSignKeyword_0_1_1());
				}
			)
		)?
		kw='range'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRangeClauseAccess().getRangeKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getRangeClauseAccess().getExpressionParserRuleCall_2());
		}
		this_expression_5=ruleexpression
		{
			$current.merge(this_expression_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulegoStmt
entryRulegoStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getGoStmtRule()); }
	iv_rulegoStmt=rulegoStmt
	{ $current=$iv_rulegoStmt.current.getText(); }
	EOF;

// Rule goStmt
rulegoStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='go'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getGoStmtAccess().getGoKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getGoStmtAccess().getExpressionParserRuleCall_1());
		}
		this_expression_1=ruleexpression
		{
			$current.merge(this_expression_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuletype
entryRuletype returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruletype=ruletype
	{ $current=$iv_ruletype.current.getText(); }
	EOF;

// Rule type
ruletype returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeAccess().getTypeNameParserRuleCall_0());
		}
		this_typeName_0=ruletypeName
		{
			$current.merge(this_typeName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getTypeLitParserRuleCall_1());
		}
		this_typeLit_1=ruletypeLit
		{
			$current.merge(this_typeLit_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTypeAccess().getLeftParenthesisKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getTypeAccess().getTypeParserRuleCall_2_1());
			}
			this_type_3=ruletype
			{
				$current.merge(this_type_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTypeAccess().getRightParenthesisKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRuletypeName
entryRuletypeName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeNameRule()); }
	iv_ruletypeName=ruletypeName
	{ $current=$iv_ruletypeName.current.getText(); }
	EOF;

// Rule typeName
ruletypeName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENTIFIER_0=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_0);
		}
		{
			newLeafNode(this_IDENTIFIER_0, grammarAccess.getTypeNameAccess().getIDENTIFIERTerminalRuleCall_0());
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeNameAccess().getQualifiedIdentParserRuleCall_1());
		}
		this_qualifiedIdent_1=rulequalifiedIdent
		{
			$current.merge(this_qualifiedIdent_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuletypeLit
entryRuletypeLit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeLitRule()); }
	iv_ruletypeLit=ruletypeLit
	{ $current=$iv_ruletypeLit.current.getText(); }
	EOF;

// Rule typeLit
ruletypeLit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeLitAccess().getArrayTypeParserRuleCall_0());
		}
		this_arrayType_0=rulearrayType
		{
			$current.merge(this_arrayType_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeLitAccess().getStructTypeParserRuleCall_1());
		}
		this_structType_1=rulestructType
		{
			$current.merge(this_structType_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeLitAccess().getPointerTypeParserRuleCall_2());
		}
		this_pointerType_2=rulepointerType
		{
			$current.merge(this_pointerType_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeLitAccess().getFunctionTypeParserRuleCall_3());
		}
		this_functionType_3=rulefunctionType
		{
			$current.merge(this_functionType_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeLitAccess().getInterfaceTypeParserRuleCall_4());
		}
		this_interfaceType_4=ruleinterfaceType
		{
			$current.merge(this_interfaceType_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeLitAccess().getSliceTypeParserRuleCall_5());
		}
		this_sliceType_5=rulesliceType
		{
			$current.merge(this_sliceType_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeLitAccess().getMapTypeParserRuleCall_6());
		}
		this_mapType_6=rulemapType
		{
			$current.merge(this_mapType_6);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeLitAccess().getChannelTypeParserRuleCall_7());
		}
		this_channelType_7=rulechannelType
		{
			$current.merge(this_channelType_7);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulearrayType
entryRulearrayType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getArrayTypeRule()); }
	iv_rulearrayType=rulearrayType
	{ $current=$iv_rulearrayType.current.getText(); }
	EOF;

// Rule arrayType
rulearrayType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='['
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArrayTypeAccess().getLeftSquareBracketKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getArrayTypeAccess().getArrayLengthParserRuleCall_1());
		}
		this_arrayLength_1=rulearrayLength
		{
			$current.merge(this_arrayLength_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=']'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArrayTypeAccess().getRightSquareBracketKeyword_2());
		}
		{
			newCompositeNode(grammarAccess.getArrayTypeAccess().getElementTypeParserRuleCall_3());
		}
		this_elementType_3=ruleelementType
		{
			$current.merge(this_elementType_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulearrayLength
entryRulearrayLength returns [String current=null]:
	{ newCompositeNode(grammarAccess.getArrayLengthRule()); }
	iv_rulearrayLength=rulearrayLength
	{ $current=$iv_rulearrayLength.current.getText(); }
	EOF;

// Rule arrayLength
rulearrayLength returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getArrayLengthAccess().getExpressionParserRuleCall());
	}
	this_expression_0=ruleexpression
	{
		$current.merge(this_expression_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleelementType
entryRuleelementType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getElementTypeRule()); }
	iv_ruleelementType=ruleelementType
	{ $current=$iv_ruleelementType.current.getText(); }
	EOF;

// Rule elementType
ruleelementType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getElementTypeAccess().getTypeParserRuleCall());
	}
	this_type_0=ruletype
	{
		$current.merge(this_type_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRulepointerType
entryRulepointerType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPointerTypeRule()); }
	iv_rulepointerType=rulepointerType
	{ $current=$iv_rulepointerType.current.getText(); }
	EOF;

// Rule pointerType
rulepointerType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPointerTypeAccess().getAsteriskKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getPointerTypeAccess().getTypeParserRuleCall_1());
		}
		this_type_1=ruletype
		{
			$current.merge(this_type_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleinterfaceType
entryRuleinterfaceType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getInterfaceTypeRule()); }
	iv_ruleinterfaceType=ruleinterfaceType
	{ $current=$iv_ruleinterfaceType.current.getText(); }
	EOF;

// Rule interfaceType
ruleinterfaceType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='interface'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInterfaceTypeAccess().getInterfaceKeyword_0());
		}
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInterfaceTypeAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			{
				newCompositeNode(grammarAccess.getInterfaceTypeAccess().getMethodSpecParserRuleCall_2_0());
			}
			this_methodSpec_2=rulemethodSpec
			{
				$current.merge(this_methodSpec_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getInterfaceTypeAccess().getEosParserRuleCall_2_1());
			}
			this_eos_3=ruleeos
			{
				$current.merge(this_eos_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInterfaceTypeAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRulesliceType
entryRulesliceType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSliceTypeRule()); }
	iv_rulesliceType=rulesliceType
	{ $current=$iv_rulesliceType.current.getText(); }
	EOF;

// Rule sliceType
rulesliceType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='['
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSliceTypeAccess().getLeftSquareBracketKeyword_0());
		}
		kw=']'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSliceTypeAccess().getRightSquareBracketKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getSliceTypeAccess().getElementTypeParserRuleCall_2());
		}
		this_elementType_2=ruleelementType
		{
			$current.merge(this_elementType_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulemapType
entryRulemapType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMapTypeRule()); }
	iv_rulemapType=rulemapType
	{ $current=$iv_rulemapType.current.getText(); }
	EOF;

// Rule mapType
rulemapType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='map'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMapTypeAccess().getMapKeyword_0());
		}
		kw='['
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMapTypeAccess().getLeftSquareBracketKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getMapTypeAccess().getTypeParserRuleCall_2());
		}
		this_type_2=ruletype
		{
			$current.merge(this_type_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=']'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMapTypeAccess().getRightSquareBracketKeyword_3());
		}
		{
			newCompositeNode(grammarAccess.getMapTypeAccess().getElementTypeParserRuleCall_4());
		}
		this_elementType_4=ruleelementType
		{
			$current.merge(this_elementType_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulechannelType
entryRulechannelType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getChannelTypeRule()); }
	iv_rulechannelType=rulechannelType
	{ $current=$iv_rulechannelType.current.getText(); }
	EOF;

// Rule channelType
rulechannelType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='chan'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getChannelTypeAccess().getChanKeyword_0_0());
			}
			    |
			(
				kw='chan'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getChannelTypeAccess().getChanKeyword_0_1_0());
				}
				kw='<-'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getChannelTypeAccess().getLessThanSignHyphenMinusKeyword_0_1_1());
				}
			)
			    |
			(
				kw='<-'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getChannelTypeAccess().getLessThanSignHyphenMinusKeyword_0_2_0());
				}
				kw='chan'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getChannelTypeAccess().getChanKeyword_0_2_1());
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getChannelTypeAccess().getElementTypeParserRuleCall_1());
		}
		this_elementType_5=ruleelementType
		{
			$current.merge(this_elementType_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulemethodSpec
entryRulemethodSpec returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMethodSpecRule()); }
	iv_rulemethodSpec=rulemethodSpec
	{ $current=$iv_rulemethodSpec.current.getText(); }
	EOF;

// Rule methodSpec
rulemethodSpec returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_IDENTIFIER_0=RULE_IDENTIFIER
			{
				$current.merge(this_IDENTIFIER_0);
			}
			{
				newLeafNode(this_IDENTIFIER_0, grammarAccess.getMethodSpecAccess().getIDENTIFIERTerminalRuleCall_0_0());
			}
			{
				newCompositeNode(grammarAccess.getMethodSpecAccess().getSignatureParserRuleCall_0_1());
			}
			this_signature_1=rulesignature
			{
				$current.merge(this_signature_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getMethodSpecAccess().getTypeNameParserRuleCall_1());
		}
		this_typeName_2=ruletypeName
		{
			$current.merge(this_typeName_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulefunctionType
entryRulefunctionType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFunctionTypeRule()); }
	iv_rulefunctionType=rulefunctionType
	{ $current=$iv_rulefunctionType.current.getText(); }
	EOF;

// Rule functionType
rulefunctionType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='func'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunctionTypeAccess().getFuncKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getFunctionTypeAccess().getSignatureParserRuleCall_1());
		}
		this_signature_1=rulesignature
		{
			$current.merge(this_signature_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulesignature
entryRulesignature returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSignatureRule()); }
	iv_rulesignature=rulesignature
	{ $current=$iv_rulesignature.current.getText(); }
	EOF;

// Rule signature
rulesignature returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSignatureAccess().getParametersParserRuleCall_0());
		}
		this_parameters_0=ruleparameters
		{
			$current.merge(this_parameters_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getSignatureAccess().getResultParserRuleCall_1());
			}
			this_result_1=ruleresult
			{
				$current.merge(this_result_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleresult
entryRuleresult returns [String current=null]:
	{ newCompositeNode(grammarAccess.getResultRule()); }
	iv_ruleresult=ruleresult
	{ $current=$iv_ruleresult.current.getText(); }
	EOF;

// Rule result
ruleresult returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getResultAccess().getParametersParserRuleCall_0());
		}
		this_parameters_0=ruleparameters
		{
			$current.merge(this_parameters_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getResultAccess().getTypeParserRuleCall_1());
		}
		this_type_1=ruletype
		{
			$current.merge(this_type_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleparameters
entryRuleparameters returns [String current=null]:
	{ newCompositeNode(grammarAccess.getParametersRule()); }
	iv_ruleparameters=ruleparameters
	{ $current=$iv_ruleparameters.current.getText(); }
	EOF;

// Rule parameters
ruleparameters returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getParametersAccess().getLeftParenthesisKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getParametersAccess().getParameterListParserRuleCall_1_0());
			}
			this_parameterList_1=ruleparameterList
			{
				$current.merge(this_parameterList_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				kw=','
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getParametersAccess().getCommaKeyword_1_1());
				}
			)?
		)?
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getParametersAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleparameterList
entryRuleparameterList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getParameterListRule()); }
	iv_ruleparameterList=ruleparameterList
	{ $current=$iv_ruleparameterList.current.getText(); }
	EOF;

// Rule parameterList
ruleparameterList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getParameterListAccess().getParameterDeclParserRuleCall_0());
		}
		this_parameterDecl_0=ruleparameterDecl
		{
			$current.merge(this_parameterDecl_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getParameterListAccess().getCommaKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getParameterListAccess().getParameterDeclParserRuleCall_1_1());
			}
			this_parameterDecl_2=ruleparameterDecl
			{
				$current.merge(this_parameterDecl_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleparameterDecl
entryRuleparameterDecl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getParameterDeclRule()); }
	iv_ruleparameterDecl=ruleparameterDecl
	{ $current=$iv_ruleparameterDecl.current.getText(); }
	EOF;

// Rule parameterDecl
ruleparameterDecl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getParameterDeclAccess().getIdentifierListParserRuleCall_0());
			}
			this_identifierList_0=ruleidentifierList
			{
				$current.merge(this_identifierList_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		(
			kw='...'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getParameterDeclAccess().getFullStopFullStopFullStopKeyword_1());
			}
		)?
		{
			newCompositeNode(grammarAccess.getParameterDeclAccess().getTypeParserRuleCall_2());
		}
		this_type_2=ruletype
		{
			$current.merge(this_type_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleoperand
entryRuleoperand returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOperandRule()); }
	iv_ruleoperand=ruleoperand
	{ $current=$iv_ruleoperand.current.getText(); }
	EOF;

// Rule operand
ruleoperand returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOperandAccess().getLiteralParserRuleCall_0());
		}
		this_literal_0=ruleliteral
		{
			$current.merge(this_literal_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperandAccess().getOperandNameParserRuleCall_1());
		}
		this_operandName_1=ruleoperandName
		{
			$current.merge(this_operandName_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperandAccess().getMethodExprParserRuleCall_2());
		}
		this_methodExpr_2=rulemethodExpr
		{
			$current.merge(this_methodExpr_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOperandAccess().getLeftParenthesisKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getOperandAccess().getExpressionParserRuleCall_3_1());
			}
			this_expression_4=ruleexpression
			{
				$current.merge(this_expression_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOperandAccess().getRightParenthesisKeyword_3_2());
			}
		)
	)
;

// Entry rule entryRuleliteral
entryRuleliteral returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleliteral=ruleliteral
	{ $current=$iv_ruleliteral.current.getText(); }
	EOF;

// Rule literal
ruleliteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getBasicLitParserRuleCall_0());
		}
		this_basicLit_0=rulebasicLit
		{
			$current.merge(this_basicLit_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getCompositeLitParserRuleCall_1());
		}
		this_compositeLit_1=rulecompositeLit
		{
			$current.merge(this_compositeLit_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getFunctionLitParserRuleCall_2());
		}
		this_functionLit_2=rulefunctionLit
		{
			$current.merge(this_functionLit_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulebasicLit
entryRulebasicLit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBasicLitRule()); }
	iv_rulebasicLit=rulebasicLit
	{ $current=$iv_rulebasicLit.current.getText(); }
	EOF;

// Rule basicLit
rulebasicLit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_LIT_0=RULE_INT_LIT
		{
			$current.merge(this_INT_LIT_0);
		}
		{
			newLeafNode(this_INT_LIT_0, grammarAccess.getBasicLitAccess().getINT_LITTerminalRuleCall_0());
		}
		    |
		this_FLOAT_LIT_1=RULE_FLOAT_LIT
		{
			$current.merge(this_FLOAT_LIT_1);
		}
		{
			newLeafNode(this_FLOAT_LIT_1, grammarAccess.getBasicLitAccess().getFLOAT_LITTerminalRuleCall_1());
		}
		    |
		this_IMAGINARY_LIT_2=RULE_IMAGINARY_LIT
		{
			$current.merge(this_IMAGINARY_LIT_2);
		}
		{
			newLeafNode(this_IMAGINARY_LIT_2, grammarAccess.getBasicLitAccess().getIMAGINARY_LITTerminalRuleCall_2());
		}
		    |
		this_RUNE_LIT_3=RULE_RUNE_LIT
		{
			$current.merge(this_RUNE_LIT_3);
		}
		{
			newLeafNode(this_RUNE_LIT_3, grammarAccess.getBasicLitAccess().getRUNE_LITTerminalRuleCall_3());
		}
		    |
		this_STRING_LIT_4=RULE_STRING_LIT
		{
			$current.merge(this_STRING_LIT_4);
		}
		{
			newLeafNode(this_STRING_LIT_4, grammarAccess.getBasicLitAccess().getSTRING_LITTerminalRuleCall_4());
		}
	)
;

// Entry rule entryRuleoperandName
entryRuleoperandName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOperandNameRule()); }
	iv_ruleoperandName=ruleoperandName
	{ $current=$iv_ruleoperandName.current.getText(); }
	EOF;

// Rule operandName
ruleoperandName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENTIFIER_0=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_0);
		}
		{
			newLeafNode(this_IDENTIFIER_0, grammarAccess.getOperandNameAccess().getIDENTIFIERTerminalRuleCall_0());
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperandNameAccess().getQualifiedIdentParserRuleCall_1());
		}
		this_qualifiedIdent_1=rulequalifiedIdent
		{
			$current.merge(this_qualifiedIdent_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulequalifiedIdent
entryRulequalifiedIdent returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedIdentRule()); }
	iv_rulequalifiedIdent=rulequalifiedIdent
	{ $current=$iv_rulequalifiedIdent.current.getText(); }
	EOF;

// Rule qualifiedIdent
rulequalifiedIdent returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENTIFIER_0=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_0);
		}
		{
			newLeafNode(this_IDENTIFIER_0, grammarAccess.getQualifiedIdentAccess().getIDENTIFIERTerminalRuleCall_0());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQualifiedIdentAccess().getFullStopKeyword_1());
		}
		this_IDENTIFIER_2=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_2);
		}
		{
			newLeafNode(this_IDENTIFIER_2, grammarAccess.getQualifiedIdentAccess().getIDENTIFIERTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRulecompositeLit
entryRulecompositeLit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCompositeLitRule()); }
	iv_rulecompositeLit=rulecompositeLit
	{ $current=$iv_rulecompositeLit.current.getText(); }
	EOF;

// Rule compositeLit
rulecompositeLit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCompositeLitAccess().getLiteralTypeParserRuleCall_0());
		}
		this_literalType_0=ruleliteralType
		{
			$current.merge(this_literalType_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getCompositeLitAccess().getLiteralValueParserRuleCall_1());
		}
		this_literalValue_1=ruleliteralValue
		{
			$current.merge(this_literalValue_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleliteralType
entryRuleliteralType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLiteralTypeRule()); }
	iv_ruleliteralType=ruleliteralType
	{ $current=$iv_ruleliteralType.current.getText(); }
	EOF;

// Rule literalType
ruleliteralType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLiteralTypeAccess().getStructTypeParserRuleCall_0());
		}
		this_structType_0=rulestructType
		{
			$current.merge(this_structType_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralTypeAccess().getArrayTypeParserRuleCall_1());
		}
		this_arrayType_1=rulearrayType
		{
			$current.merge(this_arrayType_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			kw='['
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getLiteralTypeAccess().getLeftSquareBracketKeyword_2_0());
			}
			kw='...'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getLiteralTypeAccess().getFullStopFullStopFullStopKeyword_2_1());
			}
			kw=']'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getLiteralTypeAccess().getRightSquareBracketKeyword_2_2());
			}
			{
				newCompositeNode(grammarAccess.getLiteralTypeAccess().getElementTypeParserRuleCall_2_3());
			}
			this_elementType_5=ruleelementType
			{
				$current.merge(this_elementType_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getLiteralTypeAccess().getSliceTypeParserRuleCall_3());
		}
		this_sliceType_6=rulesliceType
		{
			$current.merge(this_sliceType_6);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralTypeAccess().getMapTypeParserRuleCall_4());
		}
		this_mapType_7=rulemapType
		{
			$current.merge(this_mapType_7);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralTypeAccess().getTypeNameParserRuleCall_5());
		}
		this_typeName_8=ruletypeName
		{
			$current.merge(this_typeName_8);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleliteralValue
entryRuleliteralValue returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLiteralValueRule()); }
	iv_ruleliteralValue=ruleliteralValue
	{ $current=$iv_ruleliteralValue.current.getText(); }
	EOF;

// Rule literalValue
ruleliteralValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLiteralValueAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getLiteralValueAccess().getElementListParserRuleCall_1_0());
			}
			this_elementList_1=ruleelementList
			{
				$current.merge(this_elementList_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				kw=','
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getLiteralValueAccess().getCommaKeyword_1_1());
				}
			)?
		)?
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLiteralValueAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleelementList
entryRuleelementList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getElementListRule()); }
	iv_ruleelementList=ruleelementList
	{ $current=$iv_ruleelementList.current.getText(); }
	EOF;

// Rule elementList
ruleelementList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getElementListAccess().getKeyedElementParserRuleCall_0());
		}
		this_keyedElement_0=rulekeyedElement
		{
			$current.merge(this_keyedElement_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getElementListAccess().getCommaKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getElementListAccess().getKeyedElementParserRuleCall_1_1());
			}
			this_keyedElement_2=rulekeyedElement
			{
				$current.merge(this_keyedElement_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRulekeyedElement
entryRulekeyedElement returns [String current=null]:
	{ newCompositeNode(grammarAccess.getKeyedElementRule()); }
	iv_rulekeyedElement=rulekeyedElement
	{ $current=$iv_rulekeyedElement.current.getText(); }
	EOF;

// Rule keyedElement
rulekeyedElement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getKeyedElementAccess().getKeyParserRuleCall_0_0());
			}
			this_key_0=rulekey
			{
				$current.merge(this_key_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=':'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getKeyedElementAccess().getColonKeyword_0_1());
			}
		)?
		{
			newCompositeNode(grammarAccess.getKeyedElementAccess().getElementParserRuleCall_1());
		}
		this_element_2=ruleelement
		{
			$current.merge(this_element_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulekey
entryRulekey returns [String current=null]:
	{ newCompositeNode(grammarAccess.getKeyRule()); }
	iv_rulekey=rulekey
	{ $current=$iv_rulekey.current.getText(); }
	EOF;

// Rule key
rulekey returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENTIFIER_0=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_0);
		}
		{
			newLeafNode(this_IDENTIFIER_0, grammarAccess.getKeyAccess().getIDENTIFIERTerminalRuleCall_0());
		}
		    |
		{
			newCompositeNode(grammarAccess.getKeyAccess().getExpressionParserRuleCall_1());
		}
		this_expression_1=ruleexpression
		{
			$current.merge(this_expression_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getKeyAccess().getLiteralValueParserRuleCall_2());
		}
		this_literalValue_2=ruleliteralValue
		{
			$current.merge(this_literalValue_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleelement
entryRuleelement returns [String current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleelement=ruleelement
	{ $current=$iv_ruleelement.current.getText(); }
	EOF;

// Rule element
ruleelement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getElementAccess().getExpressionParserRuleCall_0());
		}
		this_expression_0=ruleexpression
		{
			$current.merge(this_expression_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getLiteralValueParserRuleCall_1());
		}
		this_literalValue_1=ruleliteralValue
		{
			$current.merge(this_literalValue_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulestructType
entryRulestructType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStructTypeRule()); }
	iv_rulestructType=rulestructType
	{ $current=$iv_rulestructType.current.getText(); }
	EOF;

// Rule structType
rulestructType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='struct'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStructTypeAccess().getStructKeyword_0());
		}
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStructTypeAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			{
				newCompositeNode(grammarAccess.getStructTypeAccess().getFieldDeclParserRuleCall_2_0());
			}
			this_fieldDecl_2=rulefieldDecl
			{
				$current.merge(this_fieldDecl_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getStructTypeAccess().getEosParserRuleCall_2_1());
			}
			this_eos_3=ruleeos
			{
				$current.merge(this_eos_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStructTypeAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRulefieldDecl
entryRulefieldDecl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFieldDeclRule()); }
	iv_rulefieldDecl=rulefieldDecl
	{ $current=$iv_rulefieldDecl.current.getText(); }
	EOF;

// Rule fieldDecl
rulefieldDecl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFieldDeclAccess().getIdentifierListParserRuleCall_0_0_0());
				}
				this_identifierList_0=ruleidentifierList
				{
					$current.merge(this_identifierList_0);
				}
				{
					afterParserOrEnumRuleCall();
				}
				{
					newCompositeNode(grammarAccess.getFieldDeclAccess().getTypeParserRuleCall_0_0_1());
				}
				this_type_1=ruletype
				{
					$current.merge(this_type_1);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
			    |
			{
				newCompositeNode(grammarAccess.getFieldDeclAccess().getAnonymousFieldParserRuleCall_0_1());
			}
			this_anonymousField_2=ruleanonymousField
			{
				$current.merge(this_anonymousField_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		(
			this_STRING_LIT_3=RULE_STRING_LIT
			{
				$current.merge(this_STRING_LIT_3);
			}
			{
				newLeafNode(this_STRING_LIT_3, grammarAccess.getFieldDeclAccess().getSTRING_LITTerminalRuleCall_1());
			}
		)?
	)
;

// Entry rule entryRuleanonymousField
entryRuleanonymousField returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAnonymousFieldRule()); }
	iv_ruleanonymousField=ruleanonymousField
	{ $current=$iv_ruleanonymousField.current.getText(); }
	EOF;

// Rule anonymousField
ruleanonymousField returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAnonymousFieldAccess().getAsteriskKeyword_0());
			}
		)?
		{
			newCompositeNode(grammarAccess.getAnonymousFieldAccess().getTypeNameParserRuleCall_1());
		}
		this_typeName_1=ruletypeName
		{
			$current.merge(this_typeName_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulefunctionLit
entryRulefunctionLit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFunctionLitRule()); }
	iv_rulefunctionLit=rulefunctionLit
	{ $current=$iv_rulefunctionLit.current.getText(); }
	EOF;

// Rule functionLit
rulefunctionLit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='func'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunctionLitAccess().getFuncKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getFunctionLitAccess().getFunctionParserRuleCall_1());
		}
		this_function_1=rulefunction
		{
			$current.merge(this_function_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleprimaryExpr
entryRuleprimaryExpr returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprRule()); }
	iv_ruleprimaryExpr=ruleprimaryExpr
	{ $current=$iv_ruleprimaryExpr.current.getText(); }
	EOF;

// Rule primaryExpr
ruleprimaryExpr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getOperandParserRuleCall_0_0());
			}
			this_operand_0=ruleoperand
			{
				$current.merge(this_operand_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getPrimaryExprAccess().getConversionParserRuleCall_0_1());
			}
			this_conversion_1=ruleconversion
			{
				$current.merge(this_conversion_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprSelectorParserRuleCall_1());
		}
		this_primaryExprSelector_2=ruleprimaryExprSelector
		{
			$current.merge(this_primaryExprSelector_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprIndexParserRuleCall_2());
		}
		this_primaryExprIndex_3=ruleprimaryExprIndex
		{
			$current.merge(this_primaryExprIndex_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprSliceParserRuleCall_3());
		}
		this_primaryExprSlice_4=ruleprimaryExprSlice
		{
			$current.merge(this_primaryExprSlice_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprTypeAssertionParserRuleCall_4());
		}
		this_primaryExprTypeAssertion_5=ruleprimaryExprTypeAssertion
		{
			$current.merge(this_primaryExprTypeAssertion_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprArgumentsParserRuleCall_5());
		}
		this_primaryExprArguments_6=ruleprimaryExprArguments
		{
			$current.merge(this_primaryExprArguments_6);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleprimaryExprStuff
entryRuleprimaryExprStuff returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprStuffRule()); }
	iv_ruleprimaryExprStuff=ruleprimaryExprStuff
	{ $current=$iv_ruleprimaryExprStuff.current.getText(); }
	EOF;

// Rule primaryExprStuff
ruleprimaryExprStuff returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryExprStuffAccess().getSelectorParserRuleCall_0());
		}
		this_selector_0=ruleselector
		{
			$current.merge(this_selector_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExprStuffAccess().getIndexParserRuleCall_1());
		}
		this_index_1=ruleindex
		{
			$current.merge(this_index_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExprStuffAccess().getSliceParserRuleCall_2());
		}
		this_slice_2=ruleslice
		{
			$current.merge(this_slice_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExprStuffAccess().getTypeAssertionParserRuleCall_3());
		}
		this_typeAssertion_3=ruletypeAssertion
		{
			$current.merge(this_typeAssertion_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExprStuffAccess().getArgumentsParserRuleCall_4());
		}
		this_arguments_4=rulearguments
		{
			$current.merge(this_arguments_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleprimaryExprSelector
entryRuleprimaryExprSelector returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprSelectorRule()); }
	iv_ruleprimaryExprSelector=ruleprimaryExprSelector
	{ $current=$iv_ruleprimaryExprSelector.current.getText(); }
	EOF;

// Rule primaryExprSelector
ruleprimaryExprSelector returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryExprSelectorAccess().getPrimaryExprStuffParserRuleCall_0());
		}
		this_primaryExprStuff_0=ruleprimaryExprStuff
		{
			$current.merge(this_primaryExprStuff_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getPrimaryExprSelectorAccess().getPrimaryExprSelectorParserRuleCall_1());
		}
		this_primaryExprSelector_1=ruleprimaryExprSelector
		{
			$current.merge(this_primaryExprSelector_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)?
;

// Entry rule entryRuleprimaryExprIndex
entryRuleprimaryExprIndex returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprIndexRule()); }
	iv_ruleprimaryExprIndex=ruleprimaryExprIndex
	{ $current=$iv_ruleprimaryExprIndex.current.getText(); }
	EOF;

// Rule primaryExprIndex
ruleprimaryExprIndex returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryExprIndexAccess().getPrimaryExprStuffParserRuleCall_0());
		}
		this_primaryExprStuff_0=ruleprimaryExprStuff
		{
			$current.merge(this_primaryExprStuff_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getPrimaryExprIndexAccess().getPrimaryExprIndexParserRuleCall_1());
		}
		this_primaryExprIndex_1=ruleprimaryExprIndex
		{
			$current.merge(this_primaryExprIndex_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)?
;

// Entry rule entryRuleprimaryExprSlice
entryRuleprimaryExprSlice returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprSliceRule()); }
	iv_ruleprimaryExprSlice=ruleprimaryExprSlice
	{ $current=$iv_ruleprimaryExprSlice.current.getText(); }
	EOF;

// Rule primaryExprSlice
ruleprimaryExprSlice returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryExprSliceAccess().getPrimaryExprStuffParserRuleCall_0());
		}
		this_primaryExprStuff_0=ruleprimaryExprStuff
		{
			$current.merge(this_primaryExprStuff_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getPrimaryExprSliceAccess().getPrimaryExprSliceParserRuleCall_1());
		}
		this_primaryExprSlice_1=ruleprimaryExprSlice
		{
			$current.merge(this_primaryExprSlice_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)?
;

// Entry rule entryRuleprimaryExprTypeAssertion
entryRuleprimaryExprTypeAssertion returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprTypeAssertionRule()); }
	iv_ruleprimaryExprTypeAssertion=ruleprimaryExprTypeAssertion
	{ $current=$iv_ruleprimaryExprTypeAssertion.current.getText(); }
	EOF;

// Rule primaryExprTypeAssertion
ruleprimaryExprTypeAssertion returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryExprTypeAssertionAccess().getPrimaryExprStuffParserRuleCall_0());
		}
		this_primaryExprStuff_0=ruleprimaryExprStuff
		{
			$current.merge(this_primaryExprStuff_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getPrimaryExprTypeAssertionAccess().getPrimaryExprTypeAssertionParserRuleCall_1());
		}
		this_primaryExprTypeAssertion_1=ruleprimaryExprTypeAssertion
		{
			$current.merge(this_primaryExprTypeAssertion_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)?
;

// Entry rule entryRuleprimaryExprArguments
entryRuleprimaryExprArguments returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprArgumentsRule()); }
	iv_ruleprimaryExprArguments=ruleprimaryExprArguments
	{ $current=$iv_ruleprimaryExprArguments.current.getText(); }
	EOF;

// Rule primaryExprArguments
ruleprimaryExprArguments returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryExprArgumentsAccess().getPrimaryExprStuffParserRuleCall_0());
		}
		this_primaryExprStuff_0=ruleprimaryExprStuff
		{
			$current.merge(this_primaryExprStuff_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getPrimaryExprArgumentsAccess().getPrimaryExprArgumentsParserRuleCall_1());
		}
		this_primaryExprArguments_1=ruleprimaryExprArguments
		{
			$current.merge(this_primaryExprArguments_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)?
;

// Entry rule entryRuleselector
entryRuleselector returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSelectorRule()); }
	iv_ruleselector=ruleselector
	{ $current=$iv_ruleselector.current.getText(); }
	EOF;

// Rule selector
ruleselector returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSelectorAccess().getFullStopKeyword_0());
		}
		this_IDENTIFIER_1=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_1);
		}
		{
			newLeafNode(this_IDENTIFIER_1, grammarAccess.getSelectorAccess().getIDENTIFIERTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleindex
entryRuleindex returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIndexRule()); }
	iv_ruleindex=ruleindex
	{ $current=$iv_ruleindex.current.getText(); }
	EOF;

// Rule index
ruleindex returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='['
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIndexAccess().getLeftSquareBracketKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getIndexAccess().getExpressionParserRuleCall_1());
		}
		this_expression_1=ruleexpression
		{
			$current.merge(this_expression_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=']'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIndexAccess().getRightSquareBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleslice
entryRuleslice returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSliceRule()); }
	iv_ruleslice=ruleslice
	{ $current=$iv_ruleslice.current.getText(); }
	EOF;

// Rule slice
ruleslice returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='['
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSliceAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSliceAccess().getExpressionParserRuleCall_1_0_0());
					}
					this_expression_1=ruleexpression
					{
						$current.merge(this_expression_1);
					}
					{
						afterParserOrEnumRuleCall();
					}
				)?
				kw=':'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getSliceAccess().getColonKeyword_1_0_1());
				}
				(
					{
						newCompositeNode(grammarAccess.getSliceAccess().getExpressionParserRuleCall_1_0_2());
					}
					this_expression_3=ruleexpression
					{
						$current.merge(this_expression_3);
					}
					{
						afterParserOrEnumRuleCall();
					}
				)?
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getSliceAccess().getExpressionParserRuleCall_1_1_0());
					}
					this_expression_4=ruleexpression
					{
						$current.merge(this_expression_4);
					}
					{
						afterParserOrEnumRuleCall();
					}
				)?
				kw=':'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getSliceAccess().getColonKeyword_1_1_1());
				}
				{
					newCompositeNode(grammarAccess.getSliceAccess().getExpressionParserRuleCall_1_1_2());
				}
				this_expression_6=ruleexpression
				{
					$current.merge(this_expression_6);
				}
				{
					afterParserOrEnumRuleCall();
				}
				kw=':'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getSliceAccess().getColonKeyword_1_1_3());
				}
				{
					newCompositeNode(grammarAccess.getSliceAccess().getExpressionParserRuleCall_1_1_4());
				}
				this_expression_8=ruleexpression
				{
					$current.merge(this_expression_8);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		kw=']'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSliceAccess().getRightSquareBracketKeyword_2());
		}
	)
;

// Entry rule entryRuletypeAssertion
entryRuletypeAssertion returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeAssertionRule()); }
	iv_ruletypeAssertion=ruletypeAssertion
	{ $current=$iv_ruletypeAssertion.current.getText(); }
	EOF;

// Rule typeAssertion
ruletypeAssertion returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAssertionAccess().getFullStopKeyword_0());
		}
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAssertionAccess().getLeftParenthesisKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getTypeAssertionAccess().getTypeParserRuleCall_2());
		}
		this_type_2=ruletype
		{
			$current.merge(this_type_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAssertionAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRulearguments
entryRulearguments returns [String current=null]:
	{ newCompositeNode(grammarAccess.getArgumentsRule()); }
	iv_rulearguments=rulearguments
	{ $current=$iv_rulearguments.current.getText(); }
	EOF;

// Rule arguments
rulearguments returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArgumentsAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArgumentsAccess().getExpressionListParserRuleCall_1_0_0());
				}
				this_expressionList_1=ruleexpressionList
				{
					$current.merge(this_expressionList_1);
				}
				{
					afterParserOrEnumRuleCall();
				}
				    |
				(
					{
						newCompositeNode(grammarAccess.getArgumentsAccess().getTypeParserRuleCall_1_0_1_0());
					}
					this_type_2=ruletype
					{
						$current.merge(this_type_2);
					}
					{
						afterParserOrEnumRuleCall();
					}
					(
						kw=','
						{
							$current.merge(kw);
							newLeafNode(kw, grammarAccess.getArgumentsAccess().getCommaKeyword_1_0_1_1_0());
						}
						{
							newCompositeNode(grammarAccess.getArgumentsAccess().getExpressionListParserRuleCall_1_0_1_1_1());
						}
						this_expressionList_4=ruleexpressionList
						{
							$current.merge(this_expressionList_4);
						}
						{
							afterParserOrEnumRuleCall();
						}
					)?
				)
			)
			(
				kw='...'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getArgumentsAccess().getFullStopFullStopFullStopKeyword_1_1());
				}
			)?
			(
				kw=','
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getArgumentsAccess().getCommaKeyword_1_2());
				}
			)?
		)?
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArgumentsAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRulemethodExpr
entryRulemethodExpr returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMethodExprRule()); }
	iv_rulemethodExpr=rulemethodExpr
	{ $current=$iv_rulemethodExpr.current.getText(); }
	EOF;

// Rule methodExpr
rulemethodExpr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMethodExprAccess().getReceiverTypeParserRuleCall_0());
		}
		this_receiverType_0=rulereceiverType
		{
			$current.merge(this_receiverType_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMethodExprAccess().getFullStopKeyword_1());
		}
		this_IDENTIFIER_2=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_2);
		}
		{
			newLeafNode(this_IDENTIFIER_2, grammarAccess.getMethodExprAccess().getIDENTIFIERTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRulereceiverType
entryRulereceiverType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getReceiverTypeRule()); }
	iv_rulereceiverType=rulereceiverType
	{ $current=$iv_rulereceiverType.current.getText(); }
	EOF;

// Rule receiverType
rulereceiverType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getReceiverTypeAccess().getTypeNameParserRuleCall_0());
		}
		this_typeName_0=ruletypeName
		{
			$current.merge(this_typeName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getReceiverTypeAccess().getLeftParenthesisKeyword_1_0());
			}
			kw='*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getReceiverTypeAccess().getAsteriskKeyword_1_1());
			}
			{
				newCompositeNode(grammarAccess.getReceiverTypeAccess().getTypeNameParserRuleCall_1_2());
			}
			this_typeName_3=ruletypeName
			{
				$current.merge(this_typeName_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getReceiverTypeAccess().getRightParenthesisKeyword_1_3());
			}
		)
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getReceiverTypeAccess().getLeftParenthesisKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getReceiverTypeAccess().getReceiverTypeParserRuleCall_2_1());
			}
			this_receiverType_6=rulereceiverType
			{
				$current.merge(this_receiverType_6);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getReceiverTypeAccess().getRightParenthesisKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRuleexpression
entryRuleexpression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleexpression=ruleexpression
	{ $current=$iv_ruleexpression.current.getText(); }
	EOF;

// Rule expression
ruleexpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getUnaryExprParserRuleCall_0());
		}
		this_unaryExpr_0=ruleunaryExpr
		{
			$current.merge(this_unaryExpr_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getExpressionMatchedParserRuleCall_1());
		}
		this_expressionMatched_1=ruleexpressionMatched
		{
			$current.merge(this_expressionMatched_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleexpressionMatched
entryRuleexpressionMatched returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpressionMatchedRule()); }
	iv_ruleexpressionMatched=ruleexpressionMatched
	{ $current=$iv_ruleexpressionMatched.current.getText(); }
	EOF;

// Rule expressionMatched
ruleexpressionMatched returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_BINARY_OP_0=RULE_BINARY_OP
		{
			$current.merge(this_BINARY_OP_0);
		}
		{
			newLeafNode(this_BINARY_OP_0, grammarAccess.getExpressionMatchedAccess().getBINARY_OPTerminalRuleCall_0());
		}
		{
			newCompositeNode(grammarAccess.getExpressionMatchedAccess().getExpressionParserRuleCall_1());
		}
		this_expression_1=ruleexpression
		{
			$current.merge(this_expression_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)?
;

// Entry rule entryRuleunaryExpr
entryRuleunaryExpr returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnaryExprRule()); }
	iv_ruleunaryExpr=ruleunaryExpr
	{ $current=$iv_ruleunaryExpr.current.getText(); }
	EOF;

// Rule unaryExpr
ruleunaryExpr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getUnaryExprAccess().getPrimaryExprParserRuleCall_0());
		}
		this_primaryExpr_0=ruleprimaryExpr
		{
			$current.merge(this_primaryExpr_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				kw='+'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getUnaryExprAccess().getPlusSignKeyword_1_0_0());
				}
				    |
				kw='-'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getUnaryExprAccess().getHyphenMinusKeyword_1_0_1());
				}
				    |
				kw='!'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getUnaryExprAccess().getExclamationMarkKeyword_1_0_2());
				}
				    |
				kw='^'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getUnaryExprAccess().getCircumflexAccentKeyword_1_0_3());
				}
				    |
				kw='*'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getUnaryExprAccess().getAsteriskKeyword_1_0_4());
				}
				    |
				kw='&'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getUnaryExprAccess().getAmpersandKeyword_1_0_5());
				}
				    |
				kw='<-'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getUnaryExprAccess().getLessThanSignHyphenMinusKeyword_1_0_6());
				}
			)
			{
				newCompositeNode(grammarAccess.getUnaryExprAccess().getUnaryExprParserRuleCall_1_1());
			}
			this_unaryExpr_8=ruleunaryExpr
			{
				$current.merge(this_unaryExpr_8);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleconversion
entryRuleconversion returns [String current=null]:
	{ newCompositeNode(grammarAccess.getConversionRule()); }
	iv_ruleconversion=ruleconversion
	{ $current=$iv_ruleconversion.current.getText(); }
	EOF;

// Rule conversion
ruleconversion returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConversionAccess().getTypeParserRuleCall_0());
		}
		this_type_0=ruletype
		{
			$current.merge(this_type_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getConversionAccess().getLeftParenthesisKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getConversionAccess().getExpressionParserRuleCall_2());
		}
		this_expression_2=ruleexpression
		{
			$current.merge(this_expression_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getConversionAccess().getCommaKeyword_3());
			}
		)?
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getConversionAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleeos
entryRuleeos returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEosRule()); }
	iv_ruleeos=ruleeos
	{ $current=$iv_ruleeos.current.getText(); }
	EOF;

// Rule eos
ruleeos returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=';'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getEosAccess().getSemicolonKeyword());
	}
;

RULE_IDENTIFIER : RULE_LETTER (RULE_LETTER|RULE_UNICODE_DIGIT)*;

RULE_BINARY_OP : ('||'|'&&'|RULE_REL_OP|RULE_ADD_OP|RULE_MUL_OP);

fragment RULE_REL_OP : ('=='|'!='|'<'|'<='|'>'|'>=');

fragment RULE_ADD_OP : ('+'|'-'|'|'|'^');

fragment RULE_MUL_OP : ('*'|'/'|'%'|'<<'|'>>'|'&'|'&^');

fragment RULE_UNARY_OP : ('+'|'-'|'!'|'^'|'*'|'&'|'<-');

RULE_INT_LIT : (RULE_DECIMAL_LIT|RULE_OCTAL_LIT|RULE_HEX_LIT);

fragment RULE_DECIMAL_LIT : '1'..'9' RULE_DECIMAL_DIGIT*;

fragment RULE_OCTAL_LIT : '0' RULE_OCTAL_DIGIT*;

fragment RULE_HEX_LIT : '0' ('X'|'x') RULE_HEX_DIGIT+;

RULE_FLOAT_LIT : (RULE_DECIMALS '.' RULE_DECIMALS? RULE_EXPONENT?|RULE_DECIMALS RULE_EXPONENT|'.' RULE_DECIMALS RULE_EXPONENT?);

fragment RULE_DECIMALS : RULE_DECIMAL_DIGIT+;

fragment RULE_EXPONENT : ('e'|'E') ('+'|'-')? RULE_DECIMALS;

RULE_IMAGINARY_LIT : (RULE_DECIMALS|RULE_FLOAT_LIT) 'i';

RULE_RUNE_LIT : '\'' (RULE_UNICODE_VALUE|RULE_BYTE_VALUE) '\'';

fragment RULE_UNICODE_VALUE : (RULE_UNICODE_CHAR|RULE_LITTLE_U_VALUE|RULE_BIG_U_VALUE|RULE_ESCAPED_CHAR);

fragment RULE_BYTE_VALUE : (RULE_OCTAL_BYTE_VALUE|RULE_HEX_BYTE_VALUE);

fragment RULE_OCTAL_BYTE_VALUE : '\\' RULE_OCTAL_DIGIT RULE_OCTAL_DIGIT RULE_OCTAL_DIGIT;

fragment RULE_HEX_BYTE_VALUE : '\\x' RULE_HEX_DIGIT RULE_HEX_DIGIT;

fragment RULE_LITTLE_U_VALUE : '\\u' RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT;

fragment RULE_BIG_U_VALUE : '\\U' RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT;

fragment RULE_ESCAPED_CHAR : '\\' ('a'|'b'|'f'|'n'|'r'|'t'|'v'|'\\'|'\''|'"');

RULE_STRING_LIT : (RULE_RAW_STRING_LIT|RULE_INTERPRETED_STRING_LIT);

fragment RULE_RAW_STRING_LIT : '\'' (RULE_UNICODE_CHAR|RULE_NEWLINE)* '\'';

fragment RULE_INTERPRETED_STRING_LIT : '"' (RULE_UNICODE_VALUE|RULE_BYTE_VALUE)* '"';

fragment RULE_LETTER : (RULE_UNICODE_LETTER|'_');

fragment RULE_DECIMAL_DIGIT : '0'..'9';

fragment RULE_OCTAL_DIGIT : '0'..'7';

fragment RULE_HEX_DIGIT : ('0'..'9'|'A'..'F'|'a'..'f');

fragment RULE_NEWLINE : '\n';

fragment RULE_UNICODE_CHAR : ('A'..'Z'|'a'..'z');

fragment RULE_UNICODE_DIGIT : ('0..9'|'\u0660..\u0669'|'\u06F0..\u06F9'|'\u0966..\u096F'|'\u09E6..\u09EF'|'\u0A66..\u0A6F'|'\u0AE6..\u0AEF'|'\u0B66..\u0B6F'|'\u0BE7..\u0BEF'|'\u0C66..\u0C6F'|'\u0CE6..\u0CEF'|'\u0D66..\u0D6F'|'\u0E50..\u0E59'|'\u0ED0..\u0ED9'|'\u0F20..\u0F29'|'\u1040..\u1049'|'\u1369..\u1371'|'\u17E0..\u17E9'|'\u1810..\u1819'|'\uFF10..\uFF19');

fragment RULE_UNICODE_LETTER : ('A..Z'|'a..z'|'\u00AA'|'\u00B5'|'\u00BA'|'\u00C0..\u00D6'|'\u00D8..\u00F6'|'\u00F8..\u021F'|'\u0222..\u0233'|'\u0250..\u02AD'|'\u02B0..\u02B8'|'\u02BB..\u02C1'|'\u02D0..\u02D1'|'\u02E0..\u02E4'|'\u02EE'|'\u037A'|'\u0386'|'\u0388..\u038A'|'\u038C'|'\u038E..\u03A1'|'\u03A3..\u03CE'|'\u03D0..\u03D7'|'\u03DA..\u03F3'|'\u0400..\u0481'|'\u048C..\u04C4'|'\u04C7..\u04C8'|'\u04CB..\u04CC'|'\u04D0..\u04F5'|'\u04F8..\u04F9'|'\u0531..\u0556'|'\u0559'|'\u0561..\u0587'|'\u05D0..\u05EA'|'\u05F0..\u05F2'|'\u0621..\u063A'|'\u0640..\u064A'|'\u0671..\u06D3'|'\u06D5'|'\u06E5..\u06E6'|'\u06FA..\u06FC'|'\u0710'|'\u0712..\u072C'|'\u0780..\u07A5'|'\u0905..\u0939'|'\u093D'|'\u0950'|'\u0958..\u0961'|'\u0985..\u098C'|'\u098F..\u0990'|'\u0993..\u09A8'|'\u09AA..\u09B0'|'\u09B2'|'\u09B6..\u09B9'|'\u09DC..\u09DD'|'\u09DF..\u09E1'|'\u09F0..\u09F1'|'\u0A05..\u0A0A'|'\u0A0F..\u0A10'|'\u0A13..\u0A28'|'\u0A2A..\u0A30'|'\u0A32..\u0A33'|'\u0A35..\u0A36'|'\u0A38..\u0A39'|'\u0A59..\u0A5C'|'\u0A5E'|'\u0A72..\u0A74'|'\u0A85..\u0A8B'|'\u0A8D'|'\u0A8F..\u0A91'|'\u0A93..\u0AA8'|'\u0AAA..\u0AB0'|'\u0AB2..\u0AB3'|'\u0AB5..\u0AB9'|'\u0ABD'|'\u0AD0'|'\u0AE0'|'\u0B05..\u0B0C'|'\u0B0F..\u0B10'|'\u0B13..\u0B28'|'\u0B2A..\u0B30'|'\u0B32..\u0B33'|'\u0B36..\u0B39'|'\u0B3D'|'\u0B5C..\u0B5D'|'\u0B5F..\u0B61'|'\u0B85..\u0B8A'|'\u0B8E..\u0B90'|'\u0B92..\u0B95'|'\u0B99..\u0B9A'|'\u0B9C'|'\u0B9E..\u0B9F'|'\u0BA3..\u0BA4'|'\u0BA8..\u0BAA'|'\u0BAE..\u0BB5'|'\u0BB7..\u0BB9'|'\u0C05..\u0C0C'|'\u0C0E..\u0C10'|'\u0C12..\u0C28'|'\u0C2A..\u0C33'|'\u0C35..\u0C39'|'\u0C60..\u0C61'|'\u0C85..\u0C8C'|'\u0C8E..\u0C90'|'\u0C92..\u0CA8'|'\u0CAA..\u0CB3'|'\u0CB5..\u0CB9'|'\u0CDE'|'\u0CE0..\u0CE1'|'\u0D05..\u0D0C'|'\u0D0E..\u0D10'|'\u0D12..\u0D28'|'\u0D2A..\u0D39'|'\u0D60..\u0D61'|'\u0D85..\u0D96'|'\u0D9A..\u0DB1'|'\u0DB3..\u0DBB'|'\u0DBD'|'\u0DC0..\u0DC6'|'\u0E01..\u0E30'|'\u0E32..\u0E33'|'\u0E40..\u0E46'|'\u0E81..\u0E82'|'\u0E84'|'\u0E87..\u0E88'|'\u0E8A'|'\u0E8D'|'\u0E94..\u0E97'|'\u0E99..\u0E9F'|'\u0EA1..\u0EA3'|'\u0EA5'|'\u0EA7'|'\u0EAA..\u0EAB'|'\u0EAD..\u0EB0'|'\u0EB2..\u0EB3'|'\u0EBD..\u0EC4'|'\u0EC6'|'\u0EDC..\u0EDD'|'\u0F00'|'\u0F40..\u0F6A'|'\u0F88..\u0F8B'|'\u1000..\u1021'|'\u1023..\u1027'|'\u1029..\u102A'|'\u1050..\u1055'|'\u10A0..\u10C5'|'\u10D0..\u10F6'|'\u1100..\u1159'|'\u115F..\u11A2'|'\u11A8..\u11F9'|'\u1200..\u1206'|'\u1208..\u1246'|'\u1248'|'\u124A..\u124D'|'\u1250..\u1256'|'\u1258'|'\u125A..\u125D'|'\u1260..\u1286'|'\u1288'|'\u128A..\u128D'|'\u1290..\u12AE'|'\u12B0'|'\u12B2..\u12B5'|'\u12B8..\u12BE'|'\u12C0'|'\u12C2..\u12C5'|'\u12C8..\u12CE'|'\u12D0..\u12D6'|'\u12D8..\u12EE'|'\u12F0..\u130E'|'\u1310'|'\u1312..\u1315'|'\u1318..\u131E'|'\u1320..\u1346'|'\u1348..\u135A'|'\u13A0..\u13B0'|'\u13B1..\u13F4'|'\u1401..\u1676'|'\u1681..\u169A'|'\u16A0..\u16EA'|'\u1780..\u17B3'|'\u1820..\u1877'|'\u1880..\u18A8'|'\u1E00..\u1E9B'|'\u1EA0..\u1EE0'|'\u1EE1..\u1EF9'|'\u1F00..\u1F15'|'\u1F18..\u1F1D'|'\u1F20..\u1F39'|'\u1F3A..\u1F45'|'\u1F48..\u1F4D'|'\u1F50..\u1F57'|'\u1F59'|'\u1F5B'|'\u1F5D'|'\u1F5F..\u1F7D'|'\u1F80..\u1FB4'|'\u1FB6..\u1FBC'|'\u1FBE'|'\u1FC2..\u1FC4'|'\u1FC6..\u1FCC'|'\u1FD0..\u1FD3'|'\u1FD6..\u1FDB'|'\u1FE0..\u1FEC'|'\u1FF2..\u1FF4'|'\u1FF6..\u1FFC'|'\u207F'|'\u2102'|'\u2107'|'\u210A..\u2113'|'\u2115'|'\u2119..\u211D'|'\u2124'|'\u2126'|'\u2128'|'\u212A..\u212D'|'\u212F..\u2131'|'\u2133..\u2139'|'\u2160..\u2183'|'\u3005..\u3007'|'\u3021..\u3029'|'\u3031..\u3035'|'\u3038..\u303A'|'\u3041..\u3094'|'\u309D..\u309E'|'\u30A1..\u30FA'|'\u30FC..\u30FE'|'\u3105..\u312C'|'\u3131..\u318E'|'\u31A0..\u31B7'|'\u3400'|'\u4DB5'|'\u4E00'|'\u9FA5'|'\uA000..\uA48C'|'\uAC00'|'\uD7A3'|'\uF900..\uFA2D'|'\uFB00..\uFB06'|'\uFB13..\uFB17'|'\uFB1D'|'\uFB1F..\uFB28'|'\uFB2A..\uFB36'|'\uFB38..\uFB3C'|'\uFB3E'|'\uFB40..\uFB41'|'\uFB43..\uFB44'|'\uFB46..\uFBB1'|'\uFBD3..\uFD3D'|'\uFD50..\uFD8F'|'\uFD92..\uFDC7'|'\uFDF0..\uFDFB'|'\uFE70..\uFE72'|'\uFE74'|'\uFE76..\uFEFC'|'\uFF21..\uFF3A'|'\uFF41..\uFF5A'|'\uFF66..\uFFBE'|'\uFFC2..\uFFC7'|'\uFFCA..\uFFCF'|'\uFFD2..\uFFD7'|'\uFFDA..\uFFDC');

RULE_WS : '\t'+;

RULE_COMMENT : '/*' .* '*/';

RULE_TERMINATOR : '\r' '\n'+;

RULE_LINE_COMMENT : '//' ~(('\r'|'\n'))*;
