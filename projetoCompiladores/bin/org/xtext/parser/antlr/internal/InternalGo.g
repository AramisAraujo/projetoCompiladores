/*
 * generated by Xtext 2.13.0
 */
grammar InternalGo;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.GoGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private GoGrammarAccess grammarAccess;

    public InternalGoParser(TokenStream input, GoGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected GoGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getGreetingsSourceFileParserRuleCall_0());
			}
			lv_greetings_0_0=rulesourceFile
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"greetings",
					lv_greetings_0_0,
					"org.xtext.Go.sourceFile");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulesourceFile
entryRulesourceFile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSourceFileRule()); }
	iv_rulesourceFile=rulesourceFile
	{ $current=$iv_rulesourceFile.current; }
	EOF;

// Rule sourceFile
rulesourceFile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSourceFileAccess().getPackageClausePackageClauseParserRuleCall_0_0());
				}
				lv_packageClause_0_0=rulepackageClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSourceFileRule());
					}
					set(
						$current,
						"packageClause",
						lv_packageClause_0_0,
						"org.xtext.Go.packageClause");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSourceFileAccess().getImportDeclImportDeclParserRuleCall_1_0());
				}
				lv_importDecl_1_0=ruleimportDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSourceFileRule());
					}
					add(
						$current,
						"importDecl",
						lv_importDecl_1_0,
						"org.xtext.Go.importDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getSourceFileAccess().getTopLevelDeclTopLevelDeclParserRuleCall_2_0());
				}
				lv_topLevelDecl_2_0=ruletopLevelDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSourceFileRule());
					}
					add(
						$current,
						"topLevelDecl",
						lv_topLevelDecl_2_0,
						"org.xtext.Go.topLevelDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRulepackageClause
entryRulepackageClause returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPackageClauseRule()); }
	iv_rulepackageClause=rulepackageClause
	{ $current=$iv_rulepackageClause.current.getText(); }
	EOF;

// Rule packageClause
rulepackageClause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='package'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPackageClauseAccess().getPackageKeyword_0());
		}
		this_IDENTIFIER_1=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_1);
		}
		{
			newLeafNode(this_IDENTIFIER_1, grammarAccess.getPackageClauseAccess().getIDENTIFIERTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleimportDecl
entryRuleimportDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportDeclRule()); }
	iv_ruleimportDecl=ruleimportDecl
	{ $current=$iv_ruleimportDecl.current; }
	EOF;

// Rule importDecl
ruleimportDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportDeclAccess().getImportKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getImportDeclAccess().getImportSpecImportSpecParserRuleCall_1_0_0());
					}
					lv_importSpec_1_0=ruleimportSpec
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImportDeclRule());
						}
						add(
							$current,
							"importSpec",
							lv_importSpec_1_0,
							"org.xtext.Go.importSpec");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				otherlv_2='('
				{
					newLeafNode(otherlv_2, grammarAccess.getImportDeclAccess().getLeftParenthesisKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getImportDeclAccess().getImportSpecImportSpecParserRuleCall_1_1_1_0());
						}
						lv_importSpec_3_0=ruleimportSpec
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getImportDeclRule());
							}
							add(
								$current,
								"importSpec",
								lv_importSpec_3_0,
								"org.xtext.Go.importSpec");
							afterParserOrEnumRuleCall();
						}
					)
				)*
				otherlv_4=')'
				{
					newLeafNode(otherlv_4, grammarAccess.getImportDeclAccess().getRightParenthesisKeyword_1_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuleimportSpec
entryRuleimportSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportSpecRule()); }
	iv_ruleimportSpec=ruleimportSpec
	{ $current=$iv_ruleimportSpec.current; }
	EOF;

// Rule importSpec
ruleimportSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='.'
			{
				newLeafNode(otherlv_0, grammarAccess.getImportSpecAccess().getFullStopKeyword_0_0());
			}
			    |
			this_IDENTIFIER_1=RULE_IDENTIFIER
			{
				newLeafNode(this_IDENTIFIER_1, grammarAccess.getImportSpecAccess().getIDENTIFIERTerminalRuleCall_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getImportSpecAccess().getImportPathImportPathParserRuleCall_1_0());
				}
				lv_importPath_2_0=ruleimportPath
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImportSpecRule());
					}
					set(
						$current,
						"importPath",
						lv_importPath_2_0,
						"org.xtext.Go.importPath");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleimportPath
entryRuleimportPath returns [String current=null]:
	{ newCompositeNode(grammarAccess.getImportPathRule()); }
	iv_ruleimportPath=ruleimportPath
	{ $current=$iv_ruleimportPath.current.getText(); }
	EOF;

// Rule importPath
ruleimportPath returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_STRING_LIT_0=RULE_STRING_LIT
	{
		$current.merge(this_STRING_LIT_0);
	}
	{
		newLeafNode(this_STRING_LIT_0, grammarAccess.getImportPathAccess().getSTRING_LITTerminalRuleCall());
	}
;

// Entry rule entryRuletopLevelDecl
entryRuletopLevelDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTopLevelDeclRule()); }
	iv_ruletopLevelDecl=ruletopLevelDecl
	{ $current=$iv_ruletopLevelDecl.current; }
	EOF;

// Rule topLevelDecl
ruletopLevelDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTopLevelDeclAccess().getDeclarationDeclarationParserRuleCall_0_0());
				}
				lv_declaration_0_0=ruledeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTopLevelDeclRule());
					}
					set(
						$current,
						"declaration",
						lv_declaration_0_0,
						"org.xtext.Go.declaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTopLevelDeclAccess().getFunctionDeclFunctionDeclParserRuleCall_1_0());
				}
				lv_functionDecl_1_0=rulefunctionDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTopLevelDeclRule());
					}
					set(
						$current,
						"functionDecl",
						lv_functionDecl_1_0,
						"org.xtext.Go.functionDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTopLevelDeclAccess().getMethodDeclMethodDeclParserRuleCall_2_0());
				}
				lv_methodDecl_2_0=rulemethodDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTopLevelDeclRule());
					}
					set(
						$current,
						"methodDecl",
						lv_methodDecl_2_0,
						"org.xtext.Go.methodDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuledeclaration
entryRuledeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	iv_ruledeclaration=ruledeclaration
	{ $current=$iv_ruledeclaration.current; }
	EOF;

// Rule declaration
ruledeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclarationAccess().getConstDeclConstDeclParserRuleCall_0_0());
				}
				lv_constDecl_0_0=ruleconstDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclarationRule());
					}
					set(
						$current,
						"constDecl",
						lv_constDecl_0_0,
						"org.xtext.Go.constDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclarationAccess().getTypeDeclTypeDeclParserRuleCall_1_0());
				}
				lv_typeDecl_1_0=ruletypeDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclarationRule());
					}
					set(
						$current,
						"typeDecl",
						lv_typeDecl_1_0,
						"org.xtext.Go.typeDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclarationAccess().getVarDeclVarDeclParserRuleCall_2_0());
				}
				lv_varDecl_2_0=rulevarDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclarationRule());
					}
					set(
						$current,
						"varDecl",
						lv_varDecl_2_0,
						"org.xtext.Go.varDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleconstDecl
entryRuleconstDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstDeclRule()); }
	iv_ruleconstDecl=ruleconstDecl
	{ $current=$iv_ruleconstDecl.current; }
	EOF;

// Rule constDecl
ruleconstDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='const'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstDeclAccess().getConstKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConstDeclAccess().getConstSpecConstSpecParserRuleCall_1_0_0());
					}
					lv_constSpec_1_0=ruleconstSpec
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstDeclRule());
						}
						add(
							$current,
							"constSpec",
							lv_constSpec_1_0,
							"org.xtext.Go.constSpec");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				otherlv_2='('
				{
					newLeafNode(otherlv_2, grammarAccess.getConstDeclAccess().getLeftParenthesisKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getConstDeclAccess().getConstSpecConstSpecParserRuleCall_1_1_1_0());
						}
						lv_constSpec_3_0=ruleconstSpec
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getConstDeclRule());
							}
							add(
								$current,
								"constSpec",
								lv_constSpec_3_0,
								"org.xtext.Go.constSpec");
							afterParserOrEnumRuleCall();
						}
					)
				)*
				otherlv_4=')'
				{
					newLeafNode(otherlv_4, grammarAccess.getConstDeclAccess().getRightParenthesisKeyword_1_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuleconstSpec
entryRuleconstSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstSpecRule()); }
	iv_ruleconstSpec=ruleconstSpec
	{ $current=$iv_ruleconstSpec.current; }
	EOF;

// Rule constSpec
ruleconstSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConstSpecAccess().getIdentifierListIdentifierListParserRuleCall_0_0());
				}
				lv_identifierList_0_0=ruleidentifierList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstSpecRule());
					}
					set(
						$current,
						"identifierList",
						lv_identifierList_0_0,
						"org.xtext.Go.identifierList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConstSpecAccess().getTypeTypeParserRuleCall_1_0_0());
					}
					lv_type_1_0=ruletype
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstSpecRule());
						}
						set(
							$current,
							"type",
							lv_type_1_0,
							"org.xtext.Go.type");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getConstSpecAccess().getEqualsSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConstSpecAccess().getExpressionListExpressionListParserRuleCall_1_2_0());
					}
					lv_expressionList_3_0=ruleexpressionList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstSpecRule());
						}
						set(
							$current,
							"expressionList",
							lv_expressionList_3_0,
							"org.xtext.Go.expressionList");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleidentifierList
entryRuleidentifierList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIdentifierListRule()); }
	iv_ruleidentifierList=ruleidentifierList
	{ $current=$iv_ruleidentifierList.current.getText(); }
	EOF;

// Rule identifierList
ruleidentifierList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENTIFIER_0=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_0);
		}
		{
			newLeafNode(this_IDENTIFIER_0, grammarAccess.getIdentifierListAccess().getIDENTIFIERTerminalRuleCall_0());
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIdentifierListAccess().getCommaKeyword_1_0());
			}
			this_IDENTIFIER_2=RULE_IDENTIFIER
			{
				$current.merge(this_IDENTIFIER_2);
			}
			{
				newLeafNode(this_IDENTIFIER_2, grammarAccess.getIdentifierListAccess().getIDENTIFIERTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleexpressionList
entryRuleexpressionList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionListRule()); }
	iv_ruleexpressionList=ruleexpressionList
	{ $current=$iv_ruleexpressionList.current; }
	EOF;

// Rule expressionList
ruleexpressionList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionListAccess().getExpressionExpressionParserRuleCall_0_0());
				}
				lv_expression_0_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionListRule());
					}
					add(
						$current,
						"expression",
						lv_expression_0_0,
						"org.xtext.Go.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getExpressionListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionListAccess().getExpressionExpressionParserRuleCall_1_1_0());
					}
					lv_expression_2_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionListRule());
						}
						add(
							$current,
							"expression",
							lv_expression_2_0,
							"org.xtext.Go.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuletypeDecl
entryRuletypeDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeDeclRule()); }
	iv_ruletypeDecl=ruletypeDecl
	{ $current=$iv_ruletypeDecl.current; }
	EOF;

// Rule typeDecl
ruletypeDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='type'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeDeclAccess().getTypeKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeDeclAccess().getTypeSpecTypeSpecParserRuleCall_1_0_0());
					}
					lv_typeSpec_1_0=ruletypeSpec
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeDeclRule());
						}
						add(
							$current,
							"typeSpec",
							lv_typeSpec_1_0,
							"org.xtext.Go.typeSpec");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				otherlv_2='('
				{
					newLeafNode(otherlv_2, grammarAccess.getTypeDeclAccess().getLeftParenthesisKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTypeDeclAccess().getTypeSpecTypeSpecParserRuleCall_1_1_1_0());
						}
						lv_typeSpec_3_0=ruletypeSpec
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTypeDeclRule());
							}
							add(
								$current,
								"typeSpec",
								lv_typeSpec_3_0,
								"org.xtext.Go.typeSpec");
							afterParserOrEnumRuleCall();
						}
					)
				)*
				otherlv_4=')'
				{
					newLeafNode(otherlv_4, grammarAccess.getTypeDeclAccess().getRightParenthesisKeyword_1_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuletypeSpec
entryRuletypeSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeSpecRule()); }
	iv_ruletypeSpec=ruletypeSpec
	{ $current=$iv_ruletypeSpec.current; }
	EOF;

// Rule typeSpec
ruletypeSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENTIFIER_0=RULE_IDENTIFIER
		{
			newLeafNode(this_IDENTIFIER_0, grammarAccess.getTypeSpecAccess().getIDENTIFIERTerminalRuleCall_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeSpecAccess().getTypeTypeParserRuleCall_1_0());
				}
				lv_type_1_0=ruletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeSpecRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"org.xtext.Go.type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulefunctionDecl
entryRulefunctionDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionDeclRule()); }
	iv_rulefunctionDecl=rulefunctionDecl
	{ $current=$iv_rulefunctionDecl.current; }
	EOF;

// Rule functionDecl
rulefunctionDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='func'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionDeclAccess().getFuncKeyword_0());
		}
		this_IDENTIFIER_1=RULE_IDENTIFIER
		{
			newLeafNode(this_IDENTIFIER_1, grammarAccess.getFunctionDeclAccess().getIDENTIFIERTerminalRuleCall_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionDeclAccess().getFunctionFunctionParserRuleCall_2_0_0());
					}
					lv_function_2_0=rulefunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionDeclRule());
						}
						set(
							$current,
							"function",
							lv_function_2_0,
							"org.xtext.Go.function");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionDeclAccess().getSignatureSignatureParserRuleCall_2_1_0());
					}
					lv_signature_3_0=rulesignature
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionDeclRule());
						}
						set(
							$current,
							"signature",
							lv_signature_3_0,
							"org.xtext.Go.signature");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulefunction
entryRulefunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_rulefunction=rulefunction
	{ $current=$iv_rulefunction.current; }
	EOF;

// Rule function
rulefunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getSignatureSignatureParserRuleCall_0_0());
				}
				lv_signature_0_0=rulesignature
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					set(
						$current,
						"signature",
						lv_signature_0_0,
						"org.xtext.Go.signature");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getBlockBlockParserRuleCall_1_0());
				}
				lv_block_1_0=ruleblock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					set(
						$current,
						"block",
						lv_block_1_0,
						"org.xtext.Go.block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulemethodDecl
entryRulemethodDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodDeclRule()); }
	iv_rulemethodDecl=rulemethodDecl
	{ $current=$iv_rulemethodDecl.current; }
	EOF;

// Rule methodDecl
rulemethodDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='func'
		{
			newLeafNode(otherlv_0, grammarAccess.getMethodDeclAccess().getFuncKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodDeclAccess().getReceiverReceiverParserRuleCall_1_0());
				}
				lv_receiver_1_0=rulereceiver
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodDeclRule());
					}
					set(
						$current,
						"receiver",
						lv_receiver_1_0,
						"org.xtext.Go.receiver");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_IDENTIFIER_2=RULE_IDENTIFIER
		{
			newLeafNode(this_IDENTIFIER_2, grammarAccess.getMethodDeclAccess().getIDENTIFIERTerminalRuleCall_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodDeclAccess().getFunctionFunctionParserRuleCall_3_0_0());
					}
					lv_function_3_0=rulefunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodDeclRule());
						}
						set(
							$current,
							"function",
							lv_function_3_0,
							"org.xtext.Go.function");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodDeclAccess().getSignatureSignatureParserRuleCall_3_1_0());
					}
					lv_signature_4_0=rulesignature
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodDeclRule());
						}
						set(
							$current,
							"signature",
							lv_signature_4_0,
							"org.xtext.Go.signature");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulereceiver
entryRulereceiver returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReceiverRule()); }
	iv_rulereceiver=rulereceiver
	{ $current=$iv_rulereceiver.current; }
	EOF;

// Rule receiver
rulereceiver returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getReceiverAccess().getParametersParametersParserRuleCall_0());
			}
			lv_parameters_0_0=ruleparameters
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getReceiverRule());
				}
				set(
					$current,
					"parameters",
					lv_parameters_0_0,
					"org.xtext.Go.parameters");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulevarDecl
entryRulevarDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarDeclRule()); }
	iv_rulevarDecl=rulevarDecl
	{ $current=$iv_rulevarDecl.current; }
	EOF;

// Rule varDecl
rulevarDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getVarDeclAccess().getVarKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getVarDeclAccess().getVarSpecVarSpecParserRuleCall_1_0_0());
					}
					lv_varSpec_1_0=rulevarSpec
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVarDeclRule());
						}
						add(
							$current,
							"varSpec",
							lv_varSpec_1_0,
							"org.xtext.Go.varSpec");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				otherlv_2='('
				{
					newLeafNode(otherlv_2, grammarAccess.getVarDeclAccess().getLeftParenthesisKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getVarDeclAccess().getVarSpecVarSpecParserRuleCall_1_1_1_0());
						}
						lv_varSpec_3_0=rulevarSpec
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVarDeclRule());
							}
							add(
								$current,
								"varSpec",
								lv_varSpec_3_0,
								"org.xtext.Go.varSpec");
							afterParserOrEnumRuleCall();
						}
					)
				)*
				otherlv_4=')'
				{
					newLeafNode(otherlv_4, grammarAccess.getVarDeclAccess().getRightParenthesisKeyword_1_1_2());
				}
			)
		)
	)
;

// Entry rule entryRulevarSpec
entryRulevarSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarSpecRule()); }
	iv_rulevarSpec=rulevarSpec
	{ $current=$iv_rulevarSpec.current; }
	EOF;

// Rule varSpec
rulevarSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVarSpecAccess().getIdentifierListIdentifierListParserRuleCall_0_0());
				}
				lv_identifierList_0_0=ruleidentifierList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarSpecRule());
					}
					set(
						$current,
						"identifierList",
						lv_identifierList_0_0,
						"org.xtext.Go.identifierList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getVarSpecAccess().getTypeTypeParserRuleCall_1_0_0_0());
						}
						lv_type_1_0=ruletype
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVarSpecRule());
							}
							set(
								$current,
								"type",
								lv_type_1_0,
								"org.xtext.Go.type");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_2='='
					{
						newLeafNode(otherlv_2, grammarAccess.getVarSpecAccess().getEqualsSignKeyword_1_0_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getVarSpecAccess().getExpressionListExpressionListParserRuleCall_1_0_1_1_0());
							}
							lv_expressionList_3_0=ruleexpressionList
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getVarSpecRule());
								}
								set(
									$current,
									"expressionList",
									lv_expressionList_3_0,
									"org.xtext.Go.expressionList");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)?
			)
			    |
			(
				otherlv_4='='
				{
					newLeafNode(otherlv_4, grammarAccess.getVarSpecAccess().getEqualsSignKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getVarSpecAccess().getExpressionListExpressionListParserRuleCall_1_1_1_0());
						}
						lv_expressionList_5_0=ruleexpressionList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVarSpecRule());
							}
							set(
								$current,
								"expressionList",
								lv_expressionList_5_0,
								"org.xtext.Go.expressionList");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRuleblock
entryRuleblock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleblock=ruleblock
	{ $current=$iv_ruleblock.current; }
	EOF;

// Rule block
ruleblock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockAccess().getStatementListStatementListParserRuleCall_1_0());
				}
				lv_statementList_1_0=rulestatementList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockRule());
					}
					set(
						$current,
						"statementList",
						lv_statementList_1_0,
						"org.xtext.Go.statementList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='}'
		{
			newLeafNode(otherlv_2, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRulestatementList
entryRulestatementList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementListRule()); }
	iv_rulestatementList=rulestatementList
	{ $current=$iv_rulestatementList.current; }
	EOF;

// Rule statementList
rulestatementList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getStatementListAccess().getStatementStatementParserRuleCall_0());
			}
			lv_statement_0_0=rulestatement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getStatementListRule());
				}
				add(
					$current,
					"statement",
					lv_statement_0_0,
					"org.xtext.Go.statement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRulestatement
entryRulestatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_rulestatement=rulestatement
	{ $current=$iv_rulestatement.current; }
	EOF;

// Rule statement
rulestatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getDeclarationDeclarationParserRuleCall_0_0());
				}
				lv_declaration_0_0=ruledeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"declaration",
						lv_declaration_0_0,
						"org.xtext.Go.declaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getLabeledStmtLabeledStmtParserRuleCall_1_0());
				}
				lv_labeledStmt_1_0=rulelabeledStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"labeledStmt",
						lv_labeledStmt_1_0,
						"org.xtext.Go.labeledStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getSimpleStmtSimpleStmtParserRuleCall_2_0());
				}
				lv_simpleStmt_2_0=rulesimpleStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"simpleStmt",
						lv_simpleStmt_2_0,
						"org.xtext.Go.simpleStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getGoStmtGoStmtParserRuleCall_3_0());
				}
				lv_goStmt_3_0=rulegoStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"goStmt",
						lv_goStmt_3_0,
						"org.xtext.Go.goStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getReturnStmtReturnStmtParserRuleCall_4_0());
				}
				lv_returnStmt_4_0=rulereturnStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"returnStmt",
						lv_returnStmt_4_0,
						"org.xtext.Go.returnStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getBreakStmtBreakStmtParserRuleCall_5_0());
				}
				lv_breakStmt_5_0=rulebreakStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"breakStmt",
						lv_breakStmt_5_0,
						"org.xtext.Go.breakStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getContinueStmtContinueStmtParserRuleCall_6_0());
				}
				lv_continueStmt_6_0=rulecontinueStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"continueStmt",
						lv_continueStmt_6_0,
						"org.xtext.Go.continueStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getGotoStmtGotoStmtParserRuleCall_7_0());
				}
				lv_gotoStmt_7_0=rulegotoStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"gotoStmt",
						lv_gotoStmt_7_0,
						"org.xtext.Go.gotoStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getFallthroughStmtFallthroughStmtParserRuleCall_8_0());
				}
				lv_fallthroughStmt_8_0=rulefallthroughStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"fallthroughStmt",
						lv_fallthroughStmt_8_0,
						"org.xtext.Go.fallthroughStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getBlockBlockParserRuleCall_9_0());
				}
				lv_block_9_0=ruleblock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"block",
						lv_block_9_0,
						"org.xtext.Go.block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getIfStmtIfStmtParserRuleCall_10_0());
				}
				lv_ifStmt_10_0=ruleifStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"ifStmt",
						lv_ifStmt_10_0,
						"org.xtext.Go.ifStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getSwitchStmtSwitchStmtParserRuleCall_11_0());
				}
				lv_switchStmt_11_0=ruleswitchStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"switchStmt",
						lv_switchStmt_11_0,
						"org.xtext.Go.switchStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getSelectStmtSelectStmtParserRuleCall_12_0());
				}
				lv_selectStmt_12_0=ruleselectStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"selectStmt",
						lv_selectStmt_12_0,
						"org.xtext.Go.selectStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getForStmtForStmtParserRuleCall_13_0());
				}
				lv_forStmt_13_0=ruleforStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"forStmt",
						lv_forStmt_13_0,
						"org.xtext.Go.forStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getDeferStmtDeferStmtParserRuleCall_14_0());
				}
				lv_deferStmt_14_0=ruledeferStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"deferStmt",
						lv_deferStmt_14_0,
						"org.xtext.Go.deferStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulesimpleStmt
entryRulesimpleStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleStmtRule()); }
	iv_rulesimpleStmt=rulesimpleStmt
	{ $current=$iv_rulesimpleStmt.current; }
	EOF;

// Rule simpleStmt
rulesimpleStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleStmtAccess().getSendStmtSendStmtParserRuleCall_0_0());
				}
				lv_sendStmt_0_0=rulesendStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleStmtRule());
					}
					set(
						$current,
						"sendStmt",
						lv_sendStmt_0_0,
						"org.xtext.Go.sendStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleStmtAccess().getExpressionStmtExpressionStmtParserRuleCall_1_0());
				}
				lv_expressionStmt_1_0=ruleexpressionStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleStmtRule());
					}
					set(
						$current,
						"expressionStmt",
						lv_expressionStmt_1_0,
						"org.xtext.Go.expressionStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleStmtAccess().getIncDecStmtIncDecStmtParserRuleCall_2_0());
				}
				lv_incDecStmt_2_0=ruleincDecStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleStmtRule());
					}
					set(
						$current,
						"incDecStmt",
						lv_incDecStmt_2_0,
						"org.xtext.Go.incDecStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleStmtAccess().getAssignmentAssignmentParserRuleCall_3_0());
				}
				lv_assignment_3_0=ruleassignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleStmtRule());
					}
					set(
						$current,
						"assignment",
						lv_assignment_3_0,
						"org.xtext.Go.assignment");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleStmtAccess().getShortVarDeclShortVarDeclParserRuleCall_4_0());
				}
				lv_shortVarDecl_4_0=ruleshortVarDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleStmtRule());
					}
					set(
						$current,
						"shortVarDecl",
						lv_shortVarDecl_4_0,
						"org.xtext.Go.shortVarDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleStmtAccess().getEmptyStmtEmptyStmtParserRuleCall_5_0());
				}
				lv_emptyStmt_5_0=ruleemptyStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleStmtRule());
					}
					set(
						$current,
						"emptyStmt",
						lv_emptyStmt_5_0,
						"org.xtext.Go.emptyStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleexpressionStmt
entryRuleexpressionStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionStmtRule()); }
	iv_ruleexpressionStmt=ruleexpressionStmt
	{ $current=$iv_ruleexpressionStmt.current; }
	EOF;

// Rule expressionStmt
ruleexpressionStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getExpressionStmtAccess().getExpressionExpressionParserRuleCall_0());
			}
			lv_expression_0_0=ruleexpression
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getExpressionStmtRule());
				}
				set(
					$current,
					"expression",
					lv_expression_0_0,
					"org.xtext.Go.expression");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulesendStmt
entryRulesendStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSendStmtRule()); }
	iv_rulesendStmt=rulesendStmt
	{ $current=$iv_rulesendStmt.current; }
	EOF;

// Rule sendStmt
rulesendStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSendStmtAccess().getExpressionLeftExpressionParserRuleCall_0_0());
				}
				lv_expressionLeft_0_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSendStmtRule());
					}
					set(
						$current,
						"expressionLeft",
						lv_expressionLeft_0_0,
						"org.xtext.Go.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='<-'
		{
			newLeafNode(otherlv_1, grammarAccess.getSendStmtAccess().getLessThanSignHyphenMinusKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSendStmtAccess().getExpressionRightExpressionParserRuleCall_2_0());
				}
				lv_expressionRight_2_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSendStmtRule());
					}
					set(
						$current,
						"expressionRight",
						lv_expressionRight_2_0,
						"org.xtext.Go.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleincDecStmt
entryRuleincDecStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIncDecStmtRule()); }
	iv_ruleincDecStmt=ruleincDecStmt
	{ $current=$iv_ruleincDecStmt.current; }
	EOF;

// Rule incDecStmt
ruleincDecStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getIncDecStmtAccess().getExpressionExpressionParserRuleCall_0_0());
				}
				lv_expression_0_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIncDecStmtRule());
					}
					set(
						$current,
						"expression",
						lv_expression_0_0,
						"org.xtext.Go.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='++'
			{
				newLeafNode(otherlv_1, grammarAccess.getIncDecStmtAccess().getPlusSignPlusSignKeyword_1_0());
			}
			    |
			otherlv_2='--'
			{
				newLeafNode(otherlv_2, grammarAccess.getIncDecStmtAccess().getHyphenMinusHyphenMinusKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleassignment
entryRuleassignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	iv_ruleassignment=ruleassignment
	{ $current=$iv_ruleassignment.current; }
	EOF;

// Rule assignment
ruleassignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getExpressionListExpressionListParserRuleCall_0_0());
				}
				lv_expressionList_0_0=ruleexpressionList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"expressionList",
						lv_expressionList_0_0,
						"org.xtext.Go.expressionList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getAssign_opAssign_opParserRuleCall_1_0());
				}
				lv_assign_op_1_0=ruleassign_op
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"assign_op",
						lv_assign_op_1_0,
						"org.xtext.Go.assign_op");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getExpressionListExpressionListParserRuleCall_2_0());
				}
				lv_expressionList_2_0=ruleexpressionList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"expressionList",
						lv_expressionList_2_0,
						"org.xtext.Go.expressionList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleassign_op
entryRuleassign_op returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAssign_opRule()); }
	iv_ruleassign_op=ruleassign_op
	{ $current=$iv_ruleassign_op.current.getText(); }
	EOF;

// Rule assign_op
ruleassign_op returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='+'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAssign_opAccess().getPlusSignKeyword_0_0());
			}
			    |
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAssign_opAccess().getHyphenMinusKeyword_0_1());
			}
			    |
			kw='|'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAssign_opAccess().getVerticalLineKeyword_0_2());
			}
			    |
			kw='^'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAssign_opAccess().getCircumflexAccentKeyword_0_3());
			}
			    |
			kw='*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAssign_opAccess().getAsteriskKeyword_0_4());
			}
			    |
			kw='/'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAssign_opAccess().getSolidusKeyword_0_5());
			}
			    |
			kw='%'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAssign_opAccess().getPercentSignKeyword_0_6());
			}
			    |
			kw='<<'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAssign_opAccess().getLessThanSignLessThanSignKeyword_0_7());
			}
			    |
			kw='>>'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAssign_opAccess().getGreaterThanSignGreaterThanSignKeyword_0_8());
			}
			    |
			kw='&'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAssign_opAccess().getAmpersandKeyword_0_9());
			}
			    |
			kw='&^'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAssign_opAccess().getAmpersandCircumflexAccentKeyword_0_10());
			}
		)?
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAssign_opAccess().getEqualsSignKeyword_1());
		}
	)
;

// Entry rule entryRuleshortVarDecl
entryRuleshortVarDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShortVarDeclRule()); }
	iv_ruleshortVarDecl=ruleshortVarDecl
	{ $current=$iv_ruleshortVarDecl.current; }
	EOF;

// Rule shortVarDecl
ruleshortVarDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getShortVarDeclAccess().getIdentifierListIdentifierListParserRuleCall_0_0());
				}
				lv_identifierList_0_0=ruleidentifierList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getShortVarDeclRule());
					}
					set(
						$current,
						"identifierList",
						lv_identifierList_0_0,
						"org.xtext.Go.identifierList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':='
		{
			newLeafNode(otherlv_1, grammarAccess.getShortVarDeclAccess().getColonEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getShortVarDeclAccess().getExpressionListExpressionListParserRuleCall_2_0());
				}
				lv_expressionList_2_0=ruleexpressionList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getShortVarDeclRule());
					}
					set(
						$current,
						"expressionList",
						lv_expressionList_2_0,
						"org.xtext.Go.expressionList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleemptyStmt
entryRuleemptyStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEmptyStmtRule()); }
	iv_ruleemptyStmt=ruleemptyStmt
	{ $current=$iv_ruleemptyStmt.current.getText(); }
	EOF;

// Rule emptyStmt
ruleemptyStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_WS_0=RULE_WS
	{
		$current.merge(this_WS_0);
	}
	{
		newLeafNode(this_WS_0, grammarAccess.getEmptyStmtAccess().getWSTerminalRuleCall());
	}
;

// Entry rule entryRulelabeledStmt
entryRulelabeledStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLabeledStmtRule()); }
	iv_rulelabeledStmt=rulelabeledStmt
	{ $current=$iv_rulelabeledStmt.current; }
	EOF;

// Rule labeledStmt
rulelabeledStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENTIFIER_0=RULE_IDENTIFIER
		{
			newLeafNode(this_IDENTIFIER_0, grammarAccess.getLabeledStmtAccess().getIDENTIFIERTerminalRuleCall_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getLabeledStmtAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLabeledStmtAccess().getStatementStatementParserRuleCall_2_0());
				}
				lv_statement_2_0=rulestatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLabeledStmtRule());
					}
					set(
						$current,
						"statement",
						lv_statement_2_0,
						"org.xtext.Go.statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulereturnStmt
entryRulereturnStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReturnStmtRule()); }
	iv_rulereturnStmt=rulereturnStmt
	{ $current=$iv_rulereturnStmt.current; }
	EOF;

// Rule returnStmt
rulereturnStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='return'
		{
			newLeafNode(otherlv_0, grammarAccess.getReturnStmtAccess().getReturnKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReturnStmtAccess().getExpressionListExpressionListParserRuleCall_1_0());
				}
				lv_expressionList_1_0=ruleexpressionList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReturnStmtRule());
					}
					set(
						$current,
						"expressionList",
						lv_expressionList_1_0,
						"org.xtext.Go.expressionList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulebreakStmt
entryRulebreakStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBreakStmtRule()); }
	iv_rulebreakStmt=rulebreakStmt
	{ $current=$iv_rulebreakStmt.current.getText(); }
	EOF;

// Rule breakStmt
rulebreakStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='break'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBreakStmtAccess().getBreakKeyword_0());
		}
		(
			this_IDENTIFIER_1=RULE_IDENTIFIER
			{
				$current.merge(this_IDENTIFIER_1);
			}
			{
				newLeafNode(this_IDENTIFIER_1, grammarAccess.getBreakStmtAccess().getIDENTIFIERTerminalRuleCall_1());
			}
		)?
	)
;

// Entry rule entryRulecontinueStmt
entryRulecontinueStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getContinueStmtRule()); }
	iv_rulecontinueStmt=rulecontinueStmt
	{ $current=$iv_rulecontinueStmt.current.getText(); }
	EOF;

// Rule continueStmt
rulecontinueStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='continue'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getContinueStmtAccess().getContinueKeyword_0());
		}
		(
			this_IDENTIFIER_1=RULE_IDENTIFIER
			{
				$current.merge(this_IDENTIFIER_1);
			}
			{
				newLeafNode(this_IDENTIFIER_1, grammarAccess.getContinueStmtAccess().getIDENTIFIERTerminalRuleCall_1());
			}
		)?
	)
;

// Entry rule entryRulegotoStmt
entryRulegotoStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getGotoStmtRule()); }
	iv_rulegotoStmt=rulegotoStmt
	{ $current=$iv_rulegotoStmt.current.getText(); }
	EOF;

// Rule gotoStmt
rulegotoStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='goto'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getGotoStmtAccess().getGotoKeyword_0());
		}
		this_IDENTIFIER_1=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_1);
		}
		{
			newLeafNode(this_IDENTIFIER_1, grammarAccess.getGotoStmtAccess().getIDENTIFIERTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRulefallthroughStmt
entryRulefallthroughStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFallthroughStmtRule()); }
	iv_rulefallthroughStmt=rulefallthroughStmt
	{ $current=$iv_rulefallthroughStmt.current.getText(); }
	EOF;

// Rule fallthroughStmt
rulefallthroughStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='fallthrough'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getFallthroughStmtAccess().getFallthroughKeyword());
	}
;

// Entry rule entryRuledeferStmt
entryRuledeferStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeferStmtRule()); }
	iv_ruledeferStmt=ruledeferStmt
	{ $current=$iv_ruledeferStmt.current; }
	EOF;

// Rule deferStmt
ruledeferStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='defer'
		{
			newLeafNode(otherlv_0, grammarAccess.getDeferStmtAccess().getDeferKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeferStmtAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeferStmtRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.xtext.Go.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleifStmt
entryRuleifStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfStmtRule()); }
	iv_ruleifStmt=ruleifStmt
	{ $current=$iv_ruleifStmt.current; }
	EOF;

// Rule ifStmt
ruleifStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfStmtAccess().getIfKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStmtAccess().getSimpleStmtSimpleStmtParserRuleCall_1_0());
				}
				lv_simpleStmt_1_0=rulesimpleStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStmtRule());
					}
					set(
						$current,
						"simpleStmt",
						lv_simpleStmt_1_0,
						"org.xtext.Go.simpleStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStmtAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStmtRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"org.xtext.Go.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStmtAccess().getBlockBlockParserRuleCall_3_0());
				}
				lv_block_3_0=ruleblock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStmtRule());
					}
					set(
						$current,
						"block",
						lv_block_3_0,
						"org.xtext.Go.block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='else'
			{
				newLeafNode(otherlv_4, grammarAccess.getIfStmtAccess().getElseKeyword_4_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getIfStmtAccess().getIfStmtIfStmtParserRuleCall_4_1_0_0());
						}
						lv_ifStmt_5_0=ruleifStmt
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getIfStmtRule());
							}
							set(
								$current,
								"ifStmt",
								lv_ifStmt_5_0,
								"org.xtext.Go.ifStmt");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getIfStmtAccess().getBlockBlockParserRuleCall_4_1_1_0());
						}
						lv_block_6_0=ruleblock
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getIfStmtRule());
							}
							set(
								$current,
								"block",
								lv_block_6_0,
								"org.xtext.Go.block");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
	)
;

// Entry rule entryRuleswitchStmt
entryRuleswitchStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSwitchStmtRule()); }
	iv_ruleswitchStmt=ruleswitchStmt
	{ $current=$iv_ruleswitchStmt.current; }
	EOF;

// Rule switchStmt
ruleswitchStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSwitchStmtAccess().getExprSwitchStmtExprSwitchStmtParserRuleCall_0_0());
				}
				lv_exprSwitchStmt_0_0=ruleexprSwitchStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSwitchStmtRule());
					}
					set(
						$current,
						"exprSwitchStmt",
						lv_exprSwitchStmt_0_0,
						"org.xtext.Go.exprSwitchStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSwitchStmtAccess().getTypeSwitchStmtTypeSwitchStmtParserRuleCall_1_0());
				}
				lv_typeSwitchStmt_1_0=ruletypeSwitchStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSwitchStmtRule());
					}
					set(
						$current,
						"typeSwitchStmt",
						lv_typeSwitchStmt_1_0,
						"org.xtext.Go.typeSwitchStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleexprSwitchStmt
entryRuleexprSwitchStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprSwitchStmtRule()); }
	iv_ruleexprSwitchStmt=ruleexprSwitchStmt
	{ $current=$iv_ruleexprSwitchStmt.current; }
	EOF;

// Rule exprSwitchStmt
ruleexprSwitchStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='switch'
		{
			newLeafNode(otherlv_0, grammarAccess.getExprSwitchStmtAccess().getSwitchKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExprSwitchStmtAccess().getSimpleStmtSimpleStmtParserRuleCall_1_0());
				}
				lv_simpleStmt_1_0=rulesimpleStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprSwitchStmtRule());
					}
					set(
						$current,
						"simpleStmt",
						lv_simpleStmt_1_0,
						"org.xtext.Go.simpleStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getExprSwitchStmtAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprSwitchStmtRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"org.xtext.Go.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getExprSwitchStmtAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExprSwitchStmtAccess().getExprCaseClauseExprCaseClauseParserRuleCall_4_0());
				}
				lv_exprCaseClause_4_0=ruleexprCaseClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprSwitchStmtRule());
					}
					set(
						$current,
						"exprCaseClause",
						lv_exprCaseClause_4_0,
						"org.xtext.Go.exprCaseClause");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getExprSwitchStmtAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleexprCaseClause
entryRuleexprCaseClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprCaseClauseRule()); }
	iv_ruleexprCaseClause=ruleexprCaseClause
	{ $current=$iv_ruleexprCaseClause.current; }
	EOF;

// Rule exprCaseClause
ruleexprCaseClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExprCaseClauseAccess().getExprSwitchCaseExprSwitchCaseParserRuleCall_0_0());
				}
				lv_exprSwitchCase_0_0=ruleexprSwitchCase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprCaseClauseRule());
					}
					set(
						$current,
						"exprSwitchCase",
						lv_exprSwitchCase_0_0,
						"org.xtext.Go.exprSwitchCase");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getExprCaseClauseAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExprCaseClauseAccess().getStatementListStatementListParserRuleCall_2_0());
				}
				lv_statementList_2_0=rulestatementList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprCaseClauseRule());
					}
					set(
						$current,
						"statementList",
						lv_statementList_2_0,
						"org.xtext.Go.statementList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleexprSwitchCase
entryRuleexprSwitchCase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprSwitchCaseRule()); }
	iv_ruleexprSwitchCase=ruleexprSwitchCase
	{ $current=$iv_ruleexprSwitchCase.current; }
	EOF;

// Rule exprSwitchCase
ruleexprSwitchCase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='case'
			{
				newLeafNode(otherlv_0, grammarAccess.getExprSwitchCaseAccess().getCaseKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExprSwitchCaseAccess().getExpressionListExpressionListParserRuleCall_0_1_0());
					}
					lv_expressionList_1_0=ruleexpressionList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExprSwitchCaseRule());
						}
						set(
							$current,
							"expressionList",
							lv_expressionList_1_0,
							"org.xtext.Go.expressionList");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		otherlv_2='default'
		{
			newLeafNode(otherlv_2, grammarAccess.getExprSwitchCaseAccess().getDefaultKeyword_1());
		}
	)
;

// Entry rule entryRuletypeSwitchStmt
entryRuletypeSwitchStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeSwitchStmtRule()); }
	iv_ruletypeSwitchStmt=ruletypeSwitchStmt
	{ $current=$iv_ruletypeSwitchStmt.current; }
	EOF;

// Rule typeSwitchStmt
ruletypeSwitchStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='switch'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeSwitchStmtAccess().getSwitchKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeSwitchStmtAccess().getSimpleStmtSimpleStmtParserRuleCall_1_0());
				}
				lv_simpleStmt_1_0=rulesimpleStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeSwitchStmtRule());
					}
					set(
						$current,
						"simpleStmt",
						lv_simpleStmt_1_0,
						"org.xtext.Go.simpleStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeSwitchStmtAccess().getTypeSwitchGuardTypeSwitchGuardParserRuleCall_2_0());
				}
				lv_typeSwitchGuard_2_0=ruletypeSwitchGuard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeSwitchStmtRule());
					}
					set(
						$current,
						"typeSwitchGuard",
						lv_typeSwitchGuard_2_0,
						"org.xtext.Go.typeSwitchGuard");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getTypeSwitchStmtAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeSwitchStmtAccess().getTypeCaseClauseTypeCaseClauseParserRuleCall_4_0());
				}
				lv_typeCaseClause_4_0=ruletypeCaseClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeSwitchStmtRule());
					}
					add(
						$current,
						"typeCaseClause",
						lv_typeCaseClause_4_0,
						"org.xtext.Go.typeCaseClause");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getTypeSwitchStmtAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuletypeSwitchGuard
entryRuletypeSwitchGuard returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeSwitchGuardRule()); }
	iv_ruletypeSwitchGuard=ruletypeSwitchGuard
	{ $current=$iv_ruletypeSwitchGuard.current; }
	EOF;

// Rule typeSwitchGuard
ruletypeSwitchGuard returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_IDENTIFIER_0=RULE_IDENTIFIER
			{
				newLeafNode(this_IDENTIFIER_0, grammarAccess.getTypeSwitchGuardAccess().getIDENTIFIERTerminalRuleCall_0_0());
			}
			otherlv_1=':='
			{
				newLeafNode(otherlv_1, grammarAccess.getTypeSwitchGuardAccess().getColonEqualsSignKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeSwitchGuardAccess().getPrimaryExprPrimaryExprParserRuleCall_1_0());
				}
				lv_primaryExpr_2_0=ruleprimaryExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeSwitchGuardRule());
					}
					set(
						$current,
						"primaryExpr",
						lv_primaryExpr_2_0,
						"org.xtext.Go.primaryExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='.'
		{
			newLeafNode(otherlv_3, grammarAccess.getTypeSwitchGuardAccess().getFullStopKeyword_2());
		}
		otherlv_4='('
		{
			newLeafNode(otherlv_4, grammarAccess.getTypeSwitchGuardAccess().getLeftParenthesisKeyword_3());
		}
		otherlv_5='type'
		{
			newLeafNode(otherlv_5, grammarAccess.getTypeSwitchGuardAccess().getTypeKeyword_4());
		}
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getTypeSwitchGuardAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuletypeCaseClause
entryRuletypeCaseClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeCaseClauseRule()); }
	iv_ruletypeCaseClause=ruletypeCaseClause
	{ $current=$iv_ruletypeCaseClause.current; }
	EOF;

// Rule typeCaseClause
ruletypeCaseClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeCaseClauseAccess().getTypeSwitchCaseTypeSwitchCaseParserRuleCall_0_0());
				}
				lv_typeSwitchCase_0_0=ruletypeSwitchCase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeCaseClauseRule());
					}
					set(
						$current,
						"typeSwitchCase",
						lv_typeSwitchCase_0_0,
						"org.xtext.Go.typeSwitchCase");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getTypeCaseClauseAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeCaseClauseAccess().getStatementListStatementListParserRuleCall_2_0());
				}
				lv_statementList_2_0=rulestatementList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeCaseClauseRule());
					}
					set(
						$current,
						"statementList",
						lv_statementList_2_0,
						"org.xtext.Go.statementList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuletypeSwitchCase
entryRuletypeSwitchCase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeSwitchCaseRule()); }
	iv_ruletypeSwitchCase=ruletypeSwitchCase
	{ $current=$iv_ruletypeSwitchCase.current; }
	EOF;

// Rule typeSwitchCase
ruletypeSwitchCase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='case'
			{
				newLeafNode(otherlv_0, grammarAccess.getTypeSwitchCaseAccess().getCaseKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeSwitchCaseAccess().getTypeListTypeListParserRuleCall_0_1_0());
					}
					lv_typeList_1_0=ruletypeList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeSwitchCaseRule());
						}
						set(
							$current,
							"typeList",
							lv_typeList_1_0,
							"org.xtext.Go.typeList");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		otherlv_2='default'
		{
			newLeafNode(otherlv_2, grammarAccess.getTypeSwitchCaseAccess().getDefaultKeyword_1());
		}
	)
;

// Entry rule entryRuletypeList
entryRuletypeList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeListRule()); }
	iv_ruletypeList=ruletypeList
	{ $current=$iv_ruletypeList.current; }
	EOF;

// Rule typeList
ruletypeList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeListAccess().getTypeTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeListRule());
					}
					add(
						$current,
						"type",
						lv_type_0_0,
						"org.xtext.Go.type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getTypeListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeListAccess().getTypeTypeParserRuleCall_1_1_0());
					}
					lv_type_2_0=ruletype
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeListRule());
						}
						add(
							$current,
							"type",
							lv_type_2_0,
							"org.xtext.Go.type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleselectStmt
entryRuleselectStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectStmtRule()); }
	iv_ruleselectStmt=ruleselectStmt
	{ $current=$iv_ruleselectStmt.current; }
	EOF;

// Rule selectStmt
ruleselectStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='select'
		{
			newLeafNode(otherlv_0, grammarAccess.getSelectStmtAccess().getSelectKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getSelectStmtAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectStmtAccess().getCommClauseCommClauseParserRuleCall_2_0());
				}
				lv_commClause_2_0=rulecommClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectStmtRule());
					}
					add(
						$current,
						"commClause",
						lv_commClause_2_0,
						"org.xtext.Go.commClause");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getSelectStmtAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRulecommClause
entryRulecommClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommClauseRule()); }
	iv_rulecommClause=rulecommClause
	{ $current=$iv_rulecommClause.current; }
	EOF;

// Rule commClause
rulecommClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCommClauseAccess().getCommCaseCommCaseParserRuleCall_0_0());
				}
				lv_commCase_0_0=rulecommCase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommClauseRule());
					}
					set(
						$current,
						"commCase",
						lv_commCase_0_0,
						"org.xtext.Go.commCase");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getCommClauseAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCommClauseAccess().getStatementListStatementListParserRuleCall_2_0());
				}
				lv_statementList_2_0=rulestatementList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommClauseRule());
					}
					set(
						$current,
						"statementList",
						lv_statementList_2_0,
						"org.xtext.Go.statementList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulecommCase
entryRulecommCase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommCaseRule()); }
	iv_rulecommCase=rulecommCase
	{ $current=$iv_rulecommCase.current; }
	EOF;

// Rule commCase
rulecommCase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='case'
			{
				newLeafNode(otherlv_0, grammarAccess.getCommCaseAccess().getCaseKeyword_0_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getCommCaseAccess().getSendStmtSendStmtParserRuleCall_0_1_0_0());
						}
						lv_sendStmt_1_0=rulesendStmt
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCommCaseRule());
							}
							set(
								$current,
								"sendStmt",
								lv_sendStmt_1_0,
								"org.xtext.Go.sendStmt");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getCommCaseAccess().getRecvStmtRecvStmtParserRuleCall_0_1_1_0());
						}
						lv_recvStmt_2_0=rulerecvStmt
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCommCaseRule());
							}
							set(
								$current,
								"recvStmt",
								lv_recvStmt_2_0,
								"org.xtext.Go.recvStmt");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
		    |
		otherlv_3='default'
		{
			newLeafNode(otherlv_3, grammarAccess.getCommCaseAccess().getDefaultKeyword_1());
		}
	)
;

// Entry rule entryRulerecvStmt
entryRulerecvStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRecvStmtRule()); }
	iv_rulerecvStmt=rulerecvStmt
	{ $current=$iv_rulerecvStmt.current; }
	EOF;

// Rule recvStmt
rulerecvStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getRecvStmtAccess().getExpressionListExpressionListParserRuleCall_0_0_0_0());
						}
						lv_expressionList_0_0=ruleexpressionList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRecvStmtRule());
							}
							set(
								$current,
								"expressionList",
								lv_expressionList_0_0,
								"org.xtext.Go.expressionList");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_1='='
				{
					newLeafNode(otherlv_1, grammarAccess.getRecvStmtAccess().getEqualsSignKeyword_0_0_1());
				}
			)
			    |
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getRecvStmtAccess().getIdentifierListIdentifierListParserRuleCall_0_1_0_0());
						}
						lv_identifierList_2_0=ruleidentifierList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRecvStmtRule());
							}
							set(
								$current,
								"identifierList",
								lv_identifierList_2_0,
								"org.xtext.Go.identifierList");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_3=':='
				{
					newLeafNode(otherlv_3, grammarAccess.getRecvStmtAccess().getColonEqualsSignKeyword_0_1_1());
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getRecvStmtAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_4_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRecvStmtRule());
					}
					set(
						$current,
						"expression",
						lv_expression_4_0,
						"org.xtext.Go.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleforStmt
entryRuleforStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForStmtRule()); }
	iv_ruleforStmt=ruleforStmt
	{ $current=$iv_ruleforStmt.current; }
	EOF;

// Rule forStmt
ruleforStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='for'
		{
			newLeafNode(otherlv_0, grammarAccess.getForStmtAccess().getForKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getForStmtAccess().getExpressionExpressionParserRuleCall_1_0_0());
					}
					lv_expression_1_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getForStmtRule());
						}
						set(
							$current,
							"expression",
							lv_expression_1_0,
							"org.xtext.Go.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getForStmtAccess().getForClauseForClauseParserRuleCall_1_1_0());
					}
					lv_forClause_2_0=ruleforClause
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getForStmtRule());
						}
						set(
							$current,
							"forClause",
							lv_forClause_2_0,
							"org.xtext.Go.forClause");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getForStmtAccess().getRangeClauseRangeClauseParserRuleCall_1_2_0());
					}
					lv_rangeClause_3_0=rulerangeClause
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getForStmtRule());
						}
						set(
							$current,
							"rangeClause",
							lv_rangeClause_3_0,
							"org.xtext.Go.rangeClause");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getForStmtAccess().getBlockBlockParserRuleCall_2_0());
				}
				lv_block_4_0=ruleblock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStmtRule());
					}
					set(
						$current,
						"block",
						lv_block_4_0,
						"org.xtext.Go.block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleforClause
entryRuleforClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForClauseRule()); }
	iv_ruleforClause=ruleforClause
	{ $current=$iv_ruleforClause.current; }
	EOF;

// Rule forClause
ruleforClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getForClauseAccess().getSimpleStmtSimpleStmtParserRuleCall_0_0());
				}
				lv_simpleStmt_0_0=rulesimpleStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForClauseRule());
					}
					set(
						$current,
						"simpleStmt",
						lv_simpleStmt_0_0,
						"org.xtext.Go.simpleStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getForClauseAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForClauseRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.xtext.Go.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getForClauseAccess().getSimpleStmtSimpleStmtParserRuleCall_2_0());
				}
				lv_simpleStmt_2_0=rulesimpleStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForClauseRule());
					}
					set(
						$current,
						"simpleStmt",
						lv_simpleStmt_2_0,
						"org.xtext.Go.simpleStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulerangeClause
entryRulerangeClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRangeClauseRule()); }
	iv_rulerangeClause=rulerangeClause
	{ $current=$iv_rulerangeClause.current; }
	EOF;

// Rule rangeClause
rulerangeClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getRangeClauseAccess().getExpressionListExpressionListParserRuleCall_0_0_0_0());
						}
						lv_expressionList_0_0=ruleexpressionList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRangeClauseRule());
							}
							set(
								$current,
								"expressionList",
								lv_expressionList_0_0,
								"org.xtext.Go.expressionList");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_1='='
				{
					newLeafNode(otherlv_1, grammarAccess.getRangeClauseAccess().getEqualsSignKeyword_0_0_1());
				}
			)
			    |
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getRangeClauseAccess().getIdentifierListIdentifierListParserRuleCall_0_1_0_0());
						}
						lv_identifierList_2_0=ruleidentifierList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRangeClauseRule());
							}
							set(
								$current,
								"identifierList",
								lv_identifierList_2_0,
								"org.xtext.Go.identifierList");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_3=':='
				{
					newLeafNode(otherlv_3, grammarAccess.getRangeClauseAccess().getColonEqualsSignKeyword_0_1_1());
				}
			)
		)?
		otherlv_4='range'
		{
			newLeafNode(otherlv_4, grammarAccess.getRangeClauseAccess().getRangeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRangeClauseAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_5_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRangeClauseRule());
					}
					set(
						$current,
						"expression",
						lv_expression_5_0,
						"org.xtext.Go.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulegoStmt
entryRulegoStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGoStmtRule()); }
	iv_rulegoStmt=rulegoStmt
	{ $current=$iv_rulegoStmt.current; }
	EOF;

// Rule goStmt
rulegoStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='go'
		{
			newLeafNode(otherlv_0, grammarAccess.getGoStmtAccess().getGoKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGoStmtAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGoStmtRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.xtext.Go.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuletype
entryRuletype returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruletype=ruletype
	{ $current=$iv_ruletype.current; }
	EOF;

// Rule type
ruletype returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAccess().getTypeNameTypeNameParserRuleCall_0_0());
				}
				lv_typeName_0_0=ruletypeName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeRule());
					}
					set(
						$current,
						"typeName",
						lv_typeName_0_0,
						"org.xtext.Go.typeName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAccess().getTypeLitTypeLitParserRuleCall_1_0());
				}
				lv_typeLit_1_0=ruletypeLit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeRule());
					}
					set(
						$current,
						"typeLit",
						lv_typeLit_1_0,
						"org.xtext.Go.typeLit");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getTypeAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeAccess().getTypeTypeParserRuleCall_2_1_0());
					}
					lv_type_3_0=ruletype
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeRule());
						}
						set(
							$current,
							"type",
							lv_type_3_0,
							"org.xtext.Go.type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getTypeAccess().getRightParenthesisKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRuletypeName
entryRuletypeName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeNameRule()); }
	iv_ruletypeName=ruletypeName
	{ $current=$iv_ruletypeName.current; }
	EOF;

// Rule typeName
ruletypeName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENTIFIER_0=RULE_IDENTIFIER
		{
			newLeafNode(this_IDENTIFIER_0, grammarAccess.getTypeNameAccess().getIDENTIFIERTerminalRuleCall_0());
		}
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeNameAccess().getQualifiedIdentQualifiedIdentParserRuleCall_1_0());
				}
				lv_qualifiedIdent_1_0=rulequalifiedIdent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeNameRule());
					}
					set(
						$current,
						"qualifiedIdent",
						lv_qualifiedIdent_1_0,
						"org.xtext.Go.qualifiedIdent");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuletypeLit
entryRuletypeLit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeLitRule()); }
	iv_ruletypeLit=ruletypeLit
	{ $current=$iv_ruletypeLit.current; }
	EOF;

// Rule typeLit
ruletypeLit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeLitAccess().getArrayTypeArrayTypeParserRuleCall_0_0());
				}
				lv_arrayType_0_0=rulearrayType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeLitRule());
					}
					set(
						$current,
						"arrayType",
						lv_arrayType_0_0,
						"org.xtext.Go.arrayType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeLitAccess().getStructTypeStructTypeParserRuleCall_1_0());
				}
				lv_structType_1_0=rulestructType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeLitRule());
					}
					set(
						$current,
						"structType",
						lv_structType_1_0,
						"org.xtext.Go.structType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeLitAccess().getPointerTypePointerTypeParserRuleCall_2_0());
				}
				lv_pointerType_2_0=rulepointerType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeLitRule());
					}
					set(
						$current,
						"pointerType",
						lv_pointerType_2_0,
						"org.xtext.Go.pointerType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeLitAccess().getFunctionTypeFunctionTypeParserRuleCall_3_0());
				}
				lv_functionType_3_0=rulefunctionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeLitRule());
					}
					set(
						$current,
						"functionType",
						lv_functionType_3_0,
						"org.xtext.Go.functionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeLitAccess().getInterfaceTypeInterfaceTypeParserRuleCall_4_0());
				}
				lv_interfaceType_4_0=ruleinterfaceType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeLitRule());
					}
					set(
						$current,
						"interfaceType",
						lv_interfaceType_4_0,
						"org.xtext.Go.interfaceType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeLitAccess().getSliceTypeSliceTypeParserRuleCall_5_0());
				}
				lv_sliceType_5_0=rulesliceType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeLitRule());
					}
					set(
						$current,
						"sliceType",
						lv_sliceType_5_0,
						"org.xtext.Go.sliceType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeLitAccess().getMapTypeMapTypeParserRuleCall_6_0());
				}
				lv_mapType_6_0=rulemapType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeLitRule());
					}
					set(
						$current,
						"mapType",
						lv_mapType_6_0,
						"org.xtext.Go.mapType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeLitAccess().getChannelTypeChannelTypeParserRuleCall_7_0());
				}
				lv_channelType_7_0=rulechannelType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeLitRule());
					}
					set(
						$current,
						"channelType",
						lv_channelType_7_0,
						"org.xtext.Go.channelType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulearrayType
entryRulearrayType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayTypeRule()); }
	iv_rulearrayType=rulearrayType
	{ $current=$iv_rulearrayType.current; }
	EOF;

// Rule arrayType
rulearrayType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getArrayTypeAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayTypeAccess().getArrayLengthArrayLengthParserRuleCall_1_0());
				}
				lv_arrayLength_1_0=rulearrayLength
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayTypeRule());
					}
					set(
						$current,
						"arrayLength",
						lv_arrayLength_1_0,
						"org.xtext.Go.arrayLength");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=']'
		{
			newLeafNode(otherlv_2, grammarAccess.getArrayTypeAccess().getRightSquareBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayTypeAccess().getElementTypeElementTypeParserRuleCall_3_0());
				}
				lv_elementType_3_0=ruleelementType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayTypeRule());
					}
					set(
						$current,
						"elementType",
						lv_elementType_3_0,
						"org.xtext.Go.elementType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulearrayLength
entryRulearrayLength returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayLengthRule()); }
	iv_rulearrayLength=rulearrayLength
	{ $current=$iv_rulearrayLength.current; }
	EOF;

// Rule arrayLength
rulearrayLength returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getArrayLengthAccess().getExpressionExpressionParserRuleCall_0());
			}
			lv_expression_0_0=ruleexpression
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getArrayLengthRule());
				}
				set(
					$current,
					"expression",
					lv_expression_0_0,
					"org.xtext.Go.expression");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleelementType
entryRuleelementType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementTypeRule()); }
	iv_ruleelementType=ruleelementType
	{ $current=$iv_ruleelementType.current; }
	EOF;

// Rule elementType
ruleelementType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getElementTypeAccess().getTypeTypeParserRuleCall_0());
			}
			lv_type_0_0=ruletype
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getElementTypeRule());
				}
				set(
					$current,
					"type",
					lv_type_0_0,
					"org.xtext.Go.type");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulepointerType
entryRulepointerType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPointerTypeRule()); }
	iv_rulepointerType=rulepointerType
	{ $current=$iv_rulepointerType.current; }
	EOF;

// Rule pointerType
rulepointerType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='*'
		{
			newLeafNode(otherlv_0, grammarAccess.getPointerTypeAccess().getAsteriskKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPointerTypeAccess().getTypeTypeParserRuleCall_1_0());
				}
				lv_type_1_0=ruletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPointerTypeRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"org.xtext.Go.type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleinterfaceType
entryRuleinterfaceType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInterfaceTypeRule()); }
	iv_ruleinterfaceType=ruleinterfaceType
	{ $current=$iv_ruleinterfaceType.current; }
	EOF;

// Rule interfaceType
ruleinterfaceType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='interface'
		{
			newLeafNode(otherlv_0, grammarAccess.getInterfaceTypeAccess().getInterfaceKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getInterfaceTypeAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInterfaceTypeAccess().getMethodSpecMethodSpecParserRuleCall_2_0());
				}
				lv_methodSpec_2_0=rulemethodSpec
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInterfaceTypeRule());
					}
					add(
						$current,
						"methodSpec",
						lv_methodSpec_2_0,
						"org.xtext.Go.methodSpec");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getInterfaceTypeAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRulesliceType
entryRulesliceType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSliceTypeRule()); }
	iv_rulesliceType=rulesliceType
	{ $current=$iv_rulesliceType.current; }
	EOF;

// Rule sliceType
rulesliceType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getSliceTypeAccess().getLeftSquareBracketKeyword_0());
		}
		otherlv_1=']'
		{
			newLeafNode(otherlv_1, grammarAccess.getSliceTypeAccess().getRightSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSliceTypeAccess().getElementTypeElementTypeParserRuleCall_2_0());
				}
				lv_elementType_2_0=ruleelementType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSliceTypeRule());
					}
					set(
						$current,
						"elementType",
						lv_elementType_2_0,
						"org.xtext.Go.elementType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulemapType
entryRulemapType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMapTypeRule()); }
	iv_rulemapType=rulemapType
	{ $current=$iv_rulemapType.current; }
	EOF;

// Rule mapType
rulemapType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='map'
		{
			newLeafNode(otherlv_0, grammarAccess.getMapTypeAccess().getMapKeyword_0());
		}
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getMapTypeAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMapTypeAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMapTypeRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.xtext.Go.type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getMapTypeAccess().getRightSquareBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMapTypeAccess().getElementTypeElementTypeParserRuleCall_4_0());
				}
				lv_elementType_4_0=ruleelementType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMapTypeRule());
					}
					set(
						$current,
						"elementType",
						lv_elementType_4_0,
						"org.xtext.Go.elementType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulechannelType
entryRulechannelType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChannelTypeRule()); }
	iv_rulechannelType=rulechannelType
	{ $current=$iv_rulechannelType.current; }
	EOF;

// Rule channelType
rulechannelType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='chan'
			{
				newLeafNode(otherlv_0, grammarAccess.getChannelTypeAccess().getChanKeyword_0_0());
			}
			    |
			(
				otherlv_1='chan'
				{
					newLeafNode(otherlv_1, grammarAccess.getChannelTypeAccess().getChanKeyword_0_1_0());
				}
				otherlv_2='<-'
				{
					newLeafNode(otherlv_2, grammarAccess.getChannelTypeAccess().getLessThanSignHyphenMinusKeyword_0_1_1());
				}
			)
			    |
			(
				otherlv_3='<-'
				{
					newLeafNode(otherlv_3, grammarAccess.getChannelTypeAccess().getLessThanSignHyphenMinusKeyword_0_2_0());
				}
				otherlv_4='chan'
				{
					newLeafNode(otherlv_4, grammarAccess.getChannelTypeAccess().getChanKeyword_0_2_1());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getChannelTypeAccess().getElementTypeElementTypeParserRuleCall_1_0());
				}
				lv_elementType_5_0=ruleelementType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChannelTypeRule());
					}
					set(
						$current,
						"elementType",
						lv_elementType_5_0,
						"org.xtext.Go.elementType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulemethodSpec
entryRulemethodSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodSpecRule()); }
	iv_rulemethodSpec=rulemethodSpec
	{ $current=$iv_rulemethodSpec.current; }
	EOF;

// Rule methodSpec
rulemethodSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_IDENTIFIER_0=RULE_IDENTIFIER
			{
				newLeafNode(this_IDENTIFIER_0, grammarAccess.getMethodSpecAccess().getIDENTIFIERTerminalRuleCall_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodSpecAccess().getSignatureSignatureParserRuleCall_0_1_0());
					}
					lv_signature_1_0=rulesignature
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodSpecRule());
						}
						set(
							$current,
							"signature",
							lv_signature_1_0,
							"org.xtext.Go.signature");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodSpecAccess().getTypeNameTypeNameParserRuleCall_1_0());
				}
				lv_typeName_2_0=ruletypeName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodSpecRule());
					}
					set(
						$current,
						"typeName",
						lv_typeName_2_0,
						"org.xtext.Go.typeName");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulefunctionType
entryRulefunctionType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionTypeRule()); }
	iv_rulefunctionType=rulefunctionType
	{ $current=$iv_rulefunctionType.current; }
	EOF;

// Rule functionType
rulefunctionType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='func'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionTypeAccess().getFuncKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionTypeAccess().getSignatureSignatureParserRuleCall_1_0());
				}
				lv_signature_1_0=rulesignature
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionTypeRule());
					}
					set(
						$current,
						"signature",
						lv_signature_1_0,
						"org.xtext.Go.signature");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulesignature
entryRulesignature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSignatureRule()); }
	iv_rulesignature=rulesignature
	{ $current=$iv_rulesignature.current; }
	EOF;

// Rule signature
rulesignature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSignatureAccess().getParametersParametersParserRuleCall_0_0());
				}
				lv_parameters_0_0=ruleparameters
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSignatureRule());
					}
					set(
						$current,
						"parameters",
						lv_parameters_0_0,
						"org.xtext.Go.parameters");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSignatureAccess().getResultResultParserRuleCall_1_0());
				}
				lv_result_1_0=ruleresult
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSignatureRule());
					}
					set(
						$current,
						"result",
						lv_result_1_0,
						"org.xtext.Go.result");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleresult
entryRuleresult returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResultRule()); }
	iv_ruleresult=ruleresult
	{ $current=$iv_ruleresult.current; }
	EOF;

// Rule result
ruleresult returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getResultAccess().getParametersParametersParserRuleCall_0_0());
				}
				lv_parameters_0_0=ruleparameters
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getResultRule());
					}
					set(
						$current,
						"parameters",
						lv_parameters_0_0,
						"org.xtext.Go.parameters");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getResultAccess().getTypeTypeParserRuleCall_1_0());
				}
				lv_type_1_0=ruletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getResultRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"org.xtext.Go.type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleparameters
entryRuleparameters returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParametersRule()); }
	iv_ruleparameters=ruleparameters
	{ $current=$iv_ruleparameters.current; }
	EOF;

// Rule parameters
ruleparameters returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getParametersAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getParametersAccess().getParameterListParameterListParserRuleCall_1_0_0());
					}
					lv_parameterList_1_0=ruleparameterList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParametersRule());
						}
						set(
							$current,
							"parameterList",
							lv_parameterList_1_0,
							"org.xtext.Go.parameterList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getParametersAccess().getCommaKeyword_1_1());
				}
			)?
		)?
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getParametersAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleparameterList
entryRuleparameterList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterListRule()); }
	iv_ruleparameterList=ruleparameterList
	{ $current=$iv_ruleparameterList.current; }
	EOF;

// Rule parameterList
ruleparameterList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterListAccess().getParameterDeclParameterDeclParserRuleCall_0_0());
				}
				lv_parameterDecl_0_0=ruleparameterDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterListRule());
					}
					add(
						$current,
						"parameterDecl",
						lv_parameterDecl_0_0,
						"org.xtext.Go.parameterDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getParameterListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterListAccess().getParameterDeclParameterDeclParserRuleCall_1_1_0());
					}
					lv_parameterDecl_2_0=ruleparameterDecl
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterListRule());
						}
						add(
							$current,
							"parameterDecl",
							lv_parameterDecl_2_0,
							"org.xtext.Go.parameterDecl");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleparameterDecl
entryRuleparameterDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterDeclRule()); }
	iv_ruleparameterDecl=ruleparameterDecl
	{ $current=$iv_ruleparameterDecl.current; }
	EOF;

// Rule parameterDecl
ruleparameterDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterDeclAccess().getIdentifierListIdentifierListParserRuleCall_0_0());
				}
				lv_identifierList_0_0=ruleidentifierList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterDeclRule());
					}
					set(
						$current,
						"identifierList",
						lv_identifierList_0_0,
						"org.xtext.Go.identifierList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_1='...'
			{
				newLeafNode(otherlv_1, grammarAccess.getParameterDeclAccess().getFullStopFullStopFullStopKeyword_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterDeclAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterDeclRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.xtext.Go.type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleoperand
entryRuleoperand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperandRule()); }
	iv_ruleoperand=ruleoperand
	{ $current=$iv_ruleoperand.current; }
	EOF;

// Rule operand
ruleoperand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOperandAccess().getLiteralLiteralParserRuleCall_0_0());
				}
				lv_literal_0_0=ruleliteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperandRule());
					}
					set(
						$current,
						"literal",
						lv_literal_0_0,
						"org.xtext.Go.literal");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getOperandAccess().getOperandNameOperandNameParserRuleCall_1_0());
				}
				lv_operandName_1_0=ruleoperandName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperandRule());
					}
					set(
						$current,
						"operandName",
						lv_operandName_1_0,
						"org.xtext.Go.operandName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getOperandAccess().getMethodExprMethodExprParserRuleCall_2_0());
				}
				lv_methodExpr_2_0=rulemethodExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperandRule());
					}
					set(
						$current,
						"methodExpr",
						lv_methodExpr_2_0,
						"org.xtext.Go.methodExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getOperandAccess().getLeftParenthesisKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOperandAccess().getExpressionExpressionParserRuleCall_3_1_0());
					}
					lv_expression_4_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOperandRule());
						}
						set(
							$current,
							"expression",
							lv_expression_4_0,
							"org.xtext.Go.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getOperandAccess().getRightParenthesisKeyword_3_2());
			}
		)
	)
;

// Entry rule entryRuleliteral
entryRuleliteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleliteral=ruleliteral
	{ $current=$iv_ruleliteral.current; }
	EOF;

// Rule literal
ruleliteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLiteralAccess().getBasicLitBasicLitParserRuleCall_0_0());
				}
				lv_basicLit_0_0=rulebasicLit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLiteralRule());
					}
					set(
						$current,
						"basicLit",
						lv_basicLit_0_0,
						"org.xtext.Go.basicLit");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getLiteralAccess().getCompositeLitCompositeLitParserRuleCall_1_0());
				}
				lv_compositeLit_1_0=rulecompositeLit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLiteralRule());
					}
					set(
						$current,
						"compositeLit",
						lv_compositeLit_1_0,
						"org.xtext.Go.compositeLit");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getLiteralAccess().getFunctionLitFunctionLitParserRuleCall_2_0());
				}
				lv_functionLit_2_0=rulefunctionLit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLiteralRule());
					}
					set(
						$current,
						"functionLit",
						lv_functionLit_2_0,
						"org.xtext.Go.functionLit");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulebasicLit
entryRulebasicLit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBasicLitRule()); }
	iv_rulebasicLit=rulebasicLit
	{ $current=$iv_rulebasicLit.current.getText(); }
	EOF;

// Rule basicLit
rulebasicLit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_LIT_0=RULE_INT_LIT
		{
			$current.merge(this_INT_LIT_0);
		}
		{
			newLeafNode(this_INT_LIT_0, grammarAccess.getBasicLitAccess().getINT_LITTerminalRuleCall_0());
		}
		    |
		this_FLOAT_LIT_1=RULE_FLOAT_LIT
		{
			$current.merge(this_FLOAT_LIT_1);
		}
		{
			newLeafNode(this_FLOAT_LIT_1, grammarAccess.getBasicLitAccess().getFLOAT_LITTerminalRuleCall_1());
		}
		    |
		this_IMAGINARY_LIT_2=RULE_IMAGINARY_LIT
		{
			$current.merge(this_IMAGINARY_LIT_2);
		}
		{
			newLeafNode(this_IMAGINARY_LIT_2, grammarAccess.getBasicLitAccess().getIMAGINARY_LITTerminalRuleCall_2());
		}
		    |
		this_RUNE_LIT_3=RULE_RUNE_LIT
		{
			$current.merge(this_RUNE_LIT_3);
		}
		{
			newLeafNode(this_RUNE_LIT_3, grammarAccess.getBasicLitAccess().getRUNE_LITTerminalRuleCall_3());
		}
		    |
		this_STRING_LIT_4=RULE_STRING_LIT
		{
			$current.merge(this_STRING_LIT_4);
		}
		{
			newLeafNode(this_STRING_LIT_4, grammarAccess.getBasicLitAccess().getSTRING_LITTerminalRuleCall_4());
		}
	)
;

// Entry rule entryRuleoperandName
entryRuleoperandName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperandNameRule()); }
	iv_ruleoperandName=ruleoperandName
	{ $current=$iv_ruleoperandName.current; }
	EOF;

// Rule operandName
ruleoperandName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENTIFIER_0=RULE_IDENTIFIER
		{
			newLeafNode(this_IDENTIFIER_0, grammarAccess.getOperandNameAccess().getIDENTIFIERTerminalRuleCall_0());
		}
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getOperandNameAccess().getQualifiedIdentQualifiedIdentParserRuleCall_1_0());
				}
				lv_qualifiedIdent_1_0=rulequalifiedIdent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperandNameRule());
					}
					set(
						$current,
						"qualifiedIdent",
						lv_qualifiedIdent_1_0,
						"org.xtext.Go.qualifiedIdent");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulequalifiedIdent
entryRulequalifiedIdent returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedIdentRule()); }
	iv_rulequalifiedIdent=rulequalifiedIdent
	{ $current=$iv_rulequalifiedIdent.current.getText(); }
	EOF;

// Rule qualifiedIdent
rulequalifiedIdent returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENTIFIER_0=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_0);
		}
		{
			newLeafNode(this_IDENTIFIER_0, grammarAccess.getQualifiedIdentAccess().getIDENTIFIERTerminalRuleCall_0());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQualifiedIdentAccess().getFullStopKeyword_1());
		}
		this_IDENTIFIER_2=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_2);
		}
		{
			newLeafNode(this_IDENTIFIER_2, grammarAccess.getQualifiedIdentAccess().getIDENTIFIERTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRulecompositeLit
entryRulecompositeLit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompositeLitRule()); }
	iv_rulecompositeLit=rulecompositeLit
	{ $current=$iv_rulecompositeLit.current; }
	EOF;

// Rule compositeLit
rulecompositeLit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCompositeLitAccess().getLiteralTypeLiteralTypeParserRuleCall_0_0());
				}
				lv_literalType_0_0=ruleliteralType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompositeLitRule());
					}
					set(
						$current,
						"literalType",
						lv_literalType_0_0,
						"org.xtext.Go.literalType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCompositeLitAccess().getLiteralValueLiteralValueParserRuleCall_1_0());
				}
				lv_literalValue_1_0=ruleliteralValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompositeLitRule());
					}
					set(
						$current,
						"literalValue",
						lv_literalValue_1_0,
						"org.xtext.Go.literalValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleliteralType
entryRuleliteralType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralTypeRule()); }
	iv_ruleliteralType=ruleliteralType
	{ $current=$iv_ruleliteralType.current; }
	EOF;

// Rule literalType
ruleliteralType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLiteralTypeAccess().getStructTypeStructTypeParserRuleCall_0_0());
				}
				lv_structType_0_0=rulestructType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLiteralTypeRule());
					}
					set(
						$current,
						"structType",
						lv_structType_0_0,
						"org.xtext.Go.structType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getLiteralTypeAccess().getArrayTypeArrayTypeParserRuleCall_1_0());
				}
				lv_arrayType_1_0=rulearrayType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLiteralTypeRule());
					}
					set(
						$current,
						"arrayType",
						lv_arrayType_1_0,
						"org.xtext.Go.arrayType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_2='['
			{
				newLeafNode(otherlv_2, grammarAccess.getLiteralTypeAccess().getLeftSquareBracketKeyword_2_0());
			}
			otherlv_3='...'
			{
				newLeafNode(otherlv_3, grammarAccess.getLiteralTypeAccess().getFullStopFullStopFullStopKeyword_2_1());
			}
			otherlv_4=']'
			{
				newLeafNode(otherlv_4, grammarAccess.getLiteralTypeAccess().getRightSquareBracketKeyword_2_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLiteralTypeAccess().getElementTypeElementTypeParserRuleCall_2_3_0());
					}
					lv_elementType_5_0=ruleelementType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLiteralTypeRule());
						}
						set(
							$current,
							"elementType",
							lv_elementType_5_0,
							"org.xtext.Go.elementType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getLiteralTypeAccess().getSliceTypeSliceTypeParserRuleCall_3_0());
				}
				lv_sliceType_6_0=rulesliceType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLiteralTypeRule());
					}
					set(
						$current,
						"sliceType",
						lv_sliceType_6_0,
						"org.xtext.Go.sliceType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getLiteralTypeAccess().getMapTypeMapTypeParserRuleCall_4_0());
				}
				lv_mapType_7_0=rulemapType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLiteralTypeRule());
					}
					set(
						$current,
						"mapType",
						lv_mapType_7_0,
						"org.xtext.Go.mapType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getLiteralTypeAccess().getTypeNameTypeNameParserRuleCall_5_0());
				}
				lv_typeName_8_0=ruletypeName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLiteralTypeRule());
					}
					set(
						$current,
						"typeName",
						lv_typeName_8_0,
						"org.xtext.Go.typeName");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleliteralValue
entryRuleliteralValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralValueRule()); }
	iv_ruleliteralValue=ruleliteralValue
	{ $current=$iv_ruleliteralValue.current; }
	EOF;

// Rule literalValue
ruleliteralValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getLiteralValueAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getLiteralValueAccess().getElementListElementListParserRuleCall_1_0_0());
					}
					lv_elementList_1_0=ruleelementList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLiteralValueRule());
						}
						set(
							$current,
							"elementList",
							lv_elementList_1_0,
							"org.xtext.Go.elementList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getLiteralValueAccess().getCommaKeyword_1_1());
				}
			)?
		)?
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getLiteralValueAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleelementList
entryRuleelementList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementListRule()); }
	iv_ruleelementList=ruleelementList
	{ $current=$iv_ruleelementList.current; }
	EOF;

// Rule elementList
ruleelementList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getElementListAccess().getKeyedElementKeyedElementParserRuleCall_0_0());
				}
				lv_keyedElement_0_0=rulekeyedElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElementListRule());
					}
					add(
						$current,
						"keyedElement",
						lv_keyedElement_0_0,
						"org.xtext.Go.keyedElement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getElementListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getElementListAccess().getKeyedElementKeyedElementParserRuleCall_1_1_0());
					}
					lv_keyedElement_2_0=rulekeyedElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getElementListRule());
						}
						add(
							$current,
							"keyedElement",
							lv_keyedElement_2_0,
							"org.xtext.Go.keyedElement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulekeyedElement
entryRulekeyedElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getKeyedElementRule()); }
	iv_rulekeyedElement=rulekeyedElement
	{ $current=$iv_rulekeyedElement.current; }
	EOF;

// Rule keyedElement
rulekeyedElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getKeyedElementAccess().getKeyKeyParserRuleCall_0_0_0());
					}
					lv_key_0_0=rulekey
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getKeyedElementRule());
						}
						set(
							$current,
							"key",
							lv_key_0_0,
							"org.xtext.Go.key");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getKeyedElementAccess().getColonKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getKeyedElementAccess().getElementElementParserRuleCall_1_0());
				}
				lv_element_2_0=ruleelement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getKeyedElementRule());
					}
					set(
						$current,
						"element",
						lv_element_2_0,
						"org.xtext.Go.element");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulekey
entryRulekey returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getKeyRule()); }
	iv_rulekey=rulekey
	{ $current=$iv_rulekey.current; }
	EOF;

// Rule key
rulekey returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENTIFIER_0=RULE_IDENTIFIER
		{
			newLeafNode(this_IDENTIFIER_0, grammarAccess.getKeyAccess().getIDENTIFIERTerminalRuleCall_0());
		}
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getKeyAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getKeyRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.xtext.Go.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getKeyAccess().getLiteralValueLiteralValueParserRuleCall_2_0());
				}
				lv_literalValue_2_0=ruleliteralValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getKeyRule());
					}
					set(
						$current,
						"literalValue",
						lv_literalValue_2_0,
						"org.xtext.Go.literalValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleelement
entryRuleelement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleelement=ruleelement
	{ $current=$iv_ruleelement.current; }
	EOF;

// Rule element
ruleelement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getElementAccess().getExpressionExpressionParserRuleCall_0_0());
				}
				lv_expression_0_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElementRule());
					}
					set(
						$current,
						"expression",
						lv_expression_0_0,
						"org.xtext.Go.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getElementAccess().getLiteralValueLiteralValueParserRuleCall_1_0());
				}
				lv_literalValue_1_0=ruleliteralValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElementRule());
					}
					set(
						$current,
						"literalValue",
						lv_literalValue_1_0,
						"org.xtext.Go.literalValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulestructType
entryRulestructType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStructTypeRule()); }
	iv_rulestructType=rulestructType
	{ $current=$iv_rulestructType.current; }
	EOF;

// Rule structType
rulestructType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='struct'
		{
			newLeafNode(otherlv_0, grammarAccess.getStructTypeAccess().getStructKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getStructTypeAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStructTypeAccess().getFieldDeclFieldDeclParserRuleCall_2_0());
				}
				lv_fieldDecl_2_0=rulefieldDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStructTypeRule());
					}
					add(
						$current,
						"fieldDecl",
						lv_fieldDecl_2_0,
						"org.xtext.Go.fieldDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getStructTypeAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRulefieldDecl
entryRulefieldDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldDeclRule()); }
	iv_rulefieldDecl=rulefieldDecl
	{ $current=$iv_rulefieldDecl.current; }
	EOF;

// Rule fieldDecl
rulefieldDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getFieldDeclAccess().getIdentifierListIdentifierListParserRuleCall_0_0_0_0());
						}
						lv_identifierList_0_0=ruleidentifierList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFieldDeclRule());
							}
							set(
								$current,
								"identifierList",
								lv_identifierList_0_0,
								"org.xtext.Go.identifierList");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getFieldDeclAccess().getTypeTypeParserRuleCall_0_0_1_0());
						}
						lv_type_1_0=ruletype
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFieldDeclRule());
							}
							set(
								$current,
								"type",
								lv_type_1_0,
								"org.xtext.Go.type");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFieldDeclAccess().getAnonymousFieldAnonymousFieldParserRuleCall_0_1_0());
					}
					lv_anonymousField_2_0=ruleanonymousField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFieldDeclRule());
						}
						set(
							$current,
							"anonymousField",
							lv_anonymousField_2_0,
							"org.xtext.Go.anonymousField");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			this_STRING_LIT_3=RULE_STRING_LIT
			{
				newLeafNode(this_STRING_LIT_3, grammarAccess.getFieldDeclAccess().getSTRING_LITTerminalRuleCall_1());
			}
		)?
	)
;

// Entry rule entryRuleanonymousField
entryRuleanonymousField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnonymousFieldRule()); }
	iv_ruleanonymousField=ruleanonymousField
	{ $current=$iv_ruleanonymousField.current; }
	EOF;

// Rule anonymousField
ruleanonymousField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='*'
			{
				newLeafNode(otherlv_0, grammarAccess.getAnonymousFieldAccess().getAsteriskKeyword_0());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getAnonymousFieldAccess().getTypeNameTypeNameParserRuleCall_1_0());
				}
				lv_typeName_1_0=ruletypeName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnonymousFieldRule());
					}
					set(
						$current,
						"typeName",
						lv_typeName_1_0,
						"org.xtext.Go.typeName");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulefunctionLit
entryRulefunctionLit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionLitRule()); }
	iv_rulefunctionLit=rulefunctionLit
	{ $current=$iv_rulefunctionLit.current; }
	EOF;

// Rule functionLit
rulefunctionLit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='func'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionLitAccess().getFuncKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionLitAccess().getFunctionFunctionParserRuleCall_1_0());
				}
				lv_function_1_0=rulefunction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionLitRule());
					}
					set(
						$current,
						"function",
						lv_function_1_0,
						"org.xtext.Go.function");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleprimaryExpr
entryRuleprimaryExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprRule()); }
	iv_ruleprimaryExpr=ruleprimaryExpr
	{ $current=$iv_ruleprimaryExpr.current; }
	EOF;

// Rule primaryExpr
ruleprimaryExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryExprAccess().getOperandOperandParserRuleCall_0_0_0());
					}
					lv_operand_0_0=ruleoperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryExprRule());
						}
						set(
							$current,
							"operand",
							lv_operand_0_0,
							"org.xtext.Go.operand");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryExprAccess().getConversionConversionParserRuleCall_0_1_0());
					}
					lv_conversion_1_0=ruleconversion
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryExprRule());
						}
						set(
							$current,
							"conversion",
							lv_conversion_1_0,
							"org.xtext.Go.conversion");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprSelectorPrimaryExprSelectorParserRuleCall_1_0());
				}
				lv_primaryExprSelector_2_0=ruleprimaryExprSelector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprRule());
					}
					set(
						$current,
						"primaryExprSelector",
						lv_primaryExprSelector_2_0,
						"org.xtext.Go.primaryExprSelector");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprIndexPrimaryExprIndexParserRuleCall_2_0());
				}
				lv_primaryExprIndex_3_0=ruleprimaryExprIndex
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprRule());
					}
					set(
						$current,
						"primaryExprIndex",
						lv_primaryExprIndex_3_0,
						"org.xtext.Go.primaryExprIndex");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprSlicePrimaryExprSliceParserRuleCall_3_0());
				}
				lv_primaryExprSlice_4_0=ruleprimaryExprSlice
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprRule());
					}
					set(
						$current,
						"primaryExprSlice",
						lv_primaryExprSlice_4_0,
						"org.xtext.Go.primaryExprSlice");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprTypeAssertionPrimaryExprTypeAssertionParserRuleCall_4_0());
				}
				lv_primaryExprTypeAssertion_5_0=ruleprimaryExprTypeAssertion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprRule());
					}
					set(
						$current,
						"primaryExprTypeAssertion",
						lv_primaryExprTypeAssertion_5_0,
						"org.xtext.Go.primaryExprTypeAssertion");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprArgumentsPrimaryExprArgumentsParserRuleCall_5_0());
				}
				lv_primaryExprArguments_6_0=ruleprimaryExprArguments
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprRule());
					}
					set(
						$current,
						"primaryExprArguments",
						lv_primaryExprArguments_6_0,
						"org.xtext.Go.primaryExprArguments");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleprimaryExprStuff
entryRuleprimaryExprStuff returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprStuffRule()); }
	iv_ruleprimaryExprStuff=ruleprimaryExprStuff
	{ $current=$iv_ruleprimaryExprStuff.current; }
	EOF;

// Rule primaryExprStuff
ruleprimaryExprStuff returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprStuffAccess().getSelectorSelectorParserRuleCall_0_0());
				}
				lv_selector_0_0=ruleselector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprStuffRule());
					}
					set(
						$current,
						"selector",
						lv_selector_0_0,
						"org.xtext.Go.selector");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprStuffAccess().getIndexIndexParserRuleCall_1_0());
				}
				lv_index_1_0=ruleindex
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprStuffRule());
					}
					set(
						$current,
						"index",
						lv_index_1_0,
						"org.xtext.Go.index");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprStuffAccess().getSliceSliceParserRuleCall_2_0());
				}
				lv_slice_2_0=ruleslice
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprStuffRule());
					}
					set(
						$current,
						"slice",
						lv_slice_2_0,
						"org.xtext.Go.slice");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprStuffAccess().getTypeAssertionTypeAssertionParserRuleCall_3_0());
				}
				lv_typeAssertion_3_0=ruletypeAssertion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprStuffRule());
					}
					set(
						$current,
						"typeAssertion",
						lv_typeAssertion_3_0,
						"org.xtext.Go.typeAssertion");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprStuffAccess().getArgumentsArgumentsParserRuleCall_4_0());
				}
				lv_arguments_4_0=rulearguments
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprStuffRule());
					}
					set(
						$current,
						"arguments",
						lv_arguments_4_0,
						"org.xtext.Go.arguments");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleprimaryExprSelector
entryRuleprimaryExprSelector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprSelectorRule()); }
	iv_ruleprimaryExprSelector=ruleprimaryExprSelector
	{ $current=$iv_ruleprimaryExprSelector.current; }
	EOF;

// Rule primaryExprSelector
ruleprimaryExprSelector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprSelectorAccess().getPrimaryExprStuffPrimaryExprStuffParserRuleCall_0_0());
				}
				lv_primaryExprStuff_0_0=ruleprimaryExprStuff
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprSelectorRule());
					}
					set(
						$current,
						"primaryExprStuff",
						lv_primaryExprStuff_0_0,
						"org.xtext.Go.primaryExprStuff");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprSelectorAccess().getPrimaryExprSelectorPrimaryExprSelectorParserRuleCall_1_0());
				}
				lv_primaryExprSelector_1_0=ruleprimaryExprSelector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprSelectorRule());
					}
					set(
						$current,
						"primaryExprSelector",
						lv_primaryExprSelector_1_0,
						"org.xtext.Go.primaryExprSelector");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)?
;

// Entry rule entryRuleprimaryExprIndex
entryRuleprimaryExprIndex returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprIndexRule()); }
	iv_ruleprimaryExprIndex=ruleprimaryExprIndex
	{ $current=$iv_ruleprimaryExprIndex.current; }
	EOF;

// Rule primaryExprIndex
ruleprimaryExprIndex returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprIndexAccess().getPrimaryExprStuffPrimaryExprStuffParserRuleCall_0_0());
				}
				lv_primaryExprStuff_0_0=ruleprimaryExprStuff
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprIndexRule());
					}
					set(
						$current,
						"primaryExprStuff",
						lv_primaryExprStuff_0_0,
						"org.xtext.Go.primaryExprStuff");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprIndexAccess().getPrimaryExprIndexPrimaryExprIndexParserRuleCall_1_0());
				}
				lv_primaryExprIndex_1_0=ruleprimaryExprIndex
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprIndexRule());
					}
					set(
						$current,
						"primaryExprIndex",
						lv_primaryExprIndex_1_0,
						"org.xtext.Go.primaryExprIndex");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)?
;

// Entry rule entryRuleprimaryExprSlice
entryRuleprimaryExprSlice returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprSliceRule()); }
	iv_ruleprimaryExprSlice=ruleprimaryExprSlice
	{ $current=$iv_ruleprimaryExprSlice.current; }
	EOF;

// Rule primaryExprSlice
ruleprimaryExprSlice returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprSliceAccess().getPrimaryExprStuffPrimaryExprStuffParserRuleCall_0_0());
				}
				lv_primaryExprStuff_0_0=ruleprimaryExprStuff
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprSliceRule());
					}
					set(
						$current,
						"primaryExprStuff",
						lv_primaryExprStuff_0_0,
						"org.xtext.Go.primaryExprStuff");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprSliceAccess().getPrimaryExprSlicePrimaryExprSliceParserRuleCall_1_0());
				}
				lv_primaryExprSlice_1_0=ruleprimaryExprSlice
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprSliceRule());
					}
					set(
						$current,
						"primaryExprSlice",
						lv_primaryExprSlice_1_0,
						"org.xtext.Go.primaryExprSlice");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)?
;

// Entry rule entryRuleprimaryExprTypeAssertion
entryRuleprimaryExprTypeAssertion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprTypeAssertionRule()); }
	iv_ruleprimaryExprTypeAssertion=ruleprimaryExprTypeAssertion
	{ $current=$iv_ruleprimaryExprTypeAssertion.current; }
	EOF;

// Rule primaryExprTypeAssertion
ruleprimaryExprTypeAssertion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprTypeAssertionAccess().getPrimaryExprStuffPrimaryExprStuffParserRuleCall_0_0());
				}
				lv_primaryExprStuff_0_0=ruleprimaryExprStuff
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprTypeAssertionRule());
					}
					set(
						$current,
						"primaryExprStuff",
						lv_primaryExprStuff_0_0,
						"org.xtext.Go.primaryExprStuff");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprTypeAssertionAccess().getPrimaryExprTypeAssertionPrimaryExprTypeAssertionParserRuleCall_1_0());
				}
				lv_primaryExprTypeAssertion_1_0=ruleprimaryExprTypeAssertion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprTypeAssertionRule());
					}
					set(
						$current,
						"primaryExprTypeAssertion",
						lv_primaryExprTypeAssertion_1_0,
						"org.xtext.Go.primaryExprTypeAssertion");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)?
;

// Entry rule entryRuleprimaryExprArguments
entryRuleprimaryExprArguments returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprArgumentsRule()); }
	iv_ruleprimaryExprArguments=ruleprimaryExprArguments
	{ $current=$iv_ruleprimaryExprArguments.current; }
	EOF;

// Rule primaryExprArguments
ruleprimaryExprArguments returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprArgumentsAccess().getPrimaryExprStuffPrimaryExprStuffParserRuleCall_0_0());
				}
				lv_primaryExprStuff_0_0=ruleprimaryExprStuff
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprArgumentsRule());
					}
					set(
						$current,
						"primaryExprStuff",
						lv_primaryExprStuff_0_0,
						"org.xtext.Go.primaryExprStuff");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprArgumentsAccess().getPrimaryExprArgumentsPrimaryExprArgumentsParserRuleCall_1_0());
				}
				lv_primaryExprArguments_1_0=ruleprimaryExprArguments
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprArgumentsRule());
					}
					set(
						$current,
						"primaryExprArguments",
						lv_primaryExprArguments_1_0,
						"org.xtext.Go.primaryExprArguments");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)?
;

// Entry rule entryRuleselector
entryRuleselector returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSelectorRule()); }
	iv_ruleselector=ruleselector
	{ $current=$iv_ruleselector.current.getText(); }
	EOF;

// Rule selector
ruleselector returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSelectorAccess().getFullStopKeyword_0());
		}
		this_IDENTIFIER_1=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_1);
		}
		{
			newLeafNode(this_IDENTIFIER_1, grammarAccess.getSelectorAccess().getIDENTIFIERTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleindex
entryRuleindex returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIndexRule()); }
	iv_ruleindex=ruleindex
	{ $current=$iv_ruleindex.current; }
	EOF;

// Rule index
ruleindex returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getIndexAccess().getLeftSquareBracketKeyword_0());
		}
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getIndexAccess().getExpressionParserRuleCall_1());
		}
		this_expression_1=ruleexpression
		{
			$current = $this_expression_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2=']'
		{
			newLeafNode(otherlv_2, grammarAccess.getIndexAccess().getRightSquareBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleslice
entryRuleslice returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSliceRule()); }
	iv_ruleslice=ruleslice
	{ $current=$iv_ruleslice.current; }
	EOF;

// Rule slice
ruleslice returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getSliceAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getSliceAccess().getExpressionExpressionParserRuleCall_1_0_0_0());
						}
						lv_expression_1_0=ruleexpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSliceRule());
							}
							set(
								$current,
								"expression",
								lv_expression_1_0,
								"org.xtext.Go.expression");
							afterParserOrEnumRuleCall();
						}
					)
				)?
				otherlv_2=':'
				{
					newLeafNode(otherlv_2, grammarAccess.getSliceAccess().getColonKeyword_1_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSliceAccess().getExpressionExpressionParserRuleCall_1_0_2_0());
						}
						lv_expression_3_0=ruleexpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSliceRule());
							}
							set(
								$current,
								"expression",
								lv_expression_3_0,
								"org.xtext.Go.expression");
							afterParserOrEnumRuleCall();
						}
					)
				)?
			)
			    |
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getSliceAccess().getExpressionExpressionParserRuleCall_1_1_0_0());
						}
						lv_expression_4_0=ruleexpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSliceRule());
							}
							set(
								$current,
								"expression",
								lv_expression_4_0,
								"org.xtext.Go.expression");
							afterParserOrEnumRuleCall();
						}
					)
				)?
				otherlv_5=':'
				{
					newLeafNode(otherlv_5, grammarAccess.getSliceAccess().getColonKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSliceAccess().getExpressionExpressionParserRuleCall_1_1_2_0());
						}
						lv_expression_6_0=ruleexpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSliceRule());
							}
							set(
								$current,
								"expression",
								lv_expression_6_0,
								"org.xtext.Go.expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_7=':'
				{
					newLeafNode(otherlv_7, grammarAccess.getSliceAccess().getColonKeyword_1_1_3());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSliceAccess().getExpressionExpressionParserRuleCall_1_1_4_0());
						}
						lv_expression_8_0=ruleexpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSliceRule());
							}
							set(
								$current,
								"expression",
								lv_expression_8_0,
								"org.xtext.Go.expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
		otherlv_9=']'
		{
			newLeafNode(otherlv_9, grammarAccess.getSliceAccess().getRightSquareBracketKeyword_2());
		}
	)
;

// Entry rule entryRuletypeAssertion
entryRuletypeAssertion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeAssertionRule()); }
	iv_ruletypeAssertion=ruletypeAssertion
	{ $current=$iv_ruletypeAssertion.current; }
	EOF;

// Rule typeAssertion
ruletypeAssertion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='.'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeAssertionAccess().getFullStopKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getTypeAssertionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAssertionAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeAssertionRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.xtext.Go.type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getTypeAssertionAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRulearguments
entryRulearguments returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArgumentsRule()); }
	iv_rulearguments=rulearguments
	{ $current=$iv_rulearguments.current; }
	EOF;

// Rule arguments
rulearguments returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getArgumentsAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getArgumentsAccess().getExpressionListExpressionListParserRuleCall_1_0_0_0());
						}
						lv_expressionList_1_0=ruleexpressionList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getArgumentsRule());
							}
							set(
								$current,
								"expressionList",
								lv_expressionList_1_0,
								"org.xtext.Go.expressionList");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getArgumentsAccess().getTypeTypeParserRuleCall_1_0_1_0_0());
							}
							lv_type_2_0=ruletype
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getArgumentsRule());
								}
								set(
									$current,
									"type",
									lv_type_2_0,
									"org.xtext.Go.type");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_3=','
						{
							newLeafNode(otherlv_3, grammarAccess.getArgumentsAccess().getCommaKeyword_1_0_1_1_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getArgumentsAccess().getExpressionListExpressionListParserRuleCall_1_0_1_1_1_0());
								}
								lv_expressionList_4_0=ruleexpressionList
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getArgumentsRule());
									}
									set(
										$current,
										"expressionList",
										lv_expressionList_4_0,
										"org.xtext.Go.expressionList");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)?
				)
			)
			(
				otherlv_5='...'
				{
					newLeafNode(otherlv_5, grammarAccess.getArgumentsAccess().getFullStopFullStopFullStopKeyword_1_1());
				}
			)?
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getArgumentsAccess().getCommaKeyword_1_2());
				}
			)?
		)?
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getArgumentsAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRulemethodExpr
entryRulemethodExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodExprRule()); }
	iv_rulemethodExpr=rulemethodExpr
	{ $current=$iv_rulemethodExpr.current; }
	EOF;

// Rule methodExpr
rulemethodExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodExprAccess().getReceiverTypeReceiverTypeParserRuleCall_0_0());
				}
				lv_receiverType_0_0=rulereceiverType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodExprRule());
					}
					set(
						$current,
						"receiverType",
						lv_receiverType_0_0,
						"org.xtext.Go.receiverType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getMethodExprAccess().getFullStopKeyword_1());
		}
		this_IDENTIFIER_2=RULE_IDENTIFIER
		{
			newLeafNode(this_IDENTIFIER_2, grammarAccess.getMethodExprAccess().getIDENTIFIERTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRulereceiverType
entryRulereceiverType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReceiverTypeRule()); }
	iv_rulereceiverType=rulereceiverType
	{ $current=$iv_rulereceiverType.current; }
	EOF;

// Rule receiverType
rulereceiverType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getReceiverTypeAccess().getTypeNameTypeNameParserRuleCall_0_0());
				}
				lv_typeName_0_0=ruletypeName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReceiverTypeRule());
					}
					set(
						$current,
						"typeName",
						lv_typeName_0_0,
						"org.xtext.Go.typeName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getReceiverTypeAccess().getLeftParenthesisKeyword_1_0());
			}
			otherlv_2='*'
			{
				newLeafNode(otherlv_2, grammarAccess.getReceiverTypeAccess().getAsteriskKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getReceiverTypeAccess().getTypeNameTypeNameParserRuleCall_1_2_0());
					}
					lv_typeName_3_0=ruletypeName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReceiverTypeRule());
						}
						set(
							$current,
							"typeName",
							lv_typeName_3_0,
							"org.xtext.Go.typeName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getReceiverTypeAccess().getRightParenthesisKeyword_1_3());
			}
		)
		    |
		(
			otherlv_5='('
			{
				newLeafNode(otherlv_5, grammarAccess.getReceiverTypeAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getReceiverTypeAccess().getReceiverTypeReceiverTypeParserRuleCall_2_1_0());
					}
					lv_receiverType_6_0=rulereceiverType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReceiverTypeRule());
						}
						set(
							$current,
							"receiverType",
							lv_receiverType_6_0,
							"org.xtext.Go.receiverType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getReceiverTypeAccess().getRightParenthesisKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRuleexpression
entryRuleexpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleexpression=ruleexpression
	{ $current=$iv_ruleexpression.current; }
	EOF;

// Rule expression
ruleexpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getUnaryExprUnaryExprParserRuleCall_0_0());
				}
				lv_unaryExpr_0_0=ruleunaryExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"unaryExpr",
						lv_unaryExpr_0_0,
						"org.xtext.Go.unaryExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getExpressionMatchedExpressionMatchedParserRuleCall_1_0());
				}
				lv_expressionMatched_1_0=ruleexpressionMatched
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"expressionMatched",
						lv_expressionMatched_1_0,
						"org.xtext.Go.expressionMatched");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleexpressionMatched
entryRuleexpressionMatched returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionMatchedRule()); }
	iv_ruleexpressionMatched=ruleexpressionMatched
	{ $current=$iv_ruleexpressionMatched.current; }
	EOF;

// Rule expressionMatched
ruleexpressionMatched returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_BINARY_OP_0=RULE_BINARY_OP
		{
			newLeafNode(this_BINARY_OP_0, grammarAccess.getExpressionMatchedAccess().getBINARY_OPTerminalRuleCall_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionMatchedAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionMatchedRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.xtext.Go.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)?
;

// Entry rule entryRuleunaryExpr
entryRuleunaryExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryExprRule()); }
	iv_ruleunaryExpr=ruleunaryExpr
	{ $current=$iv_ruleunaryExpr.current; }
	EOF;

// Rule unaryExpr
ruleunaryExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryExprAccess().getPrimaryExprPrimaryExprParserRuleCall_0_0());
				}
				lv_primaryExpr_0_0=ruleprimaryExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryExprRule());
					}
					set(
						$current,
						"primaryExpr",
						lv_primaryExpr_0_0,
						"org.xtext.Go.primaryExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				otherlv_1='+'
				{
					newLeafNode(otherlv_1, grammarAccess.getUnaryExprAccess().getPlusSignKeyword_1_0_0());
				}
				    |
				otherlv_2='-'
				{
					newLeafNode(otherlv_2, grammarAccess.getUnaryExprAccess().getHyphenMinusKeyword_1_0_1());
				}
				    |
				otherlv_3='!'
				{
					newLeafNode(otherlv_3, grammarAccess.getUnaryExprAccess().getExclamationMarkKeyword_1_0_2());
				}
				    |
				otherlv_4='^'
				{
					newLeafNode(otherlv_4, grammarAccess.getUnaryExprAccess().getCircumflexAccentKeyword_1_0_3());
				}
				    |
				otherlv_5='*'
				{
					newLeafNode(otherlv_5, grammarAccess.getUnaryExprAccess().getAsteriskKeyword_1_0_4());
				}
				    |
				otherlv_6='&'
				{
					newLeafNode(otherlv_6, grammarAccess.getUnaryExprAccess().getAmpersandKeyword_1_0_5());
				}
				    |
				otherlv_7='<-'
				{
					newLeafNode(otherlv_7, grammarAccess.getUnaryExprAccess().getLessThanSignHyphenMinusKeyword_1_0_6());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getUnaryExprAccess().getUnaryExprUnaryExprParserRuleCall_1_1_0());
					}
					lv_unaryExpr_8_0=ruleunaryExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnaryExprRule());
						}
						set(
							$current,
							"unaryExpr",
							lv_unaryExpr_8_0,
							"org.xtext.Go.unaryExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleconversion
entryRuleconversion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConversionRule()); }
	iv_ruleconversion=ruleconversion
	{ $current=$iv_ruleconversion.current; }
	EOF;

// Rule conversion
ruleconversion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConversionAccess().getTypeTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConversionRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.xtext.Go.type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getConversionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConversionAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConversionRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"org.xtext.Go.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getConversionAccess().getCommaKeyword_3());
			}
		)?
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getConversionAccess().getRightParenthesisKeyword_4());
		}
	)
;

RULE_IDENTIFIER : RULE_LETTER (RULE_LETTER|RULE_UNICODE_DIGIT)*;

RULE_BINARY_OP : ('||'|'&&'|RULE_REL_OP|RULE_ADD_OP|RULE_MUL_OP);

fragment RULE_REL_OP : ('=='|'!='|'<'|'<='|'>'|'>=');

fragment RULE_ADD_OP : ('+'|'-'|'|'|'^');

fragment RULE_MUL_OP : ('*'|'/'|'%'|'<<'|'>>'|'&'|'&^');

fragment RULE_UNARY_OP : ('+'|'-'|'!'|'^'|'*'|'&'|'<-');

RULE_INT_LIT : (RULE_DECIMAL_LIT|RULE_OCTAL_LIT|RULE_HEX_LIT);

fragment RULE_DECIMAL_LIT : '1'..'9' RULE_DECIMAL_DIGIT*;

fragment RULE_OCTAL_LIT : '0' RULE_OCTAL_DIGIT*;

fragment RULE_HEX_LIT : '0' ('X'|'x') RULE_HEX_DIGIT+;

RULE_FLOAT_LIT : (RULE_DECIMALS '.' RULE_DECIMALS? RULE_EXPONENT?|RULE_DECIMALS RULE_EXPONENT|'.' RULE_DECIMALS RULE_EXPONENT?);

fragment RULE_DECIMALS : RULE_DECIMAL_DIGIT+;

fragment RULE_EXPONENT : ('e'|'E') ('+'|'-')? RULE_DECIMALS;

RULE_IMAGINARY_LIT : (RULE_DECIMALS|RULE_FLOAT_LIT) 'i';

RULE_RUNE_LIT : '\'' (RULE_UNICODE_VALUE|RULE_BYTE_VALUE) '\'';

fragment RULE_UNICODE_VALUE : (RULE_UNICODE_CHAR|RULE_LITTLE_U_VALUE|RULE_BIG_U_VALUE|RULE_ESCAPED_CHAR);

fragment RULE_BYTE_VALUE : (RULE_OCTAL_BYTE_VALUE|RULE_HEX_BYTE_VALUE);

fragment RULE_OCTAL_BYTE_VALUE : '\\' RULE_OCTAL_DIGIT RULE_OCTAL_DIGIT RULE_OCTAL_DIGIT;

fragment RULE_HEX_BYTE_VALUE : '\\x' RULE_HEX_DIGIT RULE_HEX_DIGIT;

fragment RULE_LITTLE_U_VALUE : '\\u' RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT;

fragment RULE_BIG_U_VALUE : '\\U' RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT;

fragment RULE_ESCAPED_CHAR : '\\' ('a'|'b'|'f'|'n'|'r'|'t'|'v'|'\\'|'\''|'"');

RULE_STRING_LIT : (RULE_RAW_STRING_LIT|RULE_INTERPRETED_STRING_LIT);

fragment RULE_RAW_STRING_LIT : '\'' (RULE_UNICODE_CHAR|RULE_NEWLINE)* '\'';

fragment RULE_INTERPRETED_STRING_LIT : '"' (RULE_UNICODE_VALUE|RULE_BYTE_VALUE)* '"';

fragment RULE_LETTER : (RULE_UNICODE_LETTER|'_');

fragment RULE_DECIMAL_DIGIT : '0'..'9';

fragment RULE_OCTAL_DIGIT : '0'..'7';

fragment RULE_HEX_DIGIT : ('0'..'9'|'A'..'F'|'a'..'f');

fragment RULE_NEWLINE : '\n';

fragment RULE_UNICODE_CHAR : ('A'..'Z'|'a'..'z');

fragment RULE_UNICODE_DIGIT : ('0..9'|'\u0660..\u0669'|'\u06F0..\u06F9'|'\u0966..\u096F'|'\u09E6..\u09EF'|'\u0A66..\u0A6F'|'\u0AE6..\u0AEF'|'\u0B66..\u0B6F'|'\u0BE7..\u0BEF'|'\u0C66..\u0C6F'|'\u0CE6..\u0CEF'|'\u0D66..\u0D6F'|'\u0E50..\u0E59'|'\u0ED0..\u0ED9'|'\u0F20..\u0F29'|'\u1040..\u1049'|'\u1369..\u1371'|'\u17E0..\u17E9'|'\u1810..\u1819'|'\uFF10..\uFF19');

fragment RULE_UNICODE_LETTER : ('A..Z'|'a..z'|'\u00AA'|'\u00B5'|'\u00BA'|'\u00C0..\u00D6'|'\u00D8..\u00F6'|'\u00F8..\u021F'|'\u0222..\u0233'|'\u0250..\u02AD'|'\u02B0..\u02B8'|'\u02BB..\u02C1'|'\u02D0..\u02D1'|'\u02E0..\u02E4'|'\u02EE'|'\u037A'|'\u0386'|'\u0388..\u038A'|'\u038C'|'\u038E..\u03A1'|'\u03A3..\u03CE'|'\u03D0..\u03D7'|'\u03DA..\u03F3'|'\u0400..\u0481'|'\u048C..\u04C4'|'\u04C7..\u04C8'|'\u04CB..\u04CC'|'\u04D0..\u04F5'|'\u04F8..\u04F9'|'\u0531..\u0556'|'\u0559'|'\u0561..\u0587'|'\u05D0..\u05EA'|'\u05F0..\u05F2'|'\u0621..\u063A'|'\u0640..\u064A'|'\u0671..\u06D3'|'\u06D5'|'\u06E5..\u06E6'|'\u06FA..\u06FC'|'\u0710'|'\u0712..\u072C'|'\u0780..\u07A5'|'\u0905..\u0939'|'\u093D'|'\u0950'|'\u0958..\u0961'|'\u0985..\u098C'|'\u098F..\u0990'|'\u0993..\u09A8'|'\u09AA..\u09B0'|'\u09B2'|'\u09B6..\u09B9'|'\u09DC..\u09DD'|'\u09DF..\u09E1'|'\u09F0..\u09F1'|'\u0A05..\u0A0A'|'\u0A0F..\u0A10'|'\u0A13..\u0A28'|'\u0A2A..\u0A30'|'\u0A32..\u0A33'|'\u0A35..\u0A36'|'\u0A38..\u0A39'|'\u0A59..\u0A5C'|'\u0A5E'|'\u0A72..\u0A74'|'\u0A85..\u0A8B'|'\u0A8D'|'\u0A8F..\u0A91'|'\u0A93..\u0AA8'|'\u0AAA..\u0AB0'|'\u0AB2..\u0AB3'|'\u0AB5..\u0AB9'|'\u0ABD'|'\u0AD0'|'\u0AE0'|'\u0B05..\u0B0C'|'\u0B0F..\u0B10'|'\u0B13..\u0B28'|'\u0B2A..\u0B30'|'\u0B32..\u0B33'|'\u0B36..\u0B39'|'\u0B3D'|'\u0B5C..\u0B5D'|'\u0B5F..\u0B61'|'\u0B85..\u0B8A'|'\u0B8E..\u0B90'|'\u0B92..\u0B95'|'\u0B99..\u0B9A'|'\u0B9C'|'\u0B9E..\u0B9F'|'\u0BA3..\u0BA4'|'\u0BA8..\u0BAA'|'\u0BAE..\u0BB5'|'\u0BB7..\u0BB9'|'\u0C05..\u0C0C'|'\u0C0E..\u0C10'|'\u0C12..\u0C28'|'\u0C2A..\u0C33'|'\u0C35..\u0C39'|'\u0C60..\u0C61'|'\u0C85..\u0C8C'|'\u0C8E..\u0C90'|'\u0C92..\u0CA8'|'\u0CAA..\u0CB3'|'\u0CB5..\u0CB9'|'\u0CDE'|'\u0CE0..\u0CE1'|'\u0D05..\u0D0C'|'\u0D0E..\u0D10'|'\u0D12..\u0D28'|'\u0D2A..\u0D39'|'\u0D60..\u0D61'|'\u0D85..\u0D96'|'\u0D9A..\u0DB1'|'\u0DB3..\u0DBB'|'\u0DBD'|'\u0DC0..\u0DC6'|'\u0E01..\u0E30'|'\u0E32..\u0E33'|'\u0E40..\u0E46'|'\u0E81..\u0E82'|'\u0E84'|'\u0E87..\u0E88'|'\u0E8A'|'\u0E8D'|'\u0E94..\u0E97'|'\u0E99..\u0E9F'|'\u0EA1..\u0EA3'|'\u0EA5'|'\u0EA7'|'\u0EAA..\u0EAB'|'\u0EAD..\u0EB0'|'\u0EB2..\u0EB3'|'\u0EBD..\u0EC4'|'\u0EC6'|'\u0EDC..\u0EDD'|'\u0F00'|'\u0F40..\u0F6A'|'\u0F88..\u0F8B'|'\u1000..\u1021'|'\u1023..\u1027'|'\u1029..\u102A'|'\u1050..\u1055'|'\u10A0..\u10C5'|'\u10D0..\u10F6'|'\u1100..\u1159'|'\u115F..\u11A2'|'\u11A8..\u11F9'|'\u1200..\u1206'|'\u1208..\u1246'|'\u1248'|'\u124A..\u124D'|'\u1250..\u1256'|'\u1258'|'\u125A..\u125D'|'\u1260..\u1286'|'\u1288'|'\u128A..\u128D'|'\u1290..\u12AE'|'\u12B0'|'\u12B2..\u12B5'|'\u12B8..\u12BE'|'\u12C0'|'\u12C2..\u12C5'|'\u12C8..\u12CE'|'\u12D0..\u12D6'|'\u12D8..\u12EE'|'\u12F0..\u130E'|'\u1310'|'\u1312..\u1315'|'\u1318..\u131E'|'\u1320..\u1346'|'\u1348..\u135A'|'\u13A0..\u13B0'|'\u13B1..\u13F4'|'\u1401..\u1676'|'\u1681..\u169A'|'\u16A0..\u16EA'|'\u1780..\u17B3'|'\u1820..\u1877'|'\u1880..\u18A8'|'\u1E00..\u1E9B'|'\u1EA0..\u1EE0'|'\u1EE1..\u1EF9'|'\u1F00..\u1F15'|'\u1F18..\u1F1D'|'\u1F20..\u1F39'|'\u1F3A..\u1F45'|'\u1F48..\u1F4D'|'\u1F50..\u1F57'|'\u1F59'|'\u1F5B'|'\u1F5D'|'\u1F5F..\u1F7D'|'\u1F80..\u1FB4'|'\u1FB6..\u1FBC'|'\u1FBE'|'\u1FC2..\u1FC4'|'\u1FC6..\u1FCC'|'\u1FD0..\u1FD3'|'\u1FD6..\u1FDB'|'\u1FE0..\u1FEC'|'\u1FF2..\u1FF4'|'\u1FF6..\u1FFC'|'\u207F'|'\u2102'|'\u2107'|'\u210A..\u2113'|'\u2115'|'\u2119..\u211D'|'\u2124'|'\u2126'|'\u2128'|'\u212A..\u212D'|'\u212F..\u2131'|'\u2133..\u2139'|'\u2160..\u2183'|'\u3005..\u3007'|'\u3021..\u3029'|'\u3031..\u3035'|'\u3038..\u303A'|'\u3041..\u3094'|'\u309D..\u309E'|'\u30A1..\u30FA'|'\u30FC..\u30FE'|'\u3105..\u312C'|'\u3131..\u318E'|'\u31A0..\u31B7'|'\u3400'|'\u4DB5'|'\u4E00'|'\u9FA5'|'\uA000..\uA48C'|'\uAC00'|'\uD7A3'|'\uF900..\uFA2D'|'\uFB00..\uFB06'|'\uFB13..\uFB17'|'\uFB1D'|'\uFB1F..\uFB28'|'\uFB2A..\uFB36'|'\uFB38..\uFB3C'|'\uFB3E'|'\uFB40..\uFB41'|'\uFB43..\uFB44'|'\uFB46..\uFBB1'|'\uFBD3..\uFD3D'|'\uFD50..\uFD8F'|'\uFD92..\uFDC7'|'\uFDF0..\uFDFB'|'\uFE70..\uFE72'|'\uFE74'|'\uFE76..\uFEFC'|'\uFF21..\uFF3A'|'\uFF41..\uFF5A'|'\uFF66..\uFFBE'|'\uFFC2..\uFFC7'|'\uFFCA..\uFFCF'|'\uFFD2..\uFFD7'|'\uFFDA..\uFFDC');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
