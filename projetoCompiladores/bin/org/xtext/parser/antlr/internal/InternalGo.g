/*
 * generated by Xtext 2.14.0
 */
grammar InternalGo;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.GoGrammarAccess;

}

@parser::members {

 	private GoGrammarAccess grammarAccess;

    public InternalGoParser(TokenStream input, GoGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected GoGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_greetings_0_0='oi'
			{
				newLeafNode(lv_greetings_0_0, grammarAccess.getModelAccess().getGreetingsOiKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getModelRule());
				}
				addWithLastConsumed($current, "greetings", lv_greetings_0_0, "oi");
			}
		)
	)
;


// Rule OPERATORS
ruleOPERATORS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_BINARY_OP_0=RULE_BINARY_OP
		{
			$current.merge(this_BINARY_OP_0);
		}
		{
			newLeafNode(this_BINARY_OP_0, grammarAccess.getOPERATORSAccess().getBINARY_OPTerminalRuleCall_0());
		}
		    |
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOPERATORSAccess().getLeftParenthesisKeyword_1());
		}
		    |
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOPERATORSAccess().getRightParenthesisKeyword_2());
		}
		    |
		kw='['
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOPERATORSAccess().getLeftSquareBracketKeyword_3());
		}
		    |
		kw=']'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOPERATORSAccess().getRightSquareBracketKeyword_4());
		}
		    |
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOPERATORSAccess().getLeftCurlyBracketKeyword_5());
		}
		    |
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOPERATORSAccess().getRightCurlyBracketKeyword_6());
		}
		    |
		kw='++'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOPERATORSAccess().getPlusSignPlusSignKeyword_7());
		}
		    |
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOPERATORSAccess().getEqualsSignKeyword_8());
		}
		    |
		kw=':='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOPERATORSAccess().getColonEqualsSignKeyword_9());
		}
		    |
		kw=','
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOPERATORSAccess().getCommaKeyword_10());
		}
		    |
		this_SEMICOLON_11=RULE_SEMICOLON
		{
			$current.merge(this_SEMICOLON_11);
		}
		{
			newLeafNode(this_SEMICOLON_11, grammarAccess.getOPERATORSAccess().getSEMICOLONTerminalRuleCall_11());
		}
		    |
		kw='--'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOPERATORSAccess().getHyphenMinusHyphenMinusKeyword_12());
		}
		    |
		kw='...'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOPERATORSAccess().getFullStopFullStopFullStopKeyword_13());
		}
		    |
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOPERATORSAccess().getFullStopKeyword_14());
		}
		    |
		kw=':'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOPERATORSAccess().getColonKeyword_15());
		}
		    |
		this_ASSIGN_OP_16=RULE_ASSIGN_OP
		{
			$current.merge(this_ASSIGN_OP_16);
		}
		{
			newLeafNode(this_ASSIGN_OP_16, grammarAccess.getOPERATORSAccess().getASSIGN_OPTerminalRuleCall_16());
		}
	)
;

// Entry rule entryRuleInt_lit
entryRuleInt_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getInt_litRule()); }
	iv_ruleInt_lit=ruleInt_lit
	{ $current=$iv_ruleInt_lit.current.getText(); }
	EOF;

// Rule Int_lit
ruleInt_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getInt_litAccess().getINTTerminalRuleCall_0());
		}
		    |
		this_OCTAL_LIT_1=RULE_OCTAL_LIT
		{
			$current.merge(this_OCTAL_LIT_1);
		}
		{
			newLeafNode(this_OCTAL_LIT_1, grammarAccess.getInt_litAccess().getOCTAL_LITTerminalRuleCall_1());
		}
		    |
		this_HEX_LIT_2=RULE_HEX_LIT
		{
			$current.merge(this_HEX_LIT_2);
		}
		{
			newLeafNode(this_HEX_LIT_2, grammarAccess.getInt_litAccess().getHEX_LITTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleFloat_lit
entryRuleFloat_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFloat_litRule()); }
	iv_ruleFloat_lit=ruleFloat_lit
	{ $current=$iv_ruleFloat_lit.current.getText(); }
	EOF;

// Rule Float_lit
ruleFloat_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getFloat_litAccess().getINTTerminalRuleCall_0());
		}
		(
			(
				kw='.'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getFloat_litAccess().getFullStopKeyword_1_0_0());
				}
				(
					this_INT_2=RULE_INT
					{
						$current.merge(this_INT_2);
					}
					{
						newLeafNode(this_INT_2, grammarAccess.getFloat_litAccess().getINTTerminalRuleCall_1_0_1());
					}
				)?
				(
					{
						newCompositeNode(grammarAccess.getFloat_litAccess().getExponentParserRuleCall_1_0_2());
					}
					this_Exponent_3=ruleExponent
					{
						$current.merge(this_Exponent_3);
					}
					{
						afterParserOrEnumRuleCall();
					}
				)?
			)
			    |
			{
				newCompositeNode(grammarAccess.getFloat_litAccess().getExponentParserRuleCall_1_1());
			}
			this_Exponent_4=ruleExponent
			{
				$current.merge(this_Exponent_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFloat_litAccess().getFullStopKeyword_2());
		}
		this_INT_6=RULE_INT
		{
			$current.merge(this_INT_6);
		}
		{
			newLeafNode(this_INT_6, grammarAccess.getFloat_litAccess().getINTTerminalRuleCall_3());
		}
		(
			{
				newCompositeNode(grammarAccess.getFloat_litAccess().getExponentParserRuleCall_4());
			}
			this_Exponent_7=ruleExponent
			{
				$current.merge(this_Exponent_7);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleExponent
entryRuleExponent returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExponentRule()); }
	iv_ruleExponent=ruleExponent
	{ $current=$iv_ruleExponent.current.getText(); }
	EOF;

// Rule Exponent
ruleExponent returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='E'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExponentAccess().getEKeyword_0_0());
			}
			    |
			kw='e'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExponentAccess().getEKeyword_0_1());
			}
		)
		(
			kw='+'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExponentAccess().getPlusSignKeyword_1_0());
			}
			    |
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExponentAccess().getHyphenMinusKeyword_1_1());
			}
		)?
		this_INT_4=RULE_INT
		{
			$current.merge(this_INT_4);
		}
		{
			newLeafNode(this_INT_4, grammarAccess.getExponentAccess().getINTTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleImaginary_lit
entryRuleImaginary_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getImaginary_litRule()); }
	iv_ruleImaginary_lit=ruleImaginary_lit
	{ $current=$iv_ruleImaginary_lit.current.getText(); }
	EOF;

// Rule Imaginary_lit
ruleImaginary_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_INT_0=RULE_INT
			{
				$current.merge(this_INT_0);
			}
			{
				newLeafNode(this_INT_0, grammarAccess.getImaginary_litAccess().getINTTerminalRuleCall_0_0());
			}
			    |
			{
				newCompositeNode(grammarAccess.getImaginary_litAccess().getFloat_litParserRuleCall_0_1());
			}
			this_Float_lit_1=ruleFloat_lit
			{
				$current.merge(this_Float_lit_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		kw='i'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getImaginary_litAccess().getIKeyword_1());
		}
	)
;

// Entry rule entryRuleRune_lit
entryRuleRune_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRune_litRule()); }
	iv_ruleRune_lit=ruleRune_lit
	{ $current=$iv_ruleRune_lit.current.getText(); }
	EOF;

// Rule Rune_lit
ruleRune_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='\''
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRune_litAccess().getApostropheKeyword_0());
		}
		(
			this_UNICODE_VALUE_1=RULE_UNICODE_VALUE
			{
				$current.merge(this_UNICODE_VALUE_1);
			}
			{
				newLeafNode(this_UNICODE_VALUE_1, grammarAccess.getRune_litAccess().getUNICODE_VALUETerminalRuleCall_1_0());
			}
			    |
			{
				newCompositeNode(grammarAccess.getRune_litAccess().getByte_valueParserRuleCall_1_1());
			}
			this_Byte_value_2=ruleByte_value
			{
				$current.merge(this_Byte_value_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		kw='\''
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRune_litAccess().getApostropheKeyword_2());
		}
	)
;

// Entry rule entryRuleByte_value
entryRuleByte_value returns [String current=null]:
	{ newCompositeNode(grammarAccess.getByte_valueRule()); }
	iv_ruleByte_value=ruleByte_value
	{ $current=$iv_ruleByte_value.current.getText(); }
	EOF;

// Rule Byte_value
ruleByte_value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_OCTAL_BYTE_VALUE_0=RULE_OCTAL_BYTE_VALUE
		{
			$current.merge(this_OCTAL_BYTE_VALUE_0);
		}
		{
			newLeafNode(this_OCTAL_BYTE_VALUE_0, grammarAccess.getByte_valueAccess().getOCTAL_BYTE_VALUETerminalRuleCall_0());
		}
		    |
		this_HEX_BYTE_VALUE_1=RULE_HEX_BYTE_VALUE
		{
			$current.merge(this_HEX_BYTE_VALUE_1);
		}
		{
			newLeafNode(this_HEX_BYTE_VALUE_1, grammarAccess.getByte_valueAccess().getHEX_BYTE_VALUETerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleString_lit
entryRuleString_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getString_litRule()); }
	iv_ruleString_lit=ruleString_lit
	{ $current=$iv_ruleString_lit.current.getText(); }
	EOF;

// Rule String_lit
ruleString_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_RAW_STRING_LIT_0=RULE_RAW_STRING_LIT
		{
			$current.merge(this_RAW_STRING_LIT_0);
		}
		{
			newLeafNode(this_RAW_STRING_LIT_0, grammarAccess.getString_litAccess().getRAW_STRING_LITTerminalRuleCall_0());
		}
		    |
		{
			newCompositeNode(grammarAccess.getString_litAccess().getInterpreted_string_litParserRuleCall_1());
		}
		this_Interpreted_string_lit_1=ruleInterpreted_string_lit
		{
			$current.merge(this_Interpreted_string_lit_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleInterpreted_string_lit
entryRuleInterpreted_string_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getInterpreted_string_litRule()); }
	iv_ruleInterpreted_string_lit=ruleInterpreted_string_lit
	{ $current=$iv_ruleInterpreted_string_lit.current.getText(); }
	EOF;

// Rule Interpreted_string_lit
ruleInterpreted_string_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='"'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInterpreted_string_litAccess().getQuotationMarkKeyword_0());
		}
		(
			this_UNICODE_VALUE_1=RULE_UNICODE_VALUE
			{
				$current.merge(this_UNICODE_VALUE_1);
			}
			{
				newLeafNode(this_UNICODE_VALUE_1, grammarAccess.getInterpreted_string_litAccess().getUNICODE_VALUETerminalRuleCall_1_0());
			}
			    |
			{
				newCompositeNode(grammarAccess.getInterpreted_string_litAccess().getByte_valueParserRuleCall_1_1());
			}
			this_Byte_value_2=ruleByte_value
			{
				$current.merge(this_Byte_value_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
		kw='"'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInterpreted_string_litAccess().getQuotationMarkKeyword_2());
		}
	)
;

// Entry rule entryRuleLiterals
entryRuleLiterals returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLiteralsRule()); }
	iv_ruleLiterals=ruleLiterals
	{ $current=$iv_ruleLiterals.current.getText(); }
	EOF;

// Rule Literals
ruleLiterals returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLiteralsAccess().getInt_litParserRuleCall_0());
		}
		this_Int_lit_0=ruleInt_lit
		{
			$current.merge(this_Int_lit_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralsAccess().getFloat_litParserRuleCall_1());
		}
		this_Float_lit_1=ruleFloat_lit
		{
			$current.merge(this_Float_lit_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralsAccess().getImaginary_litParserRuleCall_2());
		}
		this_Imaginary_lit_2=ruleImaginary_lit
		{
			$current.merge(this_Imaginary_lit_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralsAccess().getRune_litParserRuleCall_3());
		}
		this_Rune_lit_3=ruleRune_lit
		{
			$current.merge(this_Rune_lit_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralsAccess().getString_litParserRuleCall_4());
		}
		this_String_lit_4=ruleString_lit
		{
			$current.merge(this_String_lit_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleType
entryRuleType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current.getText(); }
	EOF;

// Rule Type
ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getTypeAccess().getType_nameParserRuleCall());
	}
	this_Type_name_0=ruleType_name
	{
		$current.merge(this_Type_name_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleType_name
entryRuleType_name returns [String current=null]:
	{ newCompositeNode(grammarAccess.getType_nameRule()); }
	iv_ruleType_name=ruleType_name
	{ $current=$iv_ruleType_name.current.getText(); }
	EOF;

// Rule Type_name
ruleType_name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENTIFIER_0=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_0);
		}
		{
			newLeafNode(this_IDENTIFIER_0, grammarAccess.getType_nameAccess().getIDENTIFIERTerminalRuleCall_0());
		}
		    |
		{
			newCompositeNode(grammarAccess.getType_nameAccess().getQualified_identParserRuleCall_1());
		}
		this_Qualified_ident_1=ruleQualified_ident
		{
			$current.merge(this_Qualified_ident_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleParameter_list
entryRuleParameter_list returns [String current=null]:
	{ newCompositeNode(grammarAccess.getParameter_listRule()); }
	iv_ruleParameter_list=ruleParameter_list
	{ $current=$iv_ruleParameter_list.current.getText(); }
	EOF;

// Rule Parameter_list
ruleParameter_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getParameter_listAccess().getParameter_declParserRuleCall_0());
		}
		this_Parameter_decl_0=ruleParameter_decl
		{
			$current.merge(this_Parameter_decl_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getParameter_listAccess().getCommaKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getParameter_listAccess().getParameter_declParserRuleCall_1_1());
			}
			this_Parameter_decl_2=ruleParameter_decl
			{
				$current.merge(this_Parameter_decl_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;


// Rule Parameter_decl
ruleParameter_decl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getParameter_declAccess().getIdentifier_listParserRuleCall_0());
			}
			this_Identifier_list_0=ruleIdentifier_list
			{
				$current.merge(this_Identifier_list_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		(
			kw='...'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getParameter_declAccess().getFullStopFullStopFullStopKeyword_1());
			}
		)?
		{
			newCompositeNode(grammarAccess.getParameter_declAccess().getTypeParserRuleCall_2());
		}
		this_Type_2=ruleType
		{
			$current.merge(this_Type_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIdentifier_list
entryRuleIdentifier_list returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIdentifier_listRule()); }
	iv_ruleIdentifier_list=ruleIdentifier_list
	{ $current=$iv_ruleIdentifier_list.current.getText(); }
	EOF;

// Rule Identifier_list
ruleIdentifier_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENTIFIER_0=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_0);
		}
		{
			newLeafNode(this_IDENTIFIER_0, grammarAccess.getIdentifier_listAccess().getIDENTIFIERTerminalRuleCall_0());
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIdentifier_listAccess().getCommaKeyword_1_0());
			}
			this_IDENTIFIER_2=RULE_IDENTIFIER
			{
				$current.merge(this_IDENTIFIER_2);
			}
			{
				newLeafNode(this_IDENTIFIER_2, grammarAccess.getIdentifier_listAccess().getIDENTIFIERTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleQualified_ident
entryRuleQualified_ident returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualified_identRule()); }
	iv_ruleQualified_ident=ruleQualified_ident
	{ $current=$iv_ruleQualified_ident.current.getText(); }
	EOF;

// Rule Qualified_ident
ruleQualified_ident returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENTIFIER_0=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_0);
		}
		{
			newLeafNode(this_IDENTIFIER_0, grammarAccess.getQualified_identAccess().getIDENTIFIERTerminalRuleCall_0());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQualified_identAccess().getFullStopKeyword_1());
		}
		this_IDENTIFIER_2=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_2);
		}
		{
			newLeafNode(this_IDENTIFIER_2, grammarAccess.getQualified_identAccess().getIDENTIFIERTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleImport_spec
entryRuleImport_spec returns [String current=null]:
	{ newCompositeNode(grammarAccess.getImport_specRule()); }
	iv_ruleImport_spec=ruleImport_spec
	{ $current=$iv_ruleImport_spec.current.getText(); }
	EOF;

// Rule Import_spec
ruleImport_spec returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getImport_specAccess().getFullStopKeyword_0_0());
			}
			    |
			this_IDENTIFIER_1=RULE_IDENTIFIER
			{
				$current.merge(this_IDENTIFIER_1);
			}
			{
				newLeafNode(this_IDENTIFIER_1, grammarAccess.getImport_specAccess().getIDENTIFIERTerminalRuleCall_0_1());
			}
		)?
		{
			newCompositeNode(grammarAccess.getImport_specAccess().getImport_pathParserRuleCall_1());
		}
		this_Import_path_2=ruleImport_path
		{
			$current.merge(this_Import_path_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleImport_path
entryRuleImport_path returns [String current=null]:
	{ newCompositeNode(grammarAccess.getImport_pathRule()); }
	iv_ruleImport_path=ruleImport_path
	{ $current=$iv_ruleImport_path.current.getText(); }
	EOF;

// Rule Import_path
ruleImport_path returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getImport_pathAccess().getString_litParserRuleCall());
	}
	this_String_lit_0=ruleString_lit
	{
		$current.merge(this_String_lit_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

RULE_SEMICOLON : ';';

RULE_BINARY_OP : ('||'|'&&'|RULE_REL_OP|RULE_ADD_OP|RULE_MUL_OP);

fragment RULE_REL_OP : ('=='|'!='|'<'|'<='|'>'|'>=');

fragment RULE_ADD_OP : ('+'|'-'|'|'|'^');

fragment RULE_MUL_OP : ('*'|'/'|'%'|'<<'|'>>'|'&'|'&^');

RULE_UNARY_OP : ('+'|'-'|'!'|'^'|'*'|'&'|'<-');

RULE_ASSIGN_OP : (RULE_ADD_OP|RULE_MUL_OP)? '=';

fragment RULE_NEWLINE : '\n';

fragment RULE_LETTER : (RULE_UNICODE_LETTER|'_');

fragment RULE_HEX_DIGIT : (RULE_UNICODE_DIGIT|'A'..'F'|'a'..'f');

RULE_KEYWORDS : ('break'|'default'|'func'|'interface'|'select'|'case'|'defer'|'go'|'map'|'struct'|'chan'|'else'|'goto'|'package'|'switch'|'const'|'fallthrough'|'if'|'range'|'type'|'continue'|'for'|'import'|'return'|'var');

RULE_IDENTIFIER : RULE_LETTER (RULE_LETTER|RULE_UNICODE_DIGIT)*;

fragment RULE_UNICODE_CHAR : ('A'..'Z'|'a'..'z');

fragment RULE_UNICODE_LETTER : RULE_UNICODE_CHAR;

fragment RULE_UNICODE_DIGIT : ('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9');

RULE_OCTAL_LIT : '0' ('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7')*;

RULE_HEX_LIT : '0' ('X'|'x') RULE_HEX_DIGIT RULE_HEX_DIGIT*;

RULE_UNICODE_VALUE : (RULE_UNICODE_CHAR|RULE_LITTLE_U_VALUE|RULE_BIG_U_VALUE|RULE_ESCAPED_CHAR);

RULE_OCTAL_BYTE_VALUE : '\\' ('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7') ('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7') ('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7');

RULE_HEX_BYTE_VALUE : '\\' 'x' RULE_HEX_DIGIT RULE_HEX_DIGIT;

fragment RULE_LITTLE_U_VALUE : '\\' 'u' RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT;

fragment RULE_BIG_U_VALUE : '\\' 'U' RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT;

fragment RULE_ESCAPED_CHAR : '\\' ('a'|'b'|'f'|'n'|'r'|'t'|'v'|'\\'|'\''|'"');

RULE_RAW_STRING_LIT : '`' (RULE_UNICODE_CHAR|RULE_NEWLINE)* '`';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
