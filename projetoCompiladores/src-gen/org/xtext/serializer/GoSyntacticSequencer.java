/*
 * generated by Xtext 2.13.0
 */
package org.xtext.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.services.GoGrammarAccess;

@SuppressWarnings("all")
public class GoSyntacticSequencer extends AbstractSyntacticSequencer {

	protected GoGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Block_Const_decl_Const_spec_Declaration_Return_stmt_Statement_Var_decl_Break_stmtParserRuleCall_4_or_Continue_stmtParserRuleCall_5_or_FallthroughKeyword_7_or_Goto_stmtParserRuleCall_6_or_ReturnKeyword_0_or_Type_declParserRuleCall_1_or___ConstKeyword_0_0_Identifier_listParserRuleCall_0___or___LeftCurlyBracketKeyword_0_RightCurlyBracketKeyword_2___or___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2___or___VarKeyword_0_LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_2__;
	protected AbstractElementAlias match_Block_Function_decl_program_Import_declParserRuleCall_0_or_Package_clauseParserRuleCall_1_or___FuncKeyword_0_IDENTIFIERTerminalRuleCall_1_SignatureParserRuleCall_2___LeftCurlyBracketKeyword_0_RightCurlyBracketKeyword_2__q__;
	protected AbstractElementAlias match_Block___LeftCurlyBracketKeyword_0_RightCurlyBracketKeyword_2__q;
	protected AbstractElementAlias match_Const_decl_Const_spec_Declaration_Var_decl_Type_declParserRuleCall_1_or___ConstKeyword_0_0_Identifier_listParserRuleCall_0___or___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2___or___VarKeyword_0_LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_2__;
	protected AbstractElementAlias match_Const_decl_Const_spec_If_stmt_Return_stmt_Short_var_decl_ReturnKeyword_0_or___ConstKeyword_0_0_Identifier_listParserRuleCall_0_TypeParserRuleCall_1_0_q_EqualsSignKeyword_1_1___or___IfKeyword_0_q_Identifier_listParserRuleCall_0_ColonEqualsSignKeyword_1__;
	protected AbstractElementAlias match_Const_decl_Const_spec___ConstKeyword_0_0_Identifier_listParserRuleCall_0___or___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__;
	protected AbstractElementAlias match_Const_spec_TypeParserRuleCall_1_0_q;
	protected AbstractElementAlias match_Defer_stmt_Go_stmt_DeferKeyword_0_or_GoKeyword_0;
	protected AbstractElementAlias match_If_stmt_Simple_stmt___Empty_stmtParserRuleCall_0_SEMICOLONTerminalRuleCall_1_1__q;
	protected AbstractElementAlias match_Operand_LiteralsParserRuleCall_0_or_Operand_nameParserRuleCall_1;
	protected AbstractElementAlias match_Var_spec_EqualsSignKeyword_1_1_0_or___TypeParserRuleCall_1_0_0_EqualsSignKeyword_1_0_1_0__;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (GoGrammarAccess) access;
		match_Block_Const_decl_Const_spec_Declaration_Return_stmt_Statement_Var_decl_Break_stmtParserRuleCall_4_or_Continue_stmtParserRuleCall_5_or_FallthroughKeyword_7_or_Goto_stmtParserRuleCall_6_or_ReturnKeyword_0_or_Type_declParserRuleCall_1_or___ConstKeyword_0_0_Identifier_listParserRuleCall_0___or___LeftCurlyBracketKeyword_0_RightCurlyBracketKeyword_2___or___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2___or___VarKeyword_0_LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0()), new TokenAlias(false, false, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getConst_declAccess().getConstKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getConst_specAccess().getIdentifier_listParserRuleCall_0())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getConst_declAccess().getLeftParenthesisKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getConst_declAccess().getRightParenthesisKeyword_1_2())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getVar_declAccess().getVarKeyword_0()), new TokenAlias(false, false, grammarAccess.getVar_declAccess().getLeftParenthesisKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getVar_declAccess().getRightParenthesisKeyword_1_1_2())), new TokenAlias(false, false, grammarAccess.getDeclarationAccess().getType_declParserRuleCall_1()), new TokenAlias(false, false, grammarAccess.getReturn_stmtAccess().getReturnKeyword_0()), new TokenAlias(false, false, grammarAccess.getStatementAccess().getBreak_stmtParserRuleCall_4()), new TokenAlias(false, false, grammarAccess.getStatementAccess().getContinue_stmtParserRuleCall_5()), new TokenAlias(false, false, grammarAccess.getStatementAccess().getFallthroughKeyword_7()), new TokenAlias(false, false, grammarAccess.getStatementAccess().getGoto_stmtParserRuleCall_6()));
		match_Block_Function_decl_program_Import_declParserRuleCall_0_or_Package_clauseParserRuleCall_1_or___FuncKeyword_0_IDENTIFIERTerminalRuleCall_1_SignatureParserRuleCall_2___LeftCurlyBracketKeyword_0_RightCurlyBracketKeyword_2__q__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getFunction_declAccess().getFuncKeyword_0()), new TokenAlias(false, false, grammarAccess.getFunction_declAccess().getIDENTIFIERTerminalRuleCall_1()), new TokenAlias(false, false, grammarAccess.getFunction_declAccess().getSignatureParserRuleCall_2()), new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0()), new TokenAlias(false, false, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2()))), new TokenAlias(false, false, grammarAccess.getProgramAccess().getImport_declParserRuleCall_0()), new TokenAlias(false, false, grammarAccess.getProgramAccess().getPackage_clauseParserRuleCall_1()));
		match_Block___LeftCurlyBracketKeyword_0_RightCurlyBracketKeyword_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0()), new TokenAlias(false, false, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2()));
		match_Const_decl_Const_spec_Declaration_Var_decl_Type_declParserRuleCall_1_or___ConstKeyword_0_0_Identifier_listParserRuleCall_0___or___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2___or___VarKeyword_0_LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getConst_declAccess().getConstKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getConst_specAccess().getIdentifier_listParserRuleCall_0())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getConst_declAccess().getLeftParenthesisKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getConst_declAccess().getRightParenthesisKeyword_1_2())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getVar_declAccess().getVarKeyword_0()), new TokenAlias(false, false, grammarAccess.getVar_declAccess().getLeftParenthesisKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getVar_declAccess().getRightParenthesisKeyword_1_1_2())), new TokenAlias(false, false, grammarAccess.getDeclarationAccess().getType_declParserRuleCall_1()));
		match_Const_decl_Const_spec_If_stmt_Return_stmt_Short_var_decl_ReturnKeyword_0_or___ConstKeyword_0_0_Identifier_listParserRuleCall_0_TypeParserRuleCall_1_0_q_EqualsSignKeyword_1_1___or___IfKeyword_0_q_Identifier_listParserRuleCall_0_ColonEqualsSignKeyword_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getConst_declAccess().getConstKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getConst_specAccess().getIdentifier_listParserRuleCall_0()), new TokenAlias(false, true, grammarAccess.getConst_specAccess().getTypeParserRuleCall_1_0()), new TokenAlias(false, false, grammarAccess.getConst_specAccess().getEqualsSignKeyword_1_1())), new GroupAlias(false, false, new TokenAlias(false, true, grammarAccess.getIf_stmtAccess().getIfKeyword_0()), new TokenAlias(false, false, grammarAccess.getShort_var_declAccess().getIdentifier_listParserRuleCall_0()), new TokenAlias(false, false, grammarAccess.getShort_var_declAccess().getColonEqualsSignKeyword_1())), new TokenAlias(false, false, grammarAccess.getReturn_stmtAccess().getReturnKeyword_0()));
		match_Const_decl_Const_spec___ConstKeyword_0_0_Identifier_listParserRuleCall_0___or___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getConst_declAccess().getConstKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getConst_specAccess().getIdentifier_listParserRuleCall_0())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getConst_declAccess().getLeftParenthesisKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getConst_declAccess().getRightParenthesisKeyword_1_2())));
		match_Const_spec_TypeParserRuleCall_1_0_q = new TokenAlias(false, true, grammarAccess.getConst_specAccess().getTypeParserRuleCall_1_0());
		match_Defer_stmt_Go_stmt_DeferKeyword_0_or_GoKeyword_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getDefer_stmtAccess().getDeferKeyword_0()), new TokenAlias(false, false, grammarAccess.getGo_stmtAccess().getGoKeyword_0()));
		match_If_stmt_Simple_stmt___Empty_stmtParserRuleCall_0_SEMICOLONTerminalRuleCall_1_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getSimple_stmtAccess().getEmpty_stmtParserRuleCall_0()), new TokenAlias(false, false, grammarAccess.getIf_stmtAccess().getSEMICOLONTerminalRuleCall_1_1()));
		match_Operand_LiteralsParserRuleCall_0_or_Operand_nameParserRuleCall_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getOperandAccess().getLiteralsParserRuleCall_0()), new TokenAlias(false, false, grammarAccess.getOperandAccess().getOperand_nameParserRuleCall_1()));
		match_Var_spec_EqualsSignKeyword_1_1_0_or___TypeParserRuleCall_1_0_0_EqualsSignKeyword_1_0_1_0__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getVar_specAccess().getTypeParserRuleCall_1_0_0()), new TokenAlias(false, false, grammarAccess.getVar_specAccess().getEqualsSignKeyword_1_0_1_0())), new TokenAlias(false, false, grammarAccess.getVar_specAccess().getEqualsSignKeyword_1_1_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getANY_OTHERRule())
			return getANY_OTHERToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getBreak_stmtRule())
			return getBreak_stmtToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getContinue_stmtRule())
			return getContinue_stmtToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getEmpty_stmtRule())
			return getEmpty_stmtToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getGoto_stmtRule())
			return getGoto_stmtToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIDENTIFIERRule())
			return getIDENTIFIERToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIdentifier_listRule())
			return getIdentifier_listToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getImport_declRule())
			return getImport_declToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLiteralsRule())
			return getLiteralsToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getOperand_nameRule())
			return getOperand_nameToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPackage_clauseRule())
			return getPackage_clauseToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSEMICOLONRule())
			return getSEMICOLONToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSignatureRule())
			return getSignatureToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getTypeRule())
			return getTypeToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getType_declRule())
			return getType_declToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal ANY_OTHER: .;
	 */
	protected String getANY_OTHERToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * Break_stmt:
	 * 	"break" (IDENTIFIER)?;
	 */
	protected String getBreak_stmtToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "break";
	}
	
	/**
	 * Continue_stmt:
	 * 	"continue" (IDENTIFIER)?;
	 */
	protected String getContinue_stmtToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "continue";
	}
	
	/**
	 * Empty_stmt:
	 * 	WS;
	 */
	protected String getEmpty_stmtToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return " ";
	}
	
	/**
	 * Goto_stmt:
	 * 	"goto" IDENTIFIER;
	 */
	protected String getGoto_stmtToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "goto";
	}
	
	/**
	 * terminal IDENTIFIER:
	 * 	LETTER (LETTER | UNICODE_DIGIT)*;
	 */
	protected String getIDENTIFIERToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * Identifier_list:
	 * 	IDENTIFIER ("," IDENTIFIER)*;
	 */
	protected String getIdentifier_listToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * Import_decl:
	 * 	"import" (Import_spec | "(" (Import_spec SEMICOLON)* ")");
	 */
	protected String getImport_declToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "import``";
	}
	
	/**
	 * Literals:
	 * 	(Int_lit | Float_lit | Imaginary_lit | Rune_lit | String_lit);
	 */
	protected String getLiteralsToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * Operand_name:
	 * 	IDENTIFIER | Qualified_ident;
	 */
	protected String getOperand_nameToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * Package_clause:
	 * 	"package" IDENTIFIER;
	 */
	protected String getPackage_clauseToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "package";
	}
	
	/**
	 * terminal SEMICOLON:
	 * 	';';
	 */
	protected String getSEMICOLONToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ";";
	}
	
	/**
	 * Signature:	Parameters =>Result+;
	 */
	protected String getSignatureToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "(,)";
	}
	
	/**
	 * Type:
	 * 	Type_name | Type_lit | "(" Type ")";
	 */
	protected String getTypeToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * Type_decl:
	 * 	"type" (Type_spec | "(" (Type_spec SEMICOLON)* ")");
	 */
	protected String getType_declToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "type=";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Block_Const_decl_Const_spec_Declaration_Return_stmt_Statement_Var_decl_Break_stmtParserRuleCall_4_or_Continue_stmtParserRuleCall_5_or_FallthroughKeyword_7_or_Goto_stmtParserRuleCall_6_or_ReturnKeyword_0_or_Type_declParserRuleCall_1_or___ConstKeyword_0_0_Identifier_listParserRuleCall_0___or___LeftCurlyBracketKeyword_0_RightCurlyBracketKeyword_2___or___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2___or___VarKeyword_0_LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_2__.equals(syntax))
				emit_Block_Const_decl_Const_spec_Declaration_Return_stmt_Statement_Var_decl_Break_stmtParserRuleCall_4_or_Continue_stmtParserRuleCall_5_or_FallthroughKeyword_7_or_Goto_stmtParserRuleCall_6_or_ReturnKeyword_0_or_Type_declParserRuleCall_1_or___ConstKeyword_0_0_Identifier_listParserRuleCall_0___or___LeftCurlyBracketKeyword_0_RightCurlyBracketKeyword_2___or___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2___or___VarKeyword_0_LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Block_Function_decl_program_Import_declParserRuleCall_0_or_Package_clauseParserRuleCall_1_or___FuncKeyword_0_IDENTIFIERTerminalRuleCall_1_SignatureParserRuleCall_2___LeftCurlyBracketKeyword_0_RightCurlyBracketKeyword_2__q__.equals(syntax))
				emit_Block_Function_decl_program_Import_declParserRuleCall_0_or_Package_clauseParserRuleCall_1_or___FuncKeyword_0_IDENTIFIERTerminalRuleCall_1_SignatureParserRuleCall_2___LeftCurlyBracketKeyword_0_RightCurlyBracketKeyword_2__q__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Block___LeftCurlyBracketKeyword_0_RightCurlyBracketKeyword_2__q.equals(syntax))
				emit_Block___LeftCurlyBracketKeyword_0_RightCurlyBracketKeyword_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Const_decl_Const_spec_Declaration_Var_decl_Type_declParserRuleCall_1_or___ConstKeyword_0_0_Identifier_listParserRuleCall_0___or___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2___or___VarKeyword_0_LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_2__.equals(syntax))
				emit_Const_decl_Const_spec_Declaration_Var_decl_Type_declParserRuleCall_1_or___ConstKeyword_0_0_Identifier_listParserRuleCall_0___or___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2___or___VarKeyword_0_LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Const_decl_Const_spec_If_stmt_Return_stmt_Short_var_decl_ReturnKeyword_0_or___ConstKeyword_0_0_Identifier_listParserRuleCall_0_TypeParserRuleCall_1_0_q_EqualsSignKeyword_1_1___or___IfKeyword_0_q_Identifier_listParserRuleCall_0_ColonEqualsSignKeyword_1__.equals(syntax))
				emit_Const_decl_Const_spec_If_stmt_Return_stmt_Short_var_decl_ReturnKeyword_0_or___ConstKeyword_0_0_Identifier_listParserRuleCall_0_TypeParserRuleCall_1_0_q_EqualsSignKeyword_1_1___or___IfKeyword_0_q_Identifier_listParserRuleCall_0_ColonEqualsSignKeyword_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Const_decl_Const_spec___ConstKeyword_0_0_Identifier_listParserRuleCall_0___or___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__.equals(syntax))
				emit_Const_decl_Const_spec___ConstKeyword_0_0_Identifier_listParserRuleCall_0___or___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Const_spec_TypeParserRuleCall_1_0_q.equals(syntax))
				emit_Const_spec_TypeParserRuleCall_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Defer_stmt_Go_stmt_DeferKeyword_0_or_GoKeyword_0.equals(syntax))
				emit_Defer_stmt_Go_stmt_DeferKeyword_0_or_GoKeyword_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_If_stmt_Simple_stmt___Empty_stmtParserRuleCall_0_SEMICOLONTerminalRuleCall_1_1__q.equals(syntax))
				emit_If_stmt_Simple_stmt___Empty_stmtParserRuleCall_0_SEMICOLONTerminalRuleCall_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Operand_LiteralsParserRuleCall_0_or_Operand_nameParserRuleCall_1.equals(syntax))
				emit_Operand_LiteralsParserRuleCall_0_or_Operand_nameParserRuleCall_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Var_spec_EqualsSignKeyword_1_1_0_or___TypeParserRuleCall_1_0_0_EqualsSignKeyword_1_0_1_0__.equals(syntax))
				emit_Var_spec_EqualsSignKeyword_1_1_0_or___TypeParserRuleCall_1_0_0_EqualsSignKeyword_1_0_1_0__(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     (
	  *         ('var' '(' ')') | 
	  *         ('{' '}') | 
	  *         ('const' Identifier_list) | 
	  *         ('(' ')') | 
	  *         Goto_stmt | 
	  *         Continue_stmt | 
	  *         'fallthrough' | 
	  *         Type_decl | 
	  *         Break_stmt | 
	  *         'return'
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Block_Const_decl_Const_spec_Declaration_Return_stmt_Statement_Var_decl_Break_stmtParserRuleCall_4_or_Continue_stmtParserRuleCall_5_or_FallthroughKeyword_7_or_Goto_stmtParserRuleCall_6_or_ReturnKeyword_0_or_Type_declParserRuleCall_1_or___ConstKeyword_0_0_Identifier_listParserRuleCall_0___or___LeftCurlyBracketKeyword_0_RightCurlyBracketKeyword_2___or___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2___or___VarKeyword_0_LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('func' IDENTIFIER Signature ('{' '}')?) | Package_clause | Import_decl
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Block_Function_decl_program_Import_declParserRuleCall_0_or_Package_clauseParserRuleCall_1_or___FuncKeyword_0_IDENTIFIERTerminalRuleCall_1_SignatureParserRuleCall_2___LeftCurlyBracketKeyword_0_RightCurlyBracketKeyword_2__q__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'func' IDENTIFIER Signature (ambiguity) (rule start)
	 */
	protected void emit_Block___LeftCurlyBracketKeyword_0_RightCurlyBracketKeyword_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('var' '(' ')') | Type_decl | ('(' ')') | ('const' Identifier_list)
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Const_decl_Const_spec_Declaration_Var_decl_Type_declParserRuleCall_1_or___ConstKeyword_0_0_Identifier_listParserRuleCall_0___or___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2___or___VarKeyword_0_LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'return' | ('const' Identifier_list Type? '=') | ('if'? Identifier_list ':=')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) Expression=Expression
	 */
	protected void emit_Const_decl_Const_spec_If_stmt_Return_stmt_Short_var_decl_ReturnKeyword_0_or___ConstKeyword_0_0_Identifier_listParserRuleCall_0_TypeParserRuleCall_1_0_q_EqualsSignKeyword_1_1___or___IfKeyword_0_q_Identifier_listParserRuleCall_0_ColonEqualsSignKeyword_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')') | ('const' Identifier_list)
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Const_decl_Const_spec___ConstKeyword_0_0_Identifier_listParserRuleCall_0___or___LeftParenthesisKeyword_1_0_RightParenthesisKeyword_1_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     Type?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'const' Identifier_list (ambiguity) '=' Expression=Expression
	 *     (rule start) Identifier_list (ambiguity) '=' Expression=Expression
	 */
	protected void emit_Const_spec_TypeParserRuleCall_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'go' | 'defer'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) Unary_expr=Unary_expr
	 */
	protected void emit_Defer_stmt_Go_stmt_DeferKeyword_0_or_GoKeyword_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (Empty_stmt SEMICOLON)?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'if' (ambiguity) Expression=Expression
	 */
	protected void emit_If_stmt_Simple_stmt___Empty_stmtParserRuleCall_0_SEMICOLONTerminalRuleCall_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     Operand_name | Literals
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Operand_LiteralsParserRuleCall_0_or_Operand_nameParserRuleCall_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (Type '=') | '='
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) Identifier_list (ambiguity) Expression=Expression
	 */
	protected void emit_Var_spec_EqualsSignKeyword_1_1_0_or___TypeParserRuleCall_1_0_0_EqualsSignKeyword_1_0_1_0__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
