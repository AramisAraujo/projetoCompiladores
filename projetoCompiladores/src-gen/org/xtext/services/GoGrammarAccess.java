/*
 * generated by Xtext 2.13.0
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GoGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Model");
		private final Assignment cGreetingsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGreetingsProgramParserRuleCall_0 = (RuleCall)cGreetingsAssignment.eContents().get(0);
		
		//Model:
		//	greetings+=program;
		@Override public ParserRule getRule() { return rule; }
		
		//greetings+=program
		public Assignment getGreetingsAssignment() { return cGreetingsAssignment; }
		
		//program
		public RuleCall getGreetingsProgramParserRuleCall_0() { return cGreetingsProgramParserRuleCall_0; }
	}
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.program");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImport_declParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPackage_clauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunction_declParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//program:
		//	Import_decl | Package_clause | Function_decl;
		@Override public ParserRule getRule() { return rule; }
		
		//Import_decl | Package_clause | Function_decl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Import_decl
		public RuleCall getImport_declParserRuleCall_0() { return cImport_declParserRuleCall_0; }
		
		//Package_clause
		public RuleCall getPackage_clauseParserRuleCall_1() { return cPackage_clauseParserRuleCall_1; }
		
		//Function_decl
		public RuleCall getFunction_declParserRuleCall_2() { return cFunction_declParserRuleCall_2; }
	}
	public class OPERATORSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.OPERATORS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBINARY_OPTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cPlusSignPlusSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cEqualsSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cColonEqualsSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cCommaKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final RuleCall cSEMICOLONTerminalRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final Keyword cHyphenMinusHyphenMinusKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cFullStopFullStopFullStopKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cFullStopKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cColonKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final RuleCall cASSIGN_OPTerminalRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		
		//fragment OPERATORS:
		//	BINARY_OP | '(' | ')' | '[' | ']' |
		//	'{' | '}' | '++' | '=' | ':=' | ',' | SEMICOLON |
		//	'--' | '...' | '.' | ':' | ASSIGN_OP;
		@Override public ParserRule getRule() { return rule; }
		
		//BINARY_OP | '(' | ')' | '[' | ']' | '{' | '}' | '++' | '=' | ':=' | ',' | SEMICOLON | '--' | '...' | '.' | ':' |
		//ASSIGN_OP
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BINARY_OP
		public RuleCall getBINARY_OPTerminalRuleCall_0() { return cBINARY_OPTerminalRuleCall_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'++'
		public Keyword getPlusSignPlusSignKeyword_7() { return cPlusSignPlusSignKeyword_7; }
		
		//'='
		public Keyword getEqualsSignKeyword_8() { return cEqualsSignKeyword_8; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_9() { return cColonEqualsSignKeyword_9; }
		
		//','
		public Keyword getCommaKeyword_10() { return cCommaKeyword_10; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_11() { return cSEMICOLONTerminalRuleCall_11; }
		
		//'--'
		public Keyword getHyphenMinusHyphenMinusKeyword_12() { return cHyphenMinusHyphenMinusKeyword_12; }
		
		//'...'
		public Keyword getFullStopFullStopFullStopKeyword_13() { return cFullStopFullStopFullStopKeyword_13; }
		
		//'.'
		public Keyword getFullStopKeyword_14() { return cFullStopKeyword_14; }
		
		//':'
		public Keyword getColonKeyword_15() { return cColonKeyword_15; }
		
		//ASSIGN_OP
		public RuleCall getASSIGN_OPTerminalRuleCall_16() { return cASSIGN_OPTerminalRuleCall_16; }
	}
	public class Int_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Int_lit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOCTAL_LITTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHEX_LITTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//////	'\\u0030'..'\\u0039' | '\\u0660'..'\\u0669' | '\\u06F0'..'\\u06F9' | '\\u07C0'..'\\u07C9' | '\\u0966'..'\\u096F' |
		//////	'\\u09E6'..'\\u09EF' | '\\u0A66'..'\\u0A6F' | '\\u0AE6'..'\\u0AEF' | '\\u0B66'..'\\u0B6F' | '\\u0BE6'..'\\u0BEF' |
		//////	'\\u0C66'..'\\u0C6F' | '\\u0CE6'..'\\u0CEF' | '\\u0D66'..'\\u0D6F' | '\\u0DE6'..'\\u0DEF' | '\\u0E50'..'\\u0E59' |
		//////	'\\u0ED0'..'\\u0ED9' | '\\u0F20'..'\\u0F29' | '\\u1040'..'\\u1049' | '\\u1090'..'\\u1099' | '\\u17E0'..'\\u17E9' |
		//////	'\\u1810'..'\\u1819' | '\\u1946'..'\\u194F' | '\\u19D0'..'\\u19D9' | '\\u1A80'..'\\u1A89' | '\\u1A90'..'\\u1A99' |
		//////	'\\u1B50'..'\\u1B59' | '\\u1BB0'..'\\u1BB9' | '\\u1C40'..'\\u1C49' | '\\u1C50'..'\\u1C59' | '\\uA620'..'\\uA629' |
		//////	'\\uA8D0'..'\\uA8D9' | '\\uA900'..'\\uA909' | '\\uA9D0'..'\\uA9D9' | '\\uA9F0'..'\\uA9F9' | '\\uAA50'..'\\uAA59' |
		//////	'\\uABF0'..'\\uABF9' | '\\uFF10'..'\\uFF19';
		////
		////
		//Int_lit:
		//	INT | OCTAL_LIT | HEX_LIT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | OCTAL_LIT | HEX_LIT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//OCTAL_LIT
		public RuleCall getOCTAL_LITTerminalRuleCall_1() { return cOCTAL_LITTerminalRuleCall_1; }
		
		//HEX_LIT
		public RuleCall getHEX_LITTerminalRuleCall_2() { return cHEX_LITTerminalRuleCall_2; }
	}
	public class Float_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Float_lit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final RuleCall cExponentParserRuleCall_1_0_2 = (RuleCall)cGroup_1_0.eContents().get(2);
		private final RuleCall cExponentParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cExponentParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Float_lit:
		//	INT ('.' INT? Exponent? | Exponent)
		//	'.' INT Exponent?;
		@Override public ParserRule getRule() { return rule; }
		
		//INT ('.' INT? Exponent? | Exponent) '.' INT Exponent?
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.' INT? Exponent? | Exponent
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'.' INT? Exponent?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0_0() { return cFullStopKeyword_1_0_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1_0_1() { return cINTTerminalRuleCall_1_0_1; }
		
		//Exponent?
		public RuleCall getExponentParserRuleCall_1_0_2() { return cExponentParserRuleCall_1_0_2; }
		
		//Exponent
		public RuleCall getExponentParserRuleCall_1_1() { return cExponentParserRuleCall_1_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//Exponent?
		public RuleCall getExponentParserRuleCall_4() { return cExponentParserRuleCall_4; }
	}
	public class ExponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Exponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cEKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cEKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Exponent:
		//	('E' | 'e') ('+' | '-')? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//('E' | 'e') ('+' | '-')? INT
		public Group getGroup() { return cGroup; }
		
		//'E' | 'e'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'E'
		public Keyword getEKeyword_0_0() { return cEKeyword_0_0; }
		
		//'e'
		public Keyword getEKeyword_0_1() { return cEKeyword_0_1; }
		
		//('+' | '-')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0() { return cPlusSignKeyword_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class Imaginary_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Imaginary_lit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cFloat_litParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cIKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Imaginary_lit:
		//	(INT | Float_lit) 'i';
		@Override public ParserRule getRule() { return rule; }
		
		//(INT | Float_lit) 'i'
		public Group getGroup() { return cGroup; }
		
		//INT | Float_lit
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_0() { return cINTTerminalRuleCall_0_0; }
		
		//Float_lit
		public RuleCall getFloat_litParserRuleCall_0_1() { return cFloat_litParserRuleCall_0_1; }
		
		//'i'
		public Keyword getIKeyword_1() { return cIKeyword_1; }
	}
	public class Rune_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Rune_lit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApostropheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cUNICODE_VALUETerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cByte_valueParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cApostropheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Rune_lit:
		//	"'" (UNICODE_VALUE | Byte_value) "'";
		@Override public ParserRule getRule() { return rule; }
		
		//"'" (UNICODE_VALUE | Byte_value) "'"
		public Group getGroup() { return cGroup; }
		
		//"'"
		public Keyword getApostropheKeyword_0() { return cApostropheKeyword_0; }
		
		//UNICODE_VALUE | Byte_value
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//UNICODE_VALUE
		public RuleCall getUNICODE_VALUETerminalRuleCall_1_0() { return cUNICODE_VALUETerminalRuleCall_1_0; }
		
		//Byte_value
		public RuleCall getByte_valueParserRuleCall_1_1() { return cByte_valueParserRuleCall_1_1; }
		
		//"'"
		public Keyword getApostropheKeyword_2() { return cApostropheKeyword_2; }
	}
	public class Byte_valueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Byte_value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOCTAL_BYTE_VALUETerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHEX_BYTE_VALUETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Byte_value:
		//	OCTAL_BYTE_VALUE | HEX_BYTE_VALUE;
		@Override public ParserRule getRule() { return rule; }
		
		//OCTAL_BYTE_VALUE | HEX_BYTE_VALUE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OCTAL_BYTE_VALUE
		public RuleCall getOCTAL_BYTE_VALUETerminalRuleCall_0() { return cOCTAL_BYTE_VALUETerminalRuleCall_0; }
		
		//HEX_BYTE_VALUE
		public RuleCall getHEX_BYTE_VALUETerminalRuleCall_1() { return cHEX_BYTE_VALUETerminalRuleCall_1; }
	}
	public class String_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.String_lit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRAW_STRING_LITTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInterpreted_string_litParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//String_lit:
		//	RAW_STRING_LIT | Interpreted_string_lit;
		@Override public ParserRule getRule() { return rule; }
		
		//RAW_STRING_LIT | Interpreted_string_lit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RAW_STRING_LIT
		public RuleCall getRAW_STRING_LITTerminalRuleCall_0() { return cRAW_STRING_LITTerminalRuleCall_0; }
		
		//Interpreted_string_lit
		public RuleCall getInterpreted_string_litParserRuleCall_1() { return cInterpreted_string_litParserRuleCall_1; }
	}
	public class Interpreted_string_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Interpreted_string_lit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cUNICODE_VALUETerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cByte_valueParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Interpreted_string_lit:
		//	'"' (UNICODE_VALUE | Byte_value)* '"';
		@Override public ParserRule getRule() { return rule; }
		
		//'"' (UNICODE_VALUE | Byte_value)* '"'
		public Group getGroup() { return cGroup; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_0() { return cQuotationMarkKeyword_0; }
		
		//(UNICODE_VALUE | Byte_value)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//UNICODE_VALUE
		public RuleCall getUNICODE_VALUETerminalRuleCall_1_0() { return cUNICODE_VALUETerminalRuleCall_1_0; }
		
		//Byte_value
		public RuleCall getByte_valueParserRuleCall_1_1() { return cByte_valueParserRuleCall_1_1; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_2() { return cQuotationMarkKeyword_2; }
	}
	public class LiteralsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Literals");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInt_litParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloat_litParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cImaginary_litParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRune_litParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cString_litParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Literals:
		//	Int_lit | Float_lit | Imaginary_lit | Rune_lit | String_lit;
		@Override public ParserRule getRule() { return rule; }
		
		//Int_lit | Float_lit | Imaginary_lit | Rune_lit | String_lit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Int_lit
		public RuleCall getInt_litParserRuleCall_0() { return cInt_litParserRuleCall_0; }
		
		//Float_lit
		public RuleCall getFloat_litParserRuleCall_1() { return cFloat_litParserRuleCall_1; }
		
		//Imaginary_lit
		public RuleCall getImaginary_litParserRuleCall_2() { return cImaginary_litParserRuleCall_2; }
		
		//Rune_lit
		public RuleCall getRune_litParserRuleCall_3() { return cRune_litParserRuleCall_3; }
		
		//String_lit
		public RuleCall getString_litParserRuleCall_4() { return cString_litParserRuleCall_4; }
	}
	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Comment");
		private final RuleCall cML_COMMENTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Comment:
		//	ML_COMMENT;
		@Override public ParserRule getRule() { return rule; }
		
		//ML_COMMENT
		public RuleCall getML_COMMENTTerminalRuleCall() { return cML_COMMENTTerminalRuleCall; }
	}
	public class TokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Token");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKEYWORDSTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOPERATORSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLiteralsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Token:
		//	IDENTIFIER | KEYWORDS | OPERATORS | Literals;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER | KEYWORDS | OPERATORS | Literals
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }
		
		//KEYWORDS
		public RuleCall getKEYWORDSTerminalRuleCall_1() { return cKEYWORDSTerminalRuleCall_1; }
		
		//OPERATORS
		public RuleCall getOPERATORSParserRuleCall_2() { return cOPERATORSParserRuleCall_2; }
		
		//Literals
		public RuleCall getLiteralsParserRuleCall_3() { return cLiteralsParserRuleCall_3; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cType_nameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cType_litParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Type:
		//	Type_name | Type_lit | "(" Type ")";
		@Override public ParserRule getRule() { return rule; }
		
		//Type_name | Type_lit | "(" Type ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Type_name
		public RuleCall getType_nameParserRuleCall_0() { return cType_nameParserRuleCall_0; }
		
		//Type_lit
		public RuleCall getType_litParserRuleCall_1() { return cType_litParserRuleCall_1; }
		
		//"(" Type ")"
		public Group getGroup_2() { return cGroup_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_2_1() { return cTypeParserRuleCall_2_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class Type_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Type_name");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQualified_identParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type_name:
		//	IDENTIFIER | Qualified_ident;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER | Qualified_ident
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }
		
		//Qualified_ident
		public RuleCall getQualified_identParserRuleCall_1() { return cQualified_identParserRuleCall_1; }
	}
	public class Type_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Type_lit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArray_typeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStruct_typeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPointer_typeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFunction_typeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSlice_typeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMap_typeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cInterface_typeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cChannel_typeParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Type_lit:
		//	Array_type | Struct_type | Pointer_type | Function_type | Slice_type | Map_type | Interface_type | Channel_type;
		@Override public ParserRule getRule() { return rule; }
		
		//Array_type | Struct_type | Pointer_type | Function_type | Slice_type | Map_type | Interface_type | Channel_type
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Array_type
		public RuleCall getArray_typeParserRuleCall_0() { return cArray_typeParserRuleCall_0; }
		
		//Struct_type
		public RuleCall getStruct_typeParserRuleCall_1() { return cStruct_typeParserRuleCall_1; }
		
		//Pointer_type
		public RuleCall getPointer_typeParserRuleCall_2() { return cPointer_typeParserRuleCall_2; }
		
		//Function_type
		public RuleCall getFunction_typeParserRuleCall_3() { return cFunction_typeParserRuleCall_3; }
		
		//Slice_type
		public RuleCall getSlice_typeParserRuleCall_4() { return cSlice_typeParserRuleCall_4; }
		
		//Map_type
		public RuleCall getMap_typeParserRuleCall_5() { return cMap_typeParserRuleCall_5; }
		
		//Interface_type
		public RuleCall getInterface_typeParserRuleCall_6() { return cInterface_typeParserRuleCall_6; }
		
		//Channel_type
		public RuleCall getChannel_typeParserRuleCall_7() { return cChannel_typeParserRuleCall_7; }
	}
	public class Array_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Array_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cParameter_listParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cTypeParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Array_type:
		//	"[" Parameter_list "]" Type;
		@Override public ParserRule getRule() { return rule; }
		
		//"[" Parameter_list "]" Type
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//Parameter_list
		public RuleCall getParameter_listParserRuleCall_1() { return cParameter_listParserRuleCall_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
		
		//Type
		public RuleCall getTypeParserRuleCall_3() { return cTypeParserRuleCall_3; }
	}
	public class Struct_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Struct_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cField_declParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////Array_length:
		////	Parameter_list;
		////
		////Element_type:
		////	Type;
		//Struct_type:
		//	"struct" "{" (Field_decl SEMICOLON)* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"struct" "{" (Field_decl SEMICOLON)* "}"
		public Group getGroup() { return cGroup; }
		
		//"struct"
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(Field_decl SEMICOLON)*
		public Group getGroup_2() { return cGroup_2; }
		
		//Field_decl
		public RuleCall getField_declParserRuleCall_2_0() { return cField_declParserRuleCall_2_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_2_1() { return cSEMICOLONTerminalRuleCall_2_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class Field_declElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Field_decl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cIdentifier_listParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final RuleCall cEmbedded_fieldParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cString_litParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Field_decl:
		//	(Identifier_list Type | Embedded_field) String_lit?;
		@Override public ParserRule getRule() { return rule; }
		
		//(Identifier_list Type | Embedded_field) String_lit?
		public Group getGroup() { return cGroup; }
		
		//Identifier_list Type | Embedded_field
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//Identifier_list Type
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//Identifier_list
		public RuleCall getIdentifier_listParserRuleCall_0_0_0() { return cIdentifier_listParserRuleCall_0_0_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_0_0_1() { return cTypeParserRuleCall_0_0_1; }
		
		//Embedded_field
		public RuleCall getEmbedded_fieldParserRuleCall_0_1() { return cEmbedded_fieldParserRuleCall_0_1; }
		
		//String_lit?
		public RuleCall getString_litParserRuleCall_1() { return cString_litParserRuleCall_1; }
	}
	public class Embedded_fieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Embedded_field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cType_nameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Embedded_field:
		//	"*"+ Type_name;
		@Override public ParserRule getRule() { return rule; }
		
		//"*"+ Type_name
		public Group getGroup() { return cGroup; }
		
		//"*"+
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//Type_name
		public RuleCall getType_nameParserRuleCall_1() { return cType_nameParserRuleCall_1; }
	}
	public class Pointer_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Pointer_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////Tag:
		////	String_lit;
		//Pointer_type:
		//	"*" Type;
		@Override public ParserRule getRule() { return rule; }
		
		//"*" Type
		public Group getGroup() { return cGroup; }
		
		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }
	}
	public class Function_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Function_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSignatureParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Function_type:
		//	"func" Signature;
		@Override public ParserRule getRule() { return rule; }
		
		//"func" Signature
		public Group getGroup() { return cGroup; }
		
		//"func"
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//Signature
		public RuleCall getSignatureParserRuleCall_1() { return cSignatureParserRuleCall_1; }
	}
	public class SignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Signature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParametersParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cResultParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Signature:
		//	Parameters => Result+;
		@Override public ParserRule getRule() { return rule; }
		
		////precedence on result
		//Parameters => Result+
		public Group getGroup() { return cGroup; }
		
		////precedence on result
		//Parameters
		public RuleCall getParametersParserRuleCall_0() { return cParametersParserRuleCall_0; }
		
		//=> Result+
		public RuleCall getResultParserRuleCall_1() { return cResultParserRuleCall_1; }
	}
	public class ResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Result");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParametersParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Result:
		//	Parameters | => Type;
		@Override public ParserRule getRule() { return rule; }
		
		////precedence on type (both work, so maybe change..)
		//Parameters | => Type
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Parameters
		public RuleCall getParametersParserRuleCall_0() { return cParametersParserRuleCall_0; }
		
		//=> Type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }
	}
	public class ParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Parameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cParameter_listParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Parameters:
		//	"(" (Parameter_list ","+)+ ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" (Parameter_list ","+)+ ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(Parameter_list ","+)+
		public Group getGroup_1() { return cGroup_1; }
		
		//Parameter_list
		public RuleCall getParameter_listParserRuleCall_1_0() { return cParameter_listParserRuleCall_1_0; }
		
		//","+
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class Parameter_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Parameter_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParameter_declParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cParameter_declParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		
		//Parameter_list:
		//	Parameter_decl => ("," Parameter_decl)*;
		@Override public ParserRule getRule() { return rule; }
		
		////{Identifier , Identifier} should be derivated through identifier_list
		//// and type before Identifier_list alone
		//Parameter_decl => ("," Parameter_decl)*
		public Group getGroup() { return cGroup; }
		
		////{Identifier , Identifier} should be derivated through identifier_list
		//// and type before Identifier_list alone
		//Parameter_decl
		public RuleCall getParameter_declParserRuleCall_0() { return cParameter_declParserRuleCall_0; }
		
		//=> ("," Parameter_decl)*
		public Group getGroup_1() { return cGroup_1; }
		
		//"," Parameter_decl
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//","
		public Keyword getCommaKeyword_1_0_0() { return cCommaKeyword_1_0_0; }
		
		//Parameter_decl
		public RuleCall getParameter_declParserRuleCall_1_0_1() { return cParameter_declParserRuleCall_1_0_1; }
	}
	public class Parameter_declElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Parameter_decl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIdentifier_listParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Parameter_decl: //{Identifier , Identifier} should be derivated through identifier_list
		//// and type before Identifier_list alone
		//	=> (Identifier_list)? "..."? Type;
		@Override public ParserRule getRule() { return rule; }
		
		////{Identifier , Identifier} should be derivated through identifier_list
		//// and type before Identifier_list alone
		//=> (Identifier_list)? "..."? Type
		public Group getGroup() { return cGroup; }
		
		////{Identifier , Identifier} should be derivated through identifier_list
		//// and type before Identifier_list alone
		//=> (Identifier_list)?
		public Group getGroup_0() { return cGroup_0; }
		
		//Identifier_list
		public RuleCall getIdentifier_listParserRuleCall_0_0() { return cIdentifier_listParserRuleCall_0_0; }
		
		//"..."?
		public Keyword getFullStopFullStopFullStopKeyword_1() { return cFullStopFullStopFullStopKeyword_1; }
		
		//Type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }
	}
	public class Identifier_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Identifier_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Identifier_list:
		//	IDENTIFIER ("," IDENTIFIER)*;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER ("," IDENTIFIER)*
		public Group getGroup() { return cGroup; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }
		
		//("," IDENTIFIER)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1_1() { return cIDENTIFIERTerminalRuleCall_1_1; }
	}
	public class Interface_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Interface_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cMethod_specParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Interface_type:
		//	"interface" "{" (Method_spec SEMICOLON)* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"interface" "{" (Method_spec SEMICOLON)* "}"
		public Group getGroup() { return cGroup; }
		
		//"interface"
		public Keyword getInterfaceKeyword_0() { return cInterfaceKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(Method_spec SEMICOLON)*
		public Group getGroup_2() { return cGroup_2; }
		
		//Method_spec
		public RuleCall getMethod_specParserRuleCall_2_0() { return cMethod_specParserRuleCall_2_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_2_1() { return cSEMICOLONTerminalRuleCall_2_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class Method_specElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Method_spec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cSignatureParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cType_nameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Method_spec:
		//	IDENTIFIER Signature | Type_name;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER Signature | Type_name
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IDENTIFIER Signature
		public Group getGroup_0() { return cGroup_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0_0() { return cIDENTIFIERTerminalRuleCall_0_0; }
		
		//Signature
		public RuleCall getSignatureParserRuleCall_0_1() { return cSignatureParserRuleCall_0_1; }
		
		//Type_name
		public RuleCall getType_nameParserRuleCall_1() { return cType_nameParserRuleCall_1; }
	}
	public class Slice_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Slice_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		////Interface_type_name:
		////	Type_name;
		////
		//Slice_type:
		//	"[" "]" Type;
		@Override public ParserRule getRule() { return rule; }
		
		//"[" "]" Type
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1() { return cRightSquareBracketKeyword_1; }
		
		//Type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }
	}
	public class Map_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Map_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cTypeParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Map_type:
		//	"map" "[" Type "]" Type;
		@Override public ParserRule getRule() { return rule; }
		
		//"map" "[" Type "]" Type
		public Group getGroup() { return cGroup; }
		
		//"map"
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//Type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//Type
		public RuleCall getTypeParserRuleCall_4() { return cTypeParserRuleCall_4; }
	}
	public class Channel_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Channel_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cChanKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cChanKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cChanKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////Key_type:
		////	Type;
		////
		//Channel_type:
		//	("chan" | "chan<-" | "<-chan") Type;
		@Override public ParserRule getRule() { return rule; }
		
		//("chan" | "chan<-" | "<-chan") Type
		public Group getGroup() { return cGroup; }
		
		//"chan" | "chan<-" | "<-chan"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"chan"
		public Keyword getChanKeyword_0_0() { return cChanKeyword_0_0; }
		
		//"chan<-"
		public Keyword getChanKeyword_0_1() { return cChanKeyword_0_1; }
		
		//"<-chan"
		public Keyword getChanKeyword_0_2() { return cChanKeyword_0_2; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cStatement_listParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Block:
		//	"{" Statement_list "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"{" Statement_list "}"
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//Statement_list
		public RuleCall getStatement_listParserRuleCall_1() { return cStatement_listParserRuleCall_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class Statement_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Statement_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Statement_list:
		//	(Statement SEMICOLON)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(Statement SEMICOLON)*
		public Group getGroup() { return cGroup; }
		
		//Statement
		public RuleCall getStatementParserRuleCall_0() { return cStatementParserRuleCall_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1() { return cSEMICOLONTerminalRuleCall_1; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Declaration");
		private final RuleCall cConst_declParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Declaration:
		//	Const_decl;
		@Override public ParserRule getRule() { return rule; }
		
		//Const_decl
		public RuleCall getConst_declParserRuleCall() { return cConst_declParserRuleCall; }
	}
	public class Const_declElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Const_decl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cConstKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cConst_specParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final RuleCall cConst_specParserRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		////| Type_decl | Var_decl;
		////Top_level_decl:
		////	Declaration | Function_decl | Method_decl;
		////
		//Const_decl:
		//	"const" Const_spec | "(" (Const_spec SEMICOLON)* ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"const" Const_spec | "(" (Const_spec SEMICOLON)* ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"const" Const_spec
		public Group getGroup_0() { return cGroup_0; }
		
		//"const"
		public Keyword getConstKeyword_0_0() { return cConstKeyword_0_0; }
		
		//Const_spec
		public RuleCall getConst_specParserRuleCall_0_1() { return cConst_specParserRuleCall_0_1; }
		
		//"(" (Const_spec SEMICOLON)* ")"
		public Group getGroup_1() { return cGroup_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//(Const_spec SEMICOLON)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//Const_spec
		public RuleCall getConst_specParserRuleCall_1_1_0() { return cConst_specParserRuleCall_1_1_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_1_1() { return cSEMICOLONTerminalRuleCall_1_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class Const_specElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Const_spec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifier_listParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cExpression_listParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//Const_spec:
		//	Identifier_list (Type? "=" Expression_list)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Identifier_list (Type? "=" Expression_list)?
		public Group getGroup() { return cGroup; }
		
		//Identifier_list
		public RuleCall getIdentifier_listParserRuleCall_0() { return cIdentifier_listParserRuleCall_0; }
		
		//(Type? "=" Expression_list)?
		public Group getGroup_1() { return cGroup_1; }
		
		//Type?
		public RuleCall getTypeParserRuleCall_1_0() { return cTypeParserRuleCall_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//Expression_list
		public RuleCall getExpression_listParserRuleCall_1_2() { return cExpression_listParserRuleCall_1_2; }
	}
	public class Expression_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Expression_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Expression_list:
		//	Expression ("," Expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression ("," Expression)*
		public Group getGroup() { return cGroup; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//("," Expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }
	}
	public class Function_declElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Function_decl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cSignatureParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cFunction_bodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		////Type_decl:
		////	"type" (Type_spec | "(" (Type_spec SEMICOLON)* ")");
		////
		////Type_spec:
		////	Alias_decl | Type_def;
		////
		////Alias_decl:
		////	IDENTIFIER "=" Type;
		////
		////Type_def:
		////	IDENTIFIER Type;
		////
		////Var_decl:
		////	"var" (Var_spec | "(" (Var_spec SEMICOLON)* ")");
		////
		////Var_spec:
		////	Identifier_list (Type ("=" Expression_list)? | "=" Expression_list);
		////
		////Short_var_decl:
		////	=> Identifier_list ":=" Expression_list;
		////
		//Function_decl:
		//	"func" IDENTIFIER Signature Function_body?;
		@Override public ParserRule getRule() { return rule; }
		
		//"func" IDENTIFIER Signature Function_body?
		public Group getGroup() { return cGroup; }
		
		//"func"
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1() { return cIDENTIFIERTerminalRuleCall_1; }
		
		//Signature
		public RuleCall getSignatureParserRuleCall_2() { return cSignatureParserRuleCall_2; }
		
		//Function_body?
		public RuleCall getFunction_bodyParserRuleCall_3() { return cFunction_bodyParserRuleCall_3; }
	}
	public class Function_bodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Function_body");
		private final RuleCall cBlockParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Function_body:
		//	Block;
		@Override public ParserRule getRule() { return rule; }
		
		//Block
		public RuleCall getBlockParserRuleCall() { return cBlockParserRuleCall; }
	}
	public class OperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Operand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperand_nameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		////
		////Method_decl:
		////	"func" Rreciever IDENTIFIER Signature (Function_body)?;
		////
		////Rreciever:
		////	Parameters;
		//Operand:
		//	Literals | Operand_name | "(" Expression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//Literals | Operand_name | "(" Expression ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Literals
		public RuleCall getLiteralsParserRuleCall_0() { return cLiteralsParserRuleCall_0; }
		
		//Operand_name
		public RuleCall getOperand_nameParserRuleCall_1() { return cOperand_nameParserRuleCall_1; }
		
		//"(" Expression ")"
		public Group getGroup_2() { return cGroup_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_2_1() { return cExpressionParserRuleCall_2_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class Basic_litElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Basic_lit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInt_litParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloat_litParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cImaginary_litParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRune_litParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cString_litParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		////Literal:
		////	Basic_lit | Composite_lit | Function_lit;
		//Basic_lit:
		//	Int_lit | Float_lit | Imaginary_lit | Rune_lit | String_lit;
		@Override public ParserRule getRule() { return rule; }
		
		//Int_lit | Float_lit | Imaginary_lit | Rune_lit | String_lit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Int_lit
		public RuleCall getInt_litParserRuleCall_0() { return cInt_litParserRuleCall_0; }
		
		//Float_lit
		public RuleCall getFloat_litParserRuleCall_1() { return cFloat_litParserRuleCall_1; }
		
		//Imaginary_lit
		public RuleCall getImaginary_litParserRuleCall_2() { return cImaginary_litParserRuleCall_2; }
		
		//Rune_lit
		public RuleCall getRune_litParserRuleCall_3() { return cRune_litParserRuleCall_3; }
		
		//String_lit
		public RuleCall getString_litParserRuleCall_4() { return cString_litParserRuleCall_4; }
	}
	public class Operand_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Operand_name");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQualified_identParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Operand_name:
		//	IDENTIFIER | Qualified_ident;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER | Qualified_ident
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }
		
		//Qualified_ident
		public RuleCall getQualified_identParserRuleCall_1() { return cQualified_identParserRuleCall_1; }
	}
	public class Qualified_identElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Qualified_ident");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Qualified_ident:
		//	IDENTIFIER "." IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER "." IDENTIFIER
		public Group getGroup() { return cGroup; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_2() { return cIDENTIFIERTerminalRuleCall_2; }
	}
	public class Primary_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Primary_expr");
		private final RuleCall cOperandParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////Composite_lit:
		////	Literal_type Literal_value;
		////
		////Literal_type:
		////	Struct_type | Array_type | "[" "..." "]" Element_type |
		////	Slice_type | Map_type | Type_name;
		////
		////Literal_value:
		////	"{" (Element_list (",")?)? "}";
		////
		////Element_list:
		////	Keyed_element ("," Keyed_element)*;
		////
		////Keyed_element:
		////	=> (Key ":")? Element;
		////
		////Key:
		////	IDENTIFIER | Expression | Literal_value;
		////
		////Element:
		////	Expression | Literal_value;
		////
		////Function_lit:
		////	"func" Signature Function_body;
		//Primary_expr:
		//	Operand;
		@Override public ParserRule getRule() { return rule; }
		
		//Operand
		public RuleCall getOperandParserRuleCall() { return cOperandParserRuleCall; }
	}
	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Selector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// |
		////	Conversion |
		////	Method_expr |
		////	=> Primary_expr_selector |
		////	Primary_expr_index |
		////	Primary_expr_slice |
		////	Primary_expr_type_assertion |
		////	Primary_expr_arguments;
		////
		////Primary_expr_selector:
		////	Selector Primary_expr_selector | (=> Operand |
		////	Conversion |
		////	Method_expr);
		////
		////Primary_expr_index:
		////	Index Primary_expr_index | (=> Operand |
		////	Conversion |
		////	Method_expr);
		////
		////Primary_expr_slice:
		////	Slice Primary_expr_slice | (=> Operand |
		////	Conversion |
		////	Method_expr);
		////
		////Primary_expr_type_assertion:
		////	Type_assertion Primary_expr_type_assertion | (=> Operand |
		////	Conversion |
		////	Method_expr);
		////
		////Primary_expr_arguments:
		////	Arguments Primary_expr_arguments | (=> Operand |
		////	Conversion |
		////	Method_expr);
		////
		//Selector:
		//	"." IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//"." IDENTIFIER
		public Group getGroup() { return cGroup; }
		
		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1() { return cIDENTIFIERTerminalRuleCall_1; }
	}
	public class Type_assertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Type_assertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////Index:
		////	"[" Expression "]";
		////
		////Slice:
		////	=> ("[" (Expression)? ":" (Expression)? "]") | ("[" (Expression)? ":" Expression ":" Expression "]");
		////
		//Type_assertion:
		//	"." "(" Type ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"." "(" Type ")"
		public Group getGroup() { return cGroup; }
		
		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//Type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnary_exprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cExpression_lineParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////Arguments:
		////	"(" (=> Expression_list | Type ("," Expression_list)? ("...")? (",")?)? ")";
		////
		////Method_expr:
		////	Reciever_type "." IDENTIFIER;
		////
		////Reciever_type:
		////	Type;
		////
		//Expression:
		//	Unary_expr Expression_line;
		@Override public ParserRule getRule() { return rule; }
		
		//Unary_expr Expression_line
		public Group getGroup() { return cGroup; }
		
		//Unary_expr
		public RuleCall getUnary_exprParserRuleCall_0() { return cUnary_exprParserRuleCall_0; }
		
		//Expression_line
		public RuleCall getExpression_lineParserRuleCall_1() { return cExpression_lineParserRuleCall_1; }
	}
	public class Expression_lineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Expression_line");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBINARY_OPTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cExpression_lineParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Expression_line:
		//	BINARY_OP Expression Expression_line;
		@Override public ParserRule getRule() { return rule; }
		
		//BINARY_OP Expression Expression_line
		public Group getGroup() { return cGroup; }
		
		//BINARY_OP
		public RuleCall getBINARY_OPTerminalRuleCall_0() { return cBINARY_OPTerminalRuleCall_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
		
		//Expression_line
		public RuleCall getExpression_lineParserRuleCall_2() { return cExpression_lineParserRuleCall_2; }
	}
	public class Unary_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Unary_expr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimary_exprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUNARY_OPTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Unary_expr:
		//	(Primary_expr | UNARY_OP)+;
		@Override public ParserRule getRule() { return rule; }
		
		//(Primary_expr | UNARY_OP)+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Primary_expr
		public RuleCall getPrimary_exprParserRuleCall_0() { return cPrimary_exprParserRuleCall_0; }
		
		//UNARY_OP
		public RuleCall getUNARY_OPTerminalRuleCall_1() { return cUNARY_OPTerminalRuleCall_1; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Statement");
		private final RuleCall cDeclarationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////Conversion:
		////	Type "(" Expression (",")? ")";
		////
		//Statement:
		//	Declaration;
		@Override public ParserRule getRule() { return rule; }
		
		//Declaration
		public RuleCall getDeclarationParserRuleCall() { return cDeclarationParserRuleCall; }
	}
	public class Empty_stmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Empty_stmt");
		private final RuleCall cWSTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		////| Labeled_stmt | Simple_stmt | Go_stmt | Return_stmt |
		////	Break_stmt | Continue_stmt | Goto_stmt |
		////	"fallthrough" | Block | If_stmt | Switch_stmt |
		////	Select_stmt | For_stmt | Defer_stmt;
		////Simple_stmt:
		////	Empty_stmt | Expression_stmt | Send_stmt | Inc_dec_stmt | Assignment | Short_var_decl;
		////
		//Empty_stmt:
		//	WS;
		@Override public ParserRule getRule() { return rule; }
		
		//WS
		public RuleCall getWSTerminalRuleCall() { return cWSTerminalRuleCall; }
	}
	public class Break_stmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Break_stmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBreakKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////Labeled_stmt:
		////	=> IDENTIFIER ":" Statement;
		////
		////Expression_stmt:
		////	Expression;
		////
		////Send_stmt:
		////	=> Channel "<-" Expression;
		////
		////Channel:
		////	Expression;
		////
		////Inc_dec_stmt:
		////	=> Expression ("++" | "--");
		////
		////Assignment:
		////	=> Expression_list ASSIGN_OP Expression_list;
		////
		////If_stmt:
		////	"if" (Simple_stmt SEMICOLON)? => Expression Block ("else" (If_stmt | Block))?;
		////
		////Switch_stmt:
		////	=> Expr_switch_stmt | Type_switch_stmt;
		////
		////Expr_switch_stmt:
		////	"switch" (Simple_stmt SEMICOLON)? => (Expression)? "{" (Expr_case_clause)* "}";
		////
		////Expr_case_clause:
		////	Expr_switch_case ":" Statement_list;
		////
		////Expr_switch_case:
		////	"case" Expression_list | "default";
		////
		////Type_switch_stmt:
		////	"switch" (Simple_stmt SEMICOLON)? => Type_switch_guard "{" (Type_case_clause)* "}";
		////
		////Type_switch_guard:
		////	(IDENTIFIER ":=")? Primary_expr "." "(" "type" ")";
		////
		////Type_case_clause:
		////	Type_switch_case ":" Statement_list;
		////
		////Type_switch_case:
		////	"case" Type_list | "default";
		////
		////Type_list:
		////	Type ("," Type)*;
		////
		////For_stmt:
		////	"for" (=> Condition | For_clause | Range_clause)? Block;
		////
		////Condition:
		////	Expression;
		////
		////For_clause:
		////	(Init_stmt)? SEMICOLON (Condition)? SEMICOLON (Post_stmt)?;
		////
		////Init_stmt:
		////	Simple_stmt;
		////
		////Post_stmt:
		////	Simple_stmt;
		////
		////Range_clause:
		////	(Expression_list "=" | Identifier_list ":=")? "range" Expression;
		////
		////Go_stmt:
		////	"go" Expression;
		////
		////Select_stmt:
		////	"select" "{" (Comm_clause)* "}";
		////
		////Comm_clause:
		////	Comm_case ":" Statement_list;
		////
		////Comm_case:
		////	"case" (Send_stmt | Recv_stmt) | "default";
		////
		////Recv_stmt:
		////	(=> Expression_list "=" | Identifier_list ":=")? Recv_expr;
		////
		////Recv_expr:
		////	Expression;
		////
		////Return_stmt:
		////	"return" (Expression_list)?;
		////
		//Break_stmt:
		//	"break" IDENTIFIER?;
		@Override public ParserRule getRule() { return rule; }
		
		//"break" IDENTIFIER?
		public Group getGroup() { return cGroup; }
		
		//"break"
		public Keyword getBreakKeyword_0() { return cBreakKeyword_0; }
		
		//IDENTIFIER?
		public RuleCall getIDENTIFIERTerminalRuleCall_1() { return cIDENTIFIERTerminalRuleCall_1; }
	}
	public class Continue_stmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Continue_stmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContinueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Continue_stmt:
		//	"continue" IDENTIFIER?;
		@Override public ParserRule getRule() { return rule; }
		
		//"continue" IDENTIFIER?
		public Group getGroup() { return cGroup; }
		
		//"continue"
		public Keyword getContinueKeyword_0() { return cContinueKeyword_0; }
		
		//IDENTIFIER?
		public RuleCall getIDENTIFIERTerminalRuleCall_1() { return cIDENTIFIERTerminalRuleCall_1; }
	}
	public class Goto_stmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Goto_stmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGotoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Goto_stmt:
		//	"goto" IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//"goto" IDENTIFIER
		public Group getGroup() { return cGroup; }
		
		//"goto"
		public Keyword getGotoKeyword_0() { return cGotoKeyword_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1() { return cIDENTIFIERTerminalRuleCall_1; }
	}
	public class Package_clauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Package_clause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////Defer_stmt:
		////	"defer" Expression;
		////
		////Source_file:
		////	Package_clause SEMICOLON (Import_decl SEMICOLON)* (Top_level_decl SEMICOLON)*;
		////
		//Package_clause:
		//	"package" IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//"package" IDENTIFIER
		public Group getGroup() { return cGroup; }
		
		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1() { return cIDENTIFIERTerminalRuleCall_1; }
	}
	public class Import_declElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Import_decl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cImport_specParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final RuleCall cImport_specParserRuleCall_1_1_1_0 = (RuleCall)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_1_1_1 = (RuleCall)cGroup_1_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//Import_decl:
		//	"import" (Import_spec | "(" (Import_spec SEMICOLON)* ")");
		@Override public ParserRule getRule() { return rule; }
		
		//"import" (Import_spec | "(" (Import_spec SEMICOLON)* ")")
		public Group getGroup() { return cGroup; }
		
		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//Import_spec | "(" (Import_spec SEMICOLON)* ")"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Import_spec
		public RuleCall getImport_specParserRuleCall_1_0() { return cImport_specParserRuleCall_1_0; }
		
		//"(" (Import_spec SEMICOLON)* ")"
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//(Import_spec SEMICOLON)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//Import_spec
		public RuleCall getImport_specParserRuleCall_1_1_1_0() { return cImport_specParserRuleCall_1_1_1_0; }
		
		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_1_1_1() { return cSEMICOLONTerminalRuleCall_1_1_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}
	public class Import_specElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Import_spec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cImport_pathParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Import_spec:
		//	("." | IDENTIFIER)? Import_path;
		@Override public ParserRule getRule() { return rule; }
		
		//("." | IDENTIFIER)? Import_path
		public Group getGroup() { return cGroup; }
		
		//("." | IDENTIFIER)?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_0() { return cFullStopKeyword_0_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0_1() { return cIDENTIFIERTerminalRuleCall_0_1; }
		
		//Import_path
		public RuleCall getImport_pathParserRuleCall_1() { return cImport_pathParserRuleCall_1; }
	}
	public class Import_pathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Import_path");
		private final RuleCall cString_litParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Import_path:
		//	String_lit;
		@Override public ParserRule getRule() { return rule; }
		
		//String_lit
		public RuleCall getString_litParserRuleCall() { return cString_litParserRuleCall; }
	}
	
	
	private final ModelElements pModel;
	private final ProgramElements pProgram;
	private final TerminalRule tSEMICOLON;
	private final TerminalRule tBINARY_OP;
	private final TerminalRule tREL_OP;
	private final TerminalRule tADD_OP;
	private final TerminalRule tMUL_OP;
	private final TerminalRule tUNARY_OP;
	private final TerminalRule tASSIGN_OP;
	private final TerminalRule tNEWLINE;
	private final TerminalRule tLETTER;
	private final TerminalRule tHEX_DIGIT;
	private final TerminalRule tKEYWORDS;
	private final TerminalRule tIDENTIFIER;
	private final OPERATORSElements pOPERATORS;
	private final TerminalRule tUNICODE_CHAR;
	private final TerminalRule tUNICODE_LETTER;
	private final TerminalRule tUNICODE_DIGIT;
	private final Int_litElements pInt_lit;
	private final TerminalRule tOCTAL_LIT;
	private final TerminalRule tHEX_LIT;
	private final Float_litElements pFloat_lit;
	private final ExponentElements pExponent;
	private final Imaginary_litElements pImaginary_lit;
	private final Rune_litElements pRune_lit;
	private final TerminalRule tUNICODE_VALUE;
	private final Byte_valueElements pByte_value;
	private final TerminalRule tOCTAL_BYTE_VALUE;
	private final TerminalRule tHEX_BYTE_VALUE;
	private final TerminalRule tLITTLE_U_VALUE;
	private final TerminalRule tBIG_U_VALUE;
	private final TerminalRule tESCAPED_CHAR;
	private final String_litElements pString_lit;
	private final TerminalRule tRAW_STRING_LIT;
	private final Interpreted_string_litElements pInterpreted_string_lit;
	private final LiteralsElements pLiterals;
	private final CommentElements pComment;
	private final TokenElements pToken;
	private final TypeElements pType;
	private final Type_nameElements pType_name;
	private final Type_litElements pType_lit;
	private final Array_typeElements pArray_type;
	private final Struct_typeElements pStruct_type;
	private final Field_declElements pField_decl;
	private final Embedded_fieldElements pEmbedded_field;
	private final Pointer_typeElements pPointer_type;
	private final Function_typeElements pFunction_type;
	private final SignatureElements pSignature;
	private final ResultElements pResult;
	private final ParametersElements pParameters;
	private final Parameter_listElements pParameter_list;
	private final Parameter_declElements pParameter_decl;
	private final Identifier_listElements pIdentifier_list;
	private final Interface_typeElements pInterface_type;
	private final Method_specElements pMethod_spec;
	private final Slice_typeElements pSlice_type;
	private final Map_typeElements pMap_type;
	private final Channel_typeElements pChannel_type;
	private final BlockElements pBlock;
	private final Statement_listElements pStatement_list;
	private final DeclarationElements pDeclaration;
	private final Const_declElements pConst_decl;
	private final Const_specElements pConst_spec;
	private final Expression_listElements pExpression_list;
	private final Function_declElements pFunction_decl;
	private final Function_bodyElements pFunction_body;
	private final OperandElements pOperand;
	private final Basic_litElements pBasic_lit;
	private final Operand_nameElements pOperand_name;
	private final Qualified_identElements pQualified_ident;
	private final Primary_exprElements pPrimary_expr;
	private final SelectorElements pSelector;
	private final Type_assertionElements pType_assertion;
	private final ExpressionElements pExpression;
	private final Expression_lineElements pExpression_line;
	private final Unary_exprElements pUnary_expr;
	private final StatementElements pStatement;
	private final Empty_stmtElements pEmpty_stmt;
	private final Break_stmtElements pBreak_stmt;
	private final Continue_stmtElements pContinue_stmt;
	private final Goto_stmtElements pGoto_stmt;
	private final Package_clauseElements pPackage_clause;
	private final Import_declElements pImport_decl;
	private final Import_specElements pImport_spec;
	private final Import_pathElements pImport_path;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GoGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pProgram = new ProgramElements();
		this.tSEMICOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.SEMICOLON");
		this.tBINARY_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.BINARY_OP");
		this.tREL_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.REL_OP");
		this.tADD_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.ADD_OP");
		this.tMUL_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.MUL_OP");
		this.tUNARY_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.UNARY_OP");
		this.tASSIGN_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.ASSIGN_OP");
		this.tNEWLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.NEWLINE");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.LETTER");
		this.tHEX_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.HEX_DIGIT");
		this.tKEYWORDS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.KEYWORDS");
		this.tIDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.IDENTIFIER");
		this.pOPERATORS = new OPERATORSElements();
		this.tUNICODE_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.UNICODE_CHAR");
		this.tUNICODE_LETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.UNICODE_LETTER");
		this.tUNICODE_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.UNICODE_DIGIT");
		this.pInt_lit = new Int_litElements();
		this.tOCTAL_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.OCTAL_LIT");
		this.tHEX_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.HEX_LIT");
		this.pFloat_lit = new Float_litElements();
		this.pExponent = new ExponentElements();
		this.pImaginary_lit = new Imaginary_litElements();
		this.pRune_lit = new Rune_litElements();
		this.tUNICODE_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.UNICODE_VALUE");
		this.pByte_value = new Byte_valueElements();
		this.tOCTAL_BYTE_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.OCTAL_BYTE_VALUE");
		this.tHEX_BYTE_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.HEX_BYTE_VALUE");
		this.tLITTLE_U_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.LITTLE_U_VALUE");
		this.tBIG_U_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.BIG_U_VALUE");
		this.tESCAPED_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.ESCAPED_CHAR");
		this.pString_lit = new String_litElements();
		this.tRAW_STRING_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.RAW_STRING_LIT");
		this.pInterpreted_string_lit = new Interpreted_string_litElements();
		this.pLiterals = new LiteralsElements();
		this.pComment = new CommentElements();
		this.pToken = new TokenElements();
		this.pType = new TypeElements();
		this.pType_name = new Type_nameElements();
		this.pType_lit = new Type_litElements();
		this.pArray_type = new Array_typeElements();
		this.pStruct_type = new Struct_typeElements();
		this.pField_decl = new Field_declElements();
		this.pEmbedded_field = new Embedded_fieldElements();
		this.pPointer_type = new Pointer_typeElements();
		this.pFunction_type = new Function_typeElements();
		this.pSignature = new SignatureElements();
		this.pResult = new ResultElements();
		this.pParameters = new ParametersElements();
		this.pParameter_list = new Parameter_listElements();
		this.pParameter_decl = new Parameter_declElements();
		this.pIdentifier_list = new Identifier_listElements();
		this.pInterface_type = new Interface_typeElements();
		this.pMethod_spec = new Method_specElements();
		this.pSlice_type = new Slice_typeElements();
		this.pMap_type = new Map_typeElements();
		this.pChannel_type = new Channel_typeElements();
		this.pBlock = new BlockElements();
		this.pStatement_list = new Statement_listElements();
		this.pDeclaration = new DeclarationElements();
		this.pConst_decl = new Const_declElements();
		this.pConst_spec = new Const_specElements();
		this.pExpression_list = new Expression_listElements();
		this.pFunction_decl = new Function_declElements();
		this.pFunction_body = new Function_bodyElements();
		this.pOperand = new OperandElements();
		this.pBasic_lit = new Basic_litElements();
		this.pOperand_name = new Operand_nameElements();
		this.pQualified_ident = new Qualified_identElements();
		this.pPrimary_expr = new Primary_exprElements();
		this.pSelector = new SelectorElements();
		this.pType_assertion = new Type_assertionElements();
		this.pExpression = new ExpressionElements();
		this.pExpression_line = new Expression_lineElements();
		this.pUnary_expr = new Unary_exprElements();
		this.pStatement = new StatementElements();
		this.pEmpty_stmt = new Empty_stmtElements();
		this.pBreak_stmt = new Break_stmtElements();
		this.pContinue_stmt = new Continue_stmtElements();
		this.pGoto_stmt = new Goto_stmtElements();
		this.pPackage_clause = new Package_clauseElements();
		this.pImport_decl = new Import_declElements();
		this.pImport_spec = new Import_specElements();
		this.pImport_path = new Import_pathElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.Go".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	greetings+=program;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//program:
	//	Import_decl | Package_clause | Function_decl;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//terminal SEMICOLON:
	//	';';
	public TerminalRule getSEMICOLONRule() {
		return tSEMICOLON;
	}
	
	//terminal BINARY_OP:
	//	"||" | "&&" | REL_OP | ADD_OP | MUL_OP;
	public TerminalRule getBINARY_OPRule() {
		return tBINARY_OP;
	}
	
	//terminal REL_OP:
	//	"==" | "!=" | "<" | "<=" | ">" | ">=";
	public TerminalRule getREL_OPRule() {
		return tREL_OP;
	}
	
	//terminal fragment ADD_OP:
	//	"+" | "-" | "|" | "^";
	public TerminalRule getADD_OPRule() {
		return tADD_OP;
	}
	
	//terminal fragment MUL_OP:
	//	"*" | "/" | "%" | "<<" | ">>" | "&" | "&^";
	public TerminalRule getMUL_OPRule() {
		return tMUL_OP;
	}
	
	//terminal UNARY_OP:
	//	"+" | "-" | "!" | "^" | "*" | "&" | "<-";
	public TerminalRule getUNARY_OPRule() {
		return tUNARY_OP;
	}
	
	//terminal ASSIGN_OP:
	//	(ADD_OP | MUL_OP)? "=";
	public TerminalRule getASSIGN_OPRule() {
		return tASSIGN_OP;
	}
	
	//terminal NEWLINE:
	//	'\\u000A';
	public TerminalRule getNEWLINERule() {
		return tNEWLINE;
	}
	
	//terminal LETTER:
	//	UNICODE_LETTER | '_';
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//terminal HEX_DIGIT:
	//	UNICODE_DIGIT | 'A'..'F' | 'a'..'f';
	public TerminalRule getHEX_DIGITRule() {
		return tHEX_DIGIT;
	}
	
	//terminal KEYWORDS:
	//	'break' | 'default' | 'func' | 'interface' | 'select' | 'case' | 'defer' | 'go' | 'map' | 'struct' | 'chan' | 'else' |
	//	'goto' | 'package' | 'switch' | 'const' | "fallthrough" | 'if' | 'range' | 'type' | 'continue' | 'for' | 'import' |
	//	'return' | 'var';
	public TerminalRule getKEYWORDSRule() {
		return tKEYWORDS;
	}
	
	//terminal IDENTIFIER:
	//	LETTER (LETTER | UNICODE_DIGIT)*;
	public TerminalRule getIDENTIFIERRule() {
		return tIDENTIFIER;
	}
	
	//fragment OPERATORS:
	//	BINARY_OP | '(' | ')' | '[' | ']' |
	//	'{' | '}' | '++' | '=' | ':=' | ',' | SEMICOLON |
	//	'--' | '...' | '.' | ':' | ASSIGN_OP;
	public OPERATORSElements getOPERATORSAccess() {
		return pOPERATORS;
	}
	
	public ParserRule getOPERATORSRule() {
		return getOPERATORSAccess().getRule();
	}
	
	//terminal fragment UNICODE_CHAR:
	//	'A'..'Z' | 'a'..'z';
	public TerminalRule getUNICODE_CHARRule() {
		return tUNICODE_CHAR;
	}
	
	//terminal UNICODE_LETTER:
	//	UNICODE_CHAR;
	public TerminalRule getUNICODE_LETTERRule() {
		return tUNICODE_LETTER;
	}
	
	//terminal fragment UNICODE_DIGIT:
	//	'0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';
	public TerminalRule getUNICODE_DIGITRule() {
		return tUNICODE_DIGIT;
	}
	
	//////	'\\u0030'..'\\u0039' | '\\u0660'..'\\u0669' | '\\u06F0'..'\\u06F9' | '\\u07C0'..'\\u07C9' | '\\u0966'..'\\u096F' |
	//////	'\\u09E6'..'\\u09EF' | '\\u0A66'..'\\u0A6F' | '\\u0AE6'..'\\u0AEF' | '\\u0B66'..'\\u0B6F' | '\\u0BE6'..'\\u0BEF' |
	//////	'\\u0C66'..'\\u0C6F' | '\\u0CE6'..'\\u0CEF' | '\\u0D66'..'\\u0D6F' | '\\u0DE6'..'\\u0DEF' | '\\u0E50'..'\\u0E59' |
	//////	'\\u0ED0'..'\\u0ED9' | '\\u0F20'..'\\u0F29' | '\\u1040'..'\\u1049' | '\\u1090'..'\\u1099' | '\\u17E0'..'\\u17E9' |
	//////	'\\u1810'..'\\u1819' | '\\u1946'..'\\u194F' | '\\u19D0'..'\\u19D9' | '\\u1A80'..'\\u1A89' | '\\u1A90'..'\\u1A99' |
	//////	'\\u1B50'..'\\u1B59' | '\\u1BB0'..'\\u1BB9' | '\\u1C40'..'\\u1C49' | '\\u1C50'..'\\u1C59' | '\\uA620'..'\\uA629' |
	//////	'\\uA8D0'..'\\uA8D9' | '\\uA900'..'\\uA909' | '\\uA9D0'..'\\uA9D9' | '\\uA9F0'..'\\uA9F9' | '\\uAA50'..'\\uAA59' |
	//////	'\\uABF0'..'\\uABF9' | '\\uFF10'..'\\uFF19';
	////
	////
	//Int_lit:
	//	INT | OCTAL_LIT | HEX_LIT;
	public Int_litElements getInt_litAccess() {
		return pInt_lit;
	}
	
	public ParserRule getInt_litRule() {
		return getInt_litAccess().getRule();
	}
	
	//terminal OCTAL_LIT:
	//	'0' ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7')*;
	public TerminalRule getOCTAL_LITRule() {
		return tOCTAL_LIT;
	}
	
	//terminal HEX_LIT:
	//	'0' ('X' | 'x') HEX_DIGIT HEX_DIGIT*;
	public TerminalRule getHEX_LITRule() {
		return tHEX_LIT;
	}
	
	//Float_lit:
	//	INT ('.' INT? Exponent? | Exponent)
	//	'.' INT Exponent?;
	public Float_litElements getFloat_litAccess() {
		return pFloat_lit;
	}
	
	public ParserRule getFloat_litRule() {
		return getFloat_litAccess().getRule();
	}
	
	//Exponent:
	//	('E' | 'e') ('+' | '-')? INT;
	public ExponentElements getExponentAccess() {
		return pExponent;
	}
	
	public ParserRule getExponentRule() {
		return getExponentAccess().getRule();
	}
	
	//Imaginary_lit:
	//	(INT | Float_lit) 'i';
	public Imaginary_litElements getImaginary_litAccess() {
		return pImaginary_lit;
	}
	
	public ParserRule getImaginary_litRule() {
		return getImaginary_litAccess().getRule();
	}
	
	//Rune_lit:
	//	"'" (UNICODE_VALUE | Byte_value) "'";
	public Rune_litElements getRune_litAccess() {
		return pRune_lit;
	}
	
	public ParserRule getRune_litRule() {
		return getRune_litAccess().getRule();
	}
	
	//terminal UNICODE_VALUE:
	//	UNICODE_CHAR | LITTLE_U_VALUE | BIG_U_VALUE | ESCAPED_CHAR;
	public TerminalRule getUNICODE_VALUERule() {
		return tUNICODE_VALUE;
	}
	
	//Byte_value:
	//	OCTAL_BYTE_VALUE | HEX_BYTE_VALUE;
	public Byte_valueElements getByte_valueAccess() {
		return pByte_value;
	}
	
	public ParserRule getByte_valueRule() {
		return getByte_valueAccess().getRule();
	}
	
	//terminal OCTAL_BYTE_VALUE:
	//	"\\" ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7') ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7') ('0' | '1' | '2'
	//	| '3' | '4' | '5' | '6' | '7');
	public TerminalRule getOCTAL_BYTE_VALUERule() {
		return tOCTAL_BYTE_VALUE;
	}
	
	//terminal HEX_BYTE_VALUE:
	//	"\\" 'x' HEX_DIGIT HEX_DIGIT;
	public TerminalRule getHEX_BYTE_VALUERule() {
		return tHEX_BYTE_VALUE;
	}
	
	//terminal LITTLE_U_VALUE:
	//	"\\" 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
	public TerminalRule getLITTLE_U_VALUERule() {
		return tLITTLE_U_VALUE;
	}
	
	//terminal BIG_U_VALUE:
	//	"\\" 'U' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
	public TerminalRule getBIG_U_VALUERule() {
		return tBIG_U_VALUE;
	}
	
	//terminal ESCAPED_CHAR:
	//	"\\" ('a' | 'b' | 'f' | 'n' | 'r' | 't' | 'v' | '\\' | "'" | '"');
	public TerminalRule getESCAPED_CHARRule() {
		return tESCAPED_CHAR;
	}
	
	//String_lit:
	//	RAW_STRING_LIT | Interpreted_string_lit;
	public String_litElements getString_litAccess() {
		return pString_lit;
	}
	
	public ParserRule getString_litRule() {
		return getString_litAccess().getRule();
	}
	
	//terminal RAW_STRING_LIT:
	//	'`' (UNICODE_CHAR | NEWLINE)* '`';
	public TerminalRule getRAW_STRING_LITRule() {
		return tRAW_STRING_LIT;
	}
	
	//Interpreted_string_lit:
	//	'"' (UNICODE_VALUE | Byte_value)* '"';
	public Interpreted_string_litElements getInterpreted_string_litAccess() {
		return pInterpreted_string_lit;
	}
	
	public ParserRule getInterpreted_string_litRule() {
		return getInterpreted_string_litAccess().getRule();
	}
	
	//Literals:
	//	Int_lit | Float_lit | Imaginary_lit | Rune_lit | String_lit;
	public LiteralsElements getLiteralsAccess() {
		return pLiterals;
	}
	
	public ParserRule getLiteralsRule() {
		return getLiteralsAccess().getRule();
	}
	
	//Comment:
	//	ML_COMMENT;
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}
	
	//Token:
	//	IDENTIFIER | KEYWORDS | OPERATORS | Literals;
	public TokenElements getTokenAccess() {
		return pToken;
	}
	
	public ParserRule getTokenRule() {
		return getTokenAccess().getRule();
	}
	
	//Type:
	//	Type_name | Type_lit | "(" Type ")";
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Type_name:
	//	IDENTIFIER | Qualified_ident;
	public Type_nameElements getType_nameAccess() {
		return pType_name;
	}
	
	public ParserRule getType_nameRule() {
		return getType_nameAccess().getRule();
	}
	
	//Type_lit:
	//	Array_type | Struct_type | Pointer_type | Function_type | Slice_type | Map_type | Interface_type | Channel_type;
	public Type_litElements getType_litAccess() {
		return pType_lit;
	}
	
	public ParserRule getType_litRule() {
		return getType_litAccess().getRule();
	}
	
	//Array_type:
	//	"[" Parameter_list "]" Type;
	public Array_typeElements getArray_typeAccess() {
		return pArray_type;
	}
	
	public ParserRule getArray_typeRule() {
		return getArray_typeAccess().getRule();
	}
	
	////Array_length:
	////	Parameter_list;
	////
	////Element_type:
	////	Type;
	//Struct_type:
	//	"struct" "{" (Field_decl SEMICOLON)* "}";
	public Struct_typeElements getStruct_typeAccess() {
		return pStruct_type;
	}
	
	public ParserRule getStruct_typeRule() {
		return getStruct_typeAccess().getRule();
	}
	
	//Field_decl:
	//	(Identifier_list Type | Embedded_field) String_lit?;
	public Field_declElements getField_declAccess() {
		return pField_decl;
	}
	
	public ParserRule getField_declRule() {
		return getField_declAccess().getRule();
	}
	
	//Embedded_field:
	//	"*"+ Type_name;
	public Embedded_fieldElements getEmbedded_fieldAccess() {
		return pEmbedded_field;
	}
	
	public ParserRule getEmbedded_fieldRule() {
		return getEmbedded_fieldAccess().getRule();
	}
	
	////Tag:
	////	String_lit;
	//Pointer_type:
	//	"*" Type;
	public Pointer_typeElements getPointer_typeAccess() {
		return pPointer_type;
	}
	
	public ParserRule getPointer_typeRule() {
		return getPointer_typeAccess().getRule();
	}
	
	//Function_type:
	//	"func" Signature;
	public Function_typeElements getFunction_typeAccess() {
		return pFunction_type;
	}
	
	public ParserRule getFunction_typeRule() {
		return getFunction_typeAccess().getRule();
	}
	
	//Signature:
	//	Parameters => Result+;
	public SignatureElements getSignatureAccess() {
		return pSignature;
	}
	
	public ParserRule getSignatureRule() {
		return getSignatureAccess().getRule();
	}
	
	//Result:
	//	Parameters | => Type;
	public ResultElements getResultAccess() {
		return pResult;
	}
	
	public ParserRule getResultRule() {
		return getResultAccess().getRule();
	}
	
	//Parameters:
	//	"(" (Parameter_list ","+)+ ")";
	public ParametersElements getParametersAccess() {
		return pParameters;
	}
	
	public ParserRule getParametersRule() {
		return getParametersAccess().getRule();
	}
	
	//Parameter_list:
	//	Parameter_decl => ("," Parameter_decl)*;
	public Parameter_listElements getParameter_listAccess() {
		return pParameter_list;
	}
	
	public ParserRule getParameter_listRule() {
		return getParameter_listAccess().getRule();
	}
	
	//Parameter_decl: //{Identifier , Identifier} should be derivated through identifier_list
	//// and type before Identifier_list alone
	//	=> (Identifier_list)? "..."? Type;
	public Parameter_declElements getParameter_declAccess() {
		return pParameter_decl;
	}
	
	public ParserRule getParameter_declRule() {
		return getParameter_declAccess().getRule();
	}
	
	//Identifier_list:
	//	IDENTIFIER ("," IDENTIFIER)*;
	public Identifier_listElements getIdentifier_listAccess() {
		return pIdentifier_list;
	}
	
	public ParserRule getIdentifier_listRule() {
		return getIdentifier_listAccess().getRule();
	}
	
	//Interface_type:
	//	"interface" "{" (Method_spec SEMICOLON)* "}";
	public Interface_typeElements getInterface_typeAccess() {
		return pInterface_type;
	}
	
	public ParserRule getInterface_typeRule() {
		return getInterface_typeAccess().getRule();
	}
	
	//Method_spec:
	//	IDENTIFIER Signature | Type_name;
	public Method_specElements getMethod_specAccess() {
		return pMethod_spec;
	}
	
	public ParserRule getMethod_specRule() {
		return getMethod_specAccess().getRule();
	}
	
	////Interface_type_name:
	////	Type_name;
	////
	//Slice_type:
	//	"[" "]" Type;
	public Slice_typeElements getSlice_typeAccess() {
		return pSlice_type;
	}
	
	public ParserRule getSlice_typeRule() {
		return getSlice_typeAccess().getRule();
	}
	
	//Map_type:
	//	"map" "[" Type "]" Type;
	public Map_typeElements getMap_typeAccess() {
		return pMap_type;
	}
	
	public ParserRule getMap_typeRule() {
		return getMap_typeAccess().getRule();
	}
	
	////Key_type:
	////	Type;
	////
	//Channel_type:
	//	("chan" | "chan<-" | "<-chan") Type;
	public Channel_typeElements getChannel_typeAccess() {
		return pChannel_type;
	}
	
	public ParserRule getChannel_typeRule() {
		return getChannel_typeAccess().getRule();
	}
	
	//Block:
	//	"{" Statement_list "}";
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//Statement_list:
	//	(Statement SEMICOLON)*;
	public Statement_listElements getStatement_listAccess() {
		return pStatement_list;
	}
	
	public ParserRule getStatement_listRule() {
		return getStatement_listAccess().getRule();
	}
	
	//Declaration:
	//	Const_decl;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	////| Type_decl | Var_decl;
	////Top_level_decl:
	////	Declaration | Function_decl | Method_decl;
	////
	//Const_decl:
	//	"const" Const_spec | "(" (Const_spec SEMICOLON)* ")";
	public Const_declElements getConst_declAccess() {
		return pConst_decl;
	}
	
	public ParserRule getConst_declRule() {
		return getConst_declAccess().getRule();
	}
	
	//Const_spec:
	//	Identifier_list (Type? "=" Expression_list)?;
	public Const_specElements getConst_specAccess() {
		return pConst_spec;
	}
	
	public ParserRule getConst_specRule() {
		return getConst_specAccess().getRule();
	}
	
	//Expression_list:
	//	Expression ("," Expression)*;
	public Expression_listElements getExpression_listAccess() {
		return pExpression_list;
	}
	
	public ParserRule getExpression_listRule() {
		return getExpression_listAccess().getRule();
	}
	
	////Type_decl:
	////	"type" (Type_spec | "(" (Type_spec SEMICOLON)* ")");
	////
	////Type_spec:
	////	Alias_decl | Type_def;
	////
	////Alias_decl:
	////	IDENTIFIER "=" Type;
	////
	////Type_def:
	////	IDENTIFIER Type;
	////
	////Var_decl:
	////	"var" (Var_spec | "(" (Var_spec SEMICOLON)* ")");
	////
	////Var_spec:
	////	Identifier_list (Type ("=" Expression_list)? | "=" Expression_list);
	////
	////Short_var_decl:
	////	=> Identifier_list ":=" Expression_list;
	////
	//Function_decl:
	//	"func" IDENTIFIER Signature Function_body?;
	public Function_declElements getFunction_declAccess() {
		return pFunction_decl;
	}
	
	public ParserRule getFunction_declRule() {
		return getFunction_declAccess().getRule();
	}
	
	//Function_body:
	//	Block;
	public Function_bodyElements getFunction_bodyAccess() {
		return pFunction_body;
	}
	
	public ParserRule getFunction_bodyRule() {
		return getFunction_bodyAccess().getRule();
	}
	
	////
	////Method_decl:
	////	"func" Rreciever IDENTIFIER Signature (Function_body)?;
	////
	////Rreciever:
	////	Parameters;
	//Operand:
	//	Literals | Operand_name | "(" Expression ")";
	public OperandElements getOperandAccess() {
		return pOperand;
	}
	
	public ParserRule getOperandRule() {
		return getOperandAccess().getRule();
	}
	
	////Literal:
	////	Basic_lit | Composite_lit | Function_lit;
	//Basic_lit:
	//	Int_lit | Float_lit | Imaginary_lit | Rune_lit | String_lit;
	public Basic_litElements getBasic_litAccess() {
		return pBasic_lit;
	}
	
	public ParserRule getBasic_litRule() {
		return getBasic_litAccess().getRule();
	}
	
	//Operand_name:
	//	IDENTIFIER | Qualified_ident;
	public Operand_nameElements getOperand_nameAccess() {
		return pOperand_name;
	}
	
	public ParserRule getOperand_nameRule() {
		return getOperand_nameAccess().getRule();
	}
	
	//Qualified_ident:
	//	IDENTIFIER "." IDENTIFIER;
	public Qualified_identElements getQualified_identAccess() {
		return pQualified_ident;
	}
	
	public ParserRule getQualified_identRule() {
		return getQualified_identAccess().getRule();
	}
	
	////Composite_lit:
	////	Literal_type Literal_value;
	////
	////Literal_type:
	////	Struct_type | Array_type | "[" "..." "]" Element_type |
	////	Slice_type | Map_type | Type_name;
	////
	////Literal_value:
	////	"{" (Element_list (",")?)? "}";
	////
	////Element_list:
	////	Keyed_element ("," Keyed_element)*;
	////
	////Keyed_element:
	////	=> (Key ":")? Element;
	////
	////Key:
	////	IDENTIFIER | Expression | Literal_value;
	////
	////Element:
	////	Expression | Literal_value;
	////
	////Function_lit:
	////	"func" Signature Function_body;
	//Primary_expr:
	//	Operand;
	public Primary_exprElements getPrimary_exprAccess() {
		return pPrimary_expr;
	}
	
	public ParserRule getPrimary_exprRule() {
		return getPrimary_exprAccess().getRule();
	}
	
	//// |
	////	Conversion |
	////	Method_expr |
	////	=> Primary_expr_selector |
	////	Primary_expr_index |
	////	Primary_expr_slice |
	////	Primary_expr_type_assertion |
	////	Primary_expr_arguments;
	////
	////Primary_expr_selector:
	////	Selector Primary_expr_selector | (=> Operand |
	////	Conversion |
	////	Method_expr);
	////
	////Primary_expr_index:
	////	Index Primary_expr_index | (=> Operand |
	////	Conversion |
	////	Method_expr);
	////
	////Primary_expr_slice:
	////	Slice Primary_expr_slice | (=> Operand |
	////	Conversion |
	////	Method_expr);
	////
	////Primary_expr_type_assertion:
	////	Type_assertion Primary_expr_type_assertion | (=> Operand |
	////	Conversion |
	////	Method_expr);
	////
	////Primary_expr_arguments:
	////	Arguments Primary_expr_arguments | (=> Operand |
	////	Conversion |
	////	Method_expr);
	////
	//Selector:
	//	"." IDENTIFIER;
	public SelectorElements getSelectorAccess() {
		return pSelector;
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}
	
	////Index:
	////	"[" Expression "]";
	////
	////Slice:
	////	=> ("[" (Expression)? ":" (Expression)? "]") | ("[" (Expression)? ":" Expression ":" Expression "]");
	////
	//Type_assertion:
	//	"." "(" Type ")";
	public Type_assertionElements getType_assertionAccess() {
		return pType_assertion;
	}
	
	public ParserRule getType_assertionRule() {
		return getType_assertionAccess().getRule();
	}
	
	////Arguments:
	////	"(" (=> Expression_list | Type ("," Expression_list)? ("...")? (",")?)? ")";
	////
	////Method_expr:
	////	Reciever_type "." IDENTIFIER;
	////
	////Reciever_type:
	////	Type;
	////
	//Expression:
	//	Unary_expr Expression_line;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Expression_line:
	//	BINARY_OP Expression Expression_line;
	public Expression_lineElements getExpression_lineAccess() {
		return pExpression_line;
	}
	
	public ParserRule getExpression_lineRule() {
		return getExpression_lineAccess().getRule();
	}
	
	//Unary_expr:
	//	(Primary_expr | UNARY_OP)+;
	public Unary_exprElements getUnary_exprAccess() {
		return pUnary_expr;
	}
	
	public ParserRule getUnary_exprRule() {
		return getUnary_exprAccess().getRule();
	}
	
	////Conversion:
	////	Type "(" Expression (",")? ")";
	////
	//Statement:
	//	Declaration;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	////| Labeled_stmt | Simple_stmt | Go_stmt | Return_stmt |
	////	Break_stmt | Continue_stmt | Goto_stmt |
	////	"fallthrough" | Block | If_stmt | Switch_stmt |
	////	Select_stmt | For_stmt | Defer_stmt;
	////Simple_stmt:
	////	Empty_stmt | Expression_stmt | Send_stmt | Inc_dec_stmt | Assignment | Short_var_decl;
	////
	//Empty_stmt:
	//	WS;
	public Empty_stmtElements getEmpty_stmtAccess() {
		return pEmpty_stmt;
	}
	
	public ParserRule getEmpty_stmtRule() {
		return getEmpty_stmtAccess().getRule();
	}
	
	////Labeled_stmt:
	////	=> IDENTIFIER ":" Statement;
	////
	////Expression_stmt:
	////	Expression;
	////
	////Send_stmt:
	////	=> Channel "<-" Expression;
	////
	////Channel:
	////	Expression;
	////
	////Inc_dec_stmt:
	////	=> Expression ("++" | "--");
	////
	////Assignment:
	////	=> Expression_list ASSIGN_OP Expression_list;
	////
	////If_stmt:
	////	"if" (Simple_stmt SEMICOLON)? => Expression Block ("else" (If_stmt | Block))?;
	////
	////Switch_stmt:
	////	=> Expr_switch_stmt | Type_switch_stmt;
	////
	////Expr_switch_stmt:
	////	"switch" (Simple_stmt SEMICOLON)? => (Expression)? "{" (Expr_case_clause)* "}";
	////
	////Expr_case_clause:
	////	Expr_switch_case ":" Statement_list;
	////
	////Expr_switch_case:
	////	"case" Expression_list | "default";
	////
	////Type_switch_stmt:
	////	"switch" (Simple_stmt SEMICOLON)? => Type_switch_guard "{" (Type_case_clause)* "}";
	////
	////Type_switch_guard:
	////	(IDENTIFIER ":=")? Primary_expr "." "(" "type" ")";
	////
	////Type_case_clause:
	////	Type_switch_case ":" Statement_list;
	////
	////Type_switch_case:
	////	"case" Type_list | "default";
	////
	////Type_list:
	////	Type ("," Type)*;
	////
	////For_stmt:
	////	"for" (=> Condition | For_clause | Range_clause)? Block;
	////
	////Condition:
	////	Expression;
	////
	////For_clause:
	////	(Init_stmt)? SEMICOLON (Condition)? SEMICOLON (Post_stmt)?;
	////
	////Init_stmt:
	////	Simple_stmt;
	////
	////Post_stmt:
	////	Simple_stmt;
	////
	////Range_clause:
	////	(Expression_list "=" | Identifier_list ":=")? "range" Expression;
	////
	////Go_stmt:
	////	"go" Expression;
	////
	////Select_stmt:
	////	"select" "{" (Comm_clause)* "}";
	////
	////Comm_clause:
	////	Comm_case ":" Statement_list;
	////
	////Comm_case:
	////	"case" (Send_stmt | Recv_stmt) | "default";
	////
	////Recv_stmt:
	////	(=> Expression_list "=" | Identifier_list ":=")? Recv_expr;
	////
	////Recv_expr:
	////	Expression;
	////
	////Return_stmt:
	////	"return" (Expression_list)?;
	////
	//Break_stmt:
	//	"break" IDENTIFIER?;
	public Break_stmtElements getBreak_stmtAccess() {
		return pBreak_stmt;
	}
	
	public ParserRule getBreak_stmtRule() {
		return getBreak_stmtAccess().getRule();
	}
	
	//Continue_stmt:
	//	"continue" IDENTIFIER?;
	public Continue_stmtElements getContinue_stmtAccess() {
		return pContinue_stmt;
	}
	
	public ParserRule getContinue_stmtRule() {
		return getContinue_stmtAccess().getRule();
	}
	
	//Goto_stmt:
	//	"goto" IDENTIFIER;
	public Goto_stmtElements getGoto_stmtAccess() {
		return pGoto_stmt;
	}
	
	public ParserRule getGoto_stmtRule() {
		return getGoto_stmtAccess().getRule();
	}
	
	////Defer_stmt:
	////	"defer" Expression;
	////
	////Source_file:
	////	Package_clause SEMICOLON (Import_decl SEMICOLON)* (Top_level_decl SEMICOLON)*;
	////
	//Package_clause:
	//	"package" IDENTIFIER;
	public Package_clauseElements getPackage_clauseAccess() {
		return pPackage_clause;
	}
	
	public ParserRule getPackage_clauseRule() {
		return getPackage_clauseAccess().getRule();
	}
	
	//Import_decl:
	//	"import" (Import_spec | "(" (Import_spec SEMICOLON)* ")");
	public Import_declElements getImport_declAccess() {
		return pImport_decl;
	}
	
	public ParserRule getImport_declRule() {
		return getImport_declAccess().getRule();
	}
	
	//Import_spec:
	//	("." | IDENTIFIER)? Import_path;
	public Import_specElements getImport_specAccess() {
		return pImport_spec;
	}
	
	public ParserRule getImport_specRule() {
		return getImport_specAccess().getRule();
	}
	
	//Import_path:
	//	String_lit;
	public Import_pathElements getImport_pathAccess() {
		return pImport_path;
	}
	
	public ParserRule getImport_pathRule() {
		return getImport_pathAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
