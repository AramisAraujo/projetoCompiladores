/*
 * generated by Xtext 2.14.0
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GoGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Model");
		private final Assignment cGreetingsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGreetingsSourceFileParserRuleCall_0 = (RuleCall)cGreetingsAssignment.eContents().get(0);
		
		//Model:
		//	greetings+=sourceFile;
		@Override public ParserRule getRule() { return rule; }
		
		//greetings+=sourceFile
		public Assignment getGreetingsAssignment() { return cGreetingsAssignment; }
		
		//sourceFile
		public RuleCall getGreetingsSourceFileParserRuleCall_0() { return cGreetingsSourceFileParserRuleCall_0; }
	}
	public class SourceFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.sourceFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPackageAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPackagePackageClauseParserRuleCall_0_0 = (RuleCall)cPackageAssignment_0.eContents().get(0);
		private final RuleCall cEosParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cImportsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cImportsImportDeclParserRuleCall_2_0_0 = (RuleCall)cImportsAssignment_2_0.eContents().get(0);
		private final RuleCall cEosParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cTopLevelDeclsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cTopLevelDeclsTopLevelDeclParserRuleCall_3_0_0 = (RuleCall)cTopLevelDeclsAssignment_3_0.eContents().get(0);
		private final RuleCall cEosParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		////SourceFile       = PackageClause ";" { ImportDecl ";" } { TopLevelDecl ";" } .
		//sourceFile:
		//	package=packageClause eos? (imports+=importDecl eos?)* (topLevelDecls+=topLevelDecl eos)*;
		@Override public ParserRule getRule() { return rule; }
		
		//package=packageClause eos? (imports+=importDecl eos?)* (topLevelDecls+=topLevelDecl eos)*
		public Group getGroup() { return cGroup; }
		
		//package=packageClause
		public Assignment getPackageAssignment_0() { return cPackageAssignment_0; }
		
		//packageClause
		public RuleCall getPackagePackageClauseParserRuleCall_0_0() { return cPackagePackageClauseParserRuleCall_0_0; }
		
		//eos?
		public RuleCall getEosParserRuleCall_1() { return cEosParserRuleCall_1; }
		
		//(imports+=importDecl eos?)*
		public Group getGroup_2() { return cGroup_2; }
		
		//imports+=importDecl
		public Assignment getImportsAssignment_2_0() { return cImportsAssignment_2_0; }
		
		//importDecl
		public RuleCall getImportsImportDeclParserRuleCall_2_0_0() { return cImportsImportDeclParserRuleCall_2_0_0; }
		
		//eos?
		public RuleCall getEosParserRuleCall_2_1() { return cEosParserRuleCall_2_1; }
		
		//(topLevelDecls+=topLevelDecl eos)*
		public Group getGroup_3() { return cGroup_3; }
		
		//topLevelDecls+=topLevelDecl
		public Assignment getTopLevelDeclsAssignment_3_0() { return cTopLevelDeclsAssignment_3_0; }
		
		//topLevelDecl
		public RuleCall getTopLevelDeclsTopLevelDeclParserRuleCall_3_0_0() { return cTopLevelDeclsTopLevelDeclParserRuleCall_3_0_0; }
		
		//eos
		public RuleCall getEosParserRuleCall_3_1() { return cEosParserRuleCall_3_1; }
	}
	public class PackageClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.packageClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackageNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackageNameIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cPackageNameAssignment_1.eContents().get(0);
		
		////PackageClause  = "package" PackageName .
		////PackageName    = identifier .
		//packageClause:
		//	'package' packageName=IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//'package' packageName=IDENTIFIER
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//packageName=IDENTIFIER
		public Assignment getPackageNameAssignment_1() { return cPackageNameAssignment_1; }
		
		//IDENTIFIER
		public RuleCall getPackageNameIDENTIFIERTerminalRuleCall_1_0() { return cPackageNameIDENTIFIERTerminalRuleCall_1_0; }
	}
	public class ImportDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.importDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cSpecsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cSpecsImportSpecParserRuleCall_1_0_0 = (RuleCall)cSpecsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cSpecsAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cSpecsImportSpecParserRuleCall_1_1_1_0_0 = (RuleCall)cSpecsAssignment_1_1_1_0.eContents().get(0);
		private final RuleCall cEosParserRuleCall_1_1_1_1 = (RuleCall)cGroup_1_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//importDecl:
		//	'import' (specs+=importSpec | '(' (specs+=importSpec eos?)* ')');
		@Override public ParserRule getRule() { return rule; }
		
		//'import' (specs+=importSpec | '(' (specs+=importSpec eos?)* ')')
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//specs+=importSpec | '(' (specs+=importSpec eos?)* ')'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//specs+=importSpec
		public Assignment getSpecsAssignment_1_0() { return cSpecsAssignment_1_0; }
		
		//importSpec
		public RuleCall getSpecsImportSpecParserRuleCall_1_0_0() { return cSpecsImportSpecParserRuleCall_1_0_0; }
		
		//'(' (specs+=importSpec eos?)* ')'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//(specs+=importSpec eos?)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//specs+=importSpec
		public Assignment getSpecsAssignment_1_1_1_0() { return cSpecsAssignment_1_1_1_0; }
		
		//importSpec
		public RuleCall getSpecsImportSpecParserRuleCall_1_1_1_0_0() { return cSpecsImportSpecParserRuleCall_1_1_1_0_0; }
		
		//eos?
		public RuleCall getEosParserRuleCall_1_1_1_1() { return cEosParserRuleCall_1_1_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}
	public class ImportSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.importSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathImportPathParserRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		
		//importSpec:
		//	('.' | IDENTIFIER)? path=importPath;
		@Override public ParserRule getRule() { return rule; }
		
		//('.' | IDENTIFIER)? path=importPath
		public Group getGroup() { return cGroup; }
		
		//('.' | IDENTIFIER)?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_0() { return cFullStopKeyword_0_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0_1() { return cIDENTIFIERTerminalRuleCall_0_1; }
		
		//path=importPath
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }
		
		//importPath
		public RuleCall getPathImportPathParserRuleCall_1_0() { return cPathImportPathParserRuleCall_1_0; }
	}
	public class ImportPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.importPath");
		private final RuleCall cSTRING_LITTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//importPath:
		//	STRING_LIT;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING_LIT
		public RuleCall getSTRING_LITTerminalRuleCall() { return cSTRING_LITTerminalRuleCall; }
	}
	public class TopLevelDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.topLevelDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDeclAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDeclDeclarationParserRuleCall_0_0 = (RuleCall)cDeclAssignment_0.eContents().get(0);
		private final Assignment cDeclAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cDeclFunctionDeclParserRuleCall_1_0 = (RuleCall)cDeclAssignment_1.eContents().get(0);
		private final Assignment cDeclAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cDeclMethodDeclParserRuleCall_2_0 = (RuleCall)cDeclAssignment_2.eContents().get(0);
		
		////TopLevelDecl  = Declaration | FunctionDecl | MethodDecl .
		//topLevelDecl:
		//	decl=declaration
		//	| decl=functionDecl
		//	| decl=methodDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//decl=declaration | decl=functionDecl | decl=methodDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//decl=declaration
		public Assignment getDeclAssignment_0() { return cDeclAssignment_0; }
		
		//declaration
		public RuleCall getDeclDeclarationParserRuleCall_0_0() { return cDeclDeclarationParserRuleCall_0_0; }
		
		//decl=functionDecl
		public Assignment getDeclAssignment_1() { return cDeclAssignment_1; }
		
		//functionDecl
		public RuleCall getDeclFunctionDeclParserRuleCall_1_0() { return cDeclFunctionDeclParserRuleCall_1_0; }
		
		//decl=methodDecl
		public Assignment getDeclAssignment_2() { return cDeclAssignment_2; }
		
		//methodDecl
		public RuleCall getDeclMethodDeclParserRuleCall_2_0() { return cDeclMethodDeclParserRuleCall_2_0; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDeclAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDeclConstDeclParserRuleCall_0_0 = (RuleCall)cDeclAssignment_0.eContents().get(0);
		private final Assignment cDeclAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cDeclTypeDeclParserRuleCall_1_0 = (RuleCall)cDeclAssignment_1.eContents().get(0);
		private final Assignment cDeclAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cDeclVarDeclParserRuleCall_2_0 = (RuleCall)cDeclAssignment_2.eContents().get(0);
		
		////Declaration   = ConstDecl | TypeDecl | VarDecl .
		//declaration:
		//	decl=constDecl
		//	| decl=typeDecl
		//	| decl=varDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//decl=constDecl | decl=typeDecl | decl=varDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//decl=constDecl
		public Assignment getDeclAssignment_0() { return cDeclAssignment_0; }
		
		//constDecl
		public RuleCall getDeclConstDeclParserRuleCall_0_0() { return cDeclConstDeclParserRuleCall_0_0; }
		
		//decl=typeDecl
		public Assignment getDeclAssignment_1() { return cDeclAssignment_1; }
		
		//typeDecl
		public RuleCall getDeclTypeDeclParserRuleCall_1_0() { return cDeclTypeDeclParserRuleCall_1_0; }
		
		//decl=varDecl
		public Assignment getDeclAssignment_2() { return cDeclAssignment_2; }
		
		//varDecl
		public RuleCall getDeclVarDeclParserRuleCall_2_0() { return cDeclVarDeclParserRuleCall_2_0; }
	}
	public class ConstDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.constDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cSpecAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cSpecConstSpecParserRuleCall_1_0_0 = (RuleCall)cSpecAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cSpecAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cSpecConstSpecParserRuleCall_1_1_1_0_0 = (RuleCall)cSpecAssignment_1_1_1_0.eContents().get(0);
		private final RuleCall cEosParserRuleCall_1_1_1_1 = (RuleCall)cGroup_1_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		////ConstDecl      = "const" ( ConstSpec | "(" { ConstSpec ";" } ")" ) .
		//constDecl:
		//	'const' (spec+=constSpec | '(' (spec+=constSpec eos?)* ')');
		@Override public ParserRule getRule() { return rule; }
		
		//'const' (spec+=constSpec | '(' (spec+=constSpec eos?)* ')')
		public Group getGroup() { return cGroup; }
		
		//'const'
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }
		
		//spec+=constSpec | '(' (spec+=constSpec eos?)* ')'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//spec+=constSpec
		public Assignment getSpecAssignment_1_0() { return cSpecAssignment_1_0; }
		
		//constSpec
		public RuleCall getSpecConstSpecParserRuleCall_1_0_0() { return cSpecConstSpecParserRuleCall_1_0_0; }
		
		//'(' (spec+=constSpec eos?)* ')'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//(spec+=constSpec eos?)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//spec+=constSpec
		public Assignment getSpecAssignment_1_1_1_0() { return cSpecAssignment_1_1_1_0; }
		
		//constSpec
		public RuleCall getSpecConstSpecParserRuleCall_1_1_1_0_0() { return cSpecConstSpecParserRuleCall_1_1_1_0_0; }
		
		//eos?
		public RuleCall getEosParserRuleCall_1_1_1_1() { return cEosParserRuleCall_1_1_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}
	public class ConstSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.constSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifiersIdentifierListParserRuleCall_0_0 = (RuleCall)cIdentifiersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_1_0_0 = (RuleCall)cTypeAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionExpressionListParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		
		////ConstSpec      = IdentifierList [ [ Type ] "=" ExpressionList ] .
		//constSpec:
		//	identifiers=identifierList (type=type? '=' expression=expressionList)?;
		@Override public ParserRule getRule() { return rule; }
		
		//identifiers=identifierList (type=type? '=' expression=expressionList)?
		public Group getGroup() { return cGroup; }
		
		//identifiers=identifierList
		public Assignment getIdentifiersAssignment_0() { return cIdentifiersAssignment_0; }
		
		//identifierList
		public RuleCall getIdentifiersIdentifierListParserRuleCall_0_0() { return cIdentifiersIdentifierListParserRuleCall_0_0; }
		
		//(type=type? '=' expression=expressionList)?
		public Group getGroup_1() { return cGroup_1; }
		
		//type=type?
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_1_0_0() { return cTypeTypeParserRuleCall_1_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//expression=expressionList
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//expressionList
		public RuleCall getExpressionExpressionListParserRuleCall_1_2_0() { return cExpressionExpressionListParserRuleCall_1_2_0; }
	}
	public class IdentifierListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.identifierList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdsIDENTIFIERTerminalRuleCall_0_0 = (RuleCall)cIdsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdsIDENTIFIERTerminalRuleCall_1_1_0 = (RuleCall)cIdsAssignment_1_1.eContents().get(0);
		
		////
		////IdentifierList = identifier { "," identifier } .
		//identifierList:
		//	ids+=IDENTIFIER (',' ids+=IDENTIFIER)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ids+=IDENTIFIER (',' ids+=IDENTIFIER)*
		public Group getGroup() { return cGroup; }
		
		//ids+=IDENTIFIER
		public Assignment getIdsAssignment_0() { return cIdsAssignment_0; }
		
		//IDENTIFIER
		public RuleCall getIdsIDENTIFIERTerminalRuleCall_0_0() { return cIdsIDENTIFIERTerminalRuleCall_0_0; }
		
		//(',' ids+=IDENTIFIER)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ids+=IDENTIFIER
		public Assignment getIdsAssignment_1_1() { return cIdsAssignment_1_1; }
		
		//IDENTIFIER
		public RuleCall getIdsIDENTIFIERTerminalRuleCall_1_1_0() { return cIdsIDENTIFIERTerminalRuleCall_1_1_0; }
	}
	public class ExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.expressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprExpressionParserRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_1_0 = (RuleCall)cExprAssignment_1_1.eContents().get(0);
		
		////ExpressionList = Expression { "," Expression } .
		//expressionList:
		//	expr+=expression (',' expr+=expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//expr+=expression (',' expr+=expression)*
		public Group getGroup() { return cGroup; }
		
		//expr+=expression
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }
		
		//expression
		public RuleCall getExprExpressionParserRuleCall_0_0() { return cExprExpressionParserRuleCall_0_0; }
		
		//(',' expr+=expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//expr+=expression
		public Assignment getExprAssignment_1_1() { return cExprAssignment_1_1; }
		
		//expression
		public RuleCall getExprExpressionParserRuleCall_1_1_0() { return cExprExpressionParserRuleCall_1_1_0; }
	}
	public class TypeDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.typeDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cSpecAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cSpecTypeSpecParserRuleCall_1_0_0 = (RuleCall)cSpecAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cSpecAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cSpecTypeSpecParserRuleCall_1_1_1_0_0 = (RuleCall)cSpecAssignment_1_1_1_0.eContents().get(0);
		private final RuleCall cEosParserRuleCall_1_1_1_1 = (RuleCall)cGroup_1_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		////TypeDecl     = "type" ( TypeSpec | "(" { TypeSpec ";" } ")" ) .
		//typeDecl:
		//	'type' (spec+=typeSpec | '(' (spec+=typeSpec eos)* ')');
		@Override public ParserRule getRule() { return rule; }
		
		//'type' (spec+=typeSpec | '(' (spec+=typeSpec eos)* ')')
		public Group getGroup() { return cGroup; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//spec+=typeSpec | '(' (spec+=typeSpec eos)* ')'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//spec+=typeSpec
		public Assignment getSpecAssignment_1_0() { return cSpecAssignment_1_0; }
		
		//typeSpec
		public RuleCall getSpecTypeSpecParserRuleCall_1_0_0() { return cSpecTypeSpecParserRuleCall_1_0_0; }
		
		//'(' (spec+=typeSpec eos)* ')'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//(spec+=typeSpec eos)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//spec+=typeSpec
		public Assignment getSpecAssignment_1_1_1_0() { return cSpecAssignment_1_1_1_0; }
		
		//typeSpec
		public RuleCall getSpecTypeSpecParserRuleCall_1_1_1_0_0() { return cSpecTypeSpecParserRuleCall_1_1_1_0_0; }
		
		//eos
		public RuleCall getEosParserRuleCall_1_1_1_1() { return cEosParserRuleCall_1_1_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}
	public class TypeSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.typeSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		////TypeSpec     = identifier Type .
		//typeSpec:
		//	name=IDENTIFIER type=type;
		@Override public ParserRule getRule() { return rule; }
		
		//name=IDENTIFIER type=type
		public Group getGroup() { return cGroup; }
		
		//name=IDENTIFIER
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_0_0() { return cNameIDENTIFIERTerminalRuleCall_0_0; }
		
		//type=type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
	}
	public class FunctionDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.functionDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cFuncAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cFuncFunctionParserRuleCall_2_0_0 = (RuleCall)cFuncAssignment_2_0.eContents().get(0);
		private final Assignment cSigAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cSigSignatureParserRuleCall_2_1_0 = (RuleCall)cSigAssignment_2_1.eContents().get(0);
		
		//// Function declarations
		////FunctionDecl = "func" FunctionName ( Function | Signature ) .
		////FunctionName = identifier .
		////Function     = Signature FunctionBody .
		////FunctionBody = Block .
		//functionDecl:
		//	'func' name=IDENTIFIER (func=function | sig=signature);
		@Override public ParserRule getRule() { return rule; }
		
		//'func' name=IDENTIFIER (func=function | sig=signature)
		public Group getGroup() { return cGroup; }
		
		//'func'
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//name=IDENTIFIER
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_1_0() { return cNameIDENTIFIERTerminalRuleCall_1_0; }
		
		//func=function | sig=signature
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//func=function
		public Assignment getFuncAssignment_2_0() { return cFuncAssignment_2_0; }
		
		//function
		public RuleCall getFuncFunctionParserRuleCall_2_0_0() { return cFuncFunctionParserRuleCall_2_0_0; }
		
		//sig=signature
		public Assignment getSigAssignment_2_1() { return cSigAssignment_2_1; }
		
		//signature
		public RuleCall getSigSignatureParserRuleCall_2_1_0() { return cSigSignatureParserRuleCall_2_1_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSigAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSigSignatureParserRuleCall_0_0 = (RuleCall)cSigAssignment_0.eContents().get(0);
		private final Assignment cCodeBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCodeBlockBlockParserRuleCall_1_0 = (RuleCall)cCodeBlockAssignment_1.eContents().get(0);
		
		//function:
		//	sig=signature codeBlock=block;
		@Override public ParserRule getRule() { return rule; }
		
		//sig=signature codeBlock=block
		public Group getGroup() { return cGroup; }
		
		//sig=signature
		public Assignment getSigAssignment_0() { return cSigAssignment_0; }
		
		//signature
		public RuleCall getSigSignatureParserRuleCall_0_0() { return cSigSignatureParserRuleCall_0_0; }
		
		//codeBlock=block
		public Assignment getCodeBlockAssignment_1() { return cCodeBlockAssignment_1; }
		
		//block
		public RuleCall getCodeBlockBlockParserRuleCall_1_0() { return cCodeBlockBlockParserRuleCall_1_0; }
	}
	public class MethodDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.methodDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParamsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamsReceiverParserRuleCall_1_0 = (RuleCall)cParamsAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cFuncAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cFuncFunctionParserRuleCall_3_0_0 = (RuleCall)cFuncAssignment_3_0.eContents().get(0);
		private final Assignment cSigAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cSigSignatureParserRuleCall_3_1_0 = (RuleCall)cSigAssignment_3_1.eContents().get(0);
		
		////MethodDecl   = "func" Receiver MethodName ( Function | Signature ) .
		////Receiver     = Parameters .
		//methodDecl:
		//	'func' params=receiver name=IDENTIFIER (func=function | sig=signature);
		@Override public ParserRule getRule() { return rule; }
		
		//'func' params=receiver name=IDENTIFIER (func=function | sig=signature)
		public Group getGroup() { return cGroup; }
		
		//'func'
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//params=receiver
		public Assignment getParamsAssignment_1() { return cParamsAssignment_1; }
		
		//receiver
		public RuleCall getParamsReceiverParserRuleCall_1_0() { return cParamsReceiverParserRuleCall_1_0; }
		
		//name=IDENTIFIER
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_2_0() { return cNameIDENTIFIERTerminalRuleCall_2_0; }
		
		//func=function | sig=signature
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//func=function
		public Assignment getFuncAssignment_3_0() { return cFuncAssignment_3_0; }
		
		//function
		public RuleCall getFuncFunctionParserRuleCall_3_0_0() { return cFuncFunctionParserRuleCall_3_0_0; }
		
		//sig=signature
		public Assignment getSigAssignment_3_1() { return cSigAssignment_3_1; }
		
		//signature
		public RuleCall getSigSignatureParserRuleCall_3_1_0() { return cSigSignatureParserRuleCall_3_1_0; }
	}
	public class ReceiverElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.receiver");
		private final Assignment cParamsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cParamsParametersParserRuleCall_0 = (RuleCall)cParamsAssignment.eContents().get(0);
		
		//receiver:
		//	params=parameters;
		@Override public ParserRule getRule() { return rule; }
		
		//params=parameters
		public Assignment getParamsAssignment() { return cParamsAssignment; }
		
		//parameters
		public RuleCall getParamsParametersParserRuleCall_0() { return cParamsParametersParserRuleCall_0; }
	}
	public class VarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.varDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cSpecsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cSpecsVarSpecParserRuleCall_1_0_0 = (RuleCall)cSpecsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cSpecsAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cSpecsVarSpecParserRuleCall_1_1_1_0_0 = (RuleCall)cSpecsAssignment_1_1_1_0.eContents().get(0);
		private final RuleCall cEosParserRuleCall_1_1_1_1 = (RuleCall)cGroup_1_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		////VarDecl     = "var" ( VarSpec | "(" { VarSpec ";" } ")" ) .
		////VarSpec     = IdentifierList ( Type [ "=" ExpressionList ] | "=" ExpressionList ) .
		//varDecl:
		//	'var' (specs+=varSpec | '(' (specs+=varSpec eos)* ')');
		@Override public ParserRule getRule() { return rule; }
		
		//'var' (specs+=varSpec | '(' (specs+=varSpec eos)* ')')
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//specs+=varSpec | '(' (specs+=varSpec eos)* ')'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//specs+=varSpec
		public Assignment getSpecsAssignment_1_0() { return cSpecsAssignment_1_0; }
		
		//varSpec
		public RuleCall getSpecsVarSpecParserRuleCall_1_0_0() { return cSpecsVarSpecParserRuleCall_1_0_0; }
		
		//'(' (specs+=varSpec eos)* ')'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//(specs+=varSpec eos)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//specs+=varSpec
		public Assignment getSpecsAssignment_1_1_1_0() { return cSpecsAssignment_1_1_1_0; }
		
		//varSpec
		public RuleCall getSpecsVarSpecParserRuleCall_1_1_1_0_0() { return cSpecsVarSpecParserRuleCall_1_1_1_0_0; }
		
		//eos
		public RuleCall getEosParserRuleCall_1_1_1_1() { return cEosParserRuleCall_1_1_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}
	public class VarSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.varSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdListIdentifierListParserRuleCall_0_0 = (RuleCall)cIdListAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_1_0_0_0 = (RuleCall)cTypeAssignment_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cExprListAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cExprListExpressionListParserRuleCall_1_0_1_1_0 = (RuleCall)cExprListAssignment_1_0_1_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cExprListAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExprListExpressionListParserRuleCall_1_1_1_0 = (RuleCall)cExprListAssignment_1_1_1.eContents().get(0);
		
		//varSpec:
		//	idList=identifierList (type=type ('=' exprList+=expressionList)? |
		//	'=' exprList+=expressionList);
		@Override public ParserRule getRule() { return rule; }
		
		//idList=identifierList (type=type ('=' exprList+=expressionList)? | '=' exprList+=expressionList)
		public Group getGroup() { return cGroup; }
		
		//idList=identifierList
		public Assignment getIdListAssignment_0() { return cIdListAssignment_0; }
		
		//identifierList
		public RuleCall getIdListIdentifierListParserRuleCall_0_0() { return cIdListIdentifierListParserRuleCall_0_0; }
		
		//type=type ('=' exprList+=expressionList)? | '=' exprList+=expressionList
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//type=type ('=' exprList+=expressionList)?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//type=type
		public Assignment getTypeAssignment_1_0_0() { return cTypeAssignment_1_0_0; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_1_0_0_0() { return cTypeTypeParserRuleCall_1_0_0_0; }
		
		//('=' exprList+=expressionList)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0_1_0() { return cEqualsSignKeyword_1_0_1_0; }
		
		//exprList+=expressionList
		public Assignment getExprListAssignment_1_0_1_1() { return cExprListAssignment_1_0_1_1; }
		
		//expressionList
		public RuleCall getExprListExpressionListParserRuleCall_1_0_1_1_0() { return cExprListExpressionListParserRuleCall_1_0_1_1_0; }
		
		//'=' exprList+=expressionList
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1_0() { return cEqualsSignKeyword_1_1_0; }
		
		//exprList+=expressionList
		public Assignment getExprListAssignment_1_1_1() { return cExprListAssignment_1_1_1; }
		
		//expressionList
		public RuleCall getExprListExpressionListParserRuleCall_1_1_1_0() { return cExprListExpressionListParserRuleCall_1_1_1_0; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsStatementListParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		////Block = "{" StatementList "}" .
		//block:
		//	'{' statements=statementList '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' statements=statementList '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//statements=statementList
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }
		
		//statementList
		public RuleCall getStatementsStatementListParserRuleCall_1_0() { return cStatementsStatementListParserRuleCall_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class StatementListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.statementList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStatementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStatementsStatementParserRuleCall_0_0 = (RuleCall)cStatementsAssignment_0.eContents().get(0);
		private final RuleCall cEosParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////StatementList = { Statement ";" } .
		//statementList:
		//	(statements+=statement eos)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(statements+=statement eos)*
		public Group getGroup() { return cGroup; }
		
		//statements+=statement
		public Assignment getStatementsAssignment_0() { return cStatementsAssignment_0; }
		
		//statement
		public RuleCall getStatementsStatementParserRuleCall_0_0() { return cStatementsStatementParserRuleCall_0_0; }
		
		//eos
		public RuleCall getEosParserRuleCall_1() { return cEosParserRuleCall_1; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDeclarationAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDeclarationDeclarationParserRuleCall_0_0 = (RuleCall)cDeclarationAssignment_0.eContents().get(0);
		private final Assignment cLabeledStmtAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cLabeledStmtLabeledStmtParserRuleCall_1_0 = (RuleCall)cLabeledStmtAssignment_1.eContents().get(0);
		private final Assignment cSimpleStmtAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSimpleStmtSimpleStmtParserRuleCall_2_0 = (RuleCall)cSimpleStmtAssignment_2.eContents().get(0);
		private final Assignment cGoStmtAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cGoStmtGoStmtParserRuleCall_3_0 = (RuleCall)cGoStmtAssignment_3.eContents().get(0);
		private final Assignment cReturnStmtAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cReturnStmtReturnStmtParserRuleCall_4_0 = (RuleCall)cReturnStmtAssignment_4.eContents().get(0);
		private final Assignment cBreakStmtAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cBreakStmtBreakStmtParserRuleCall_5_0 = (RuleCall)cBreakStmtAssignment_5.eContents().get(0);
		private final Assignment cContinueStmtAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cContinueStmtContinueStmtParserRuleCall_6_0 = (RuleCall)cContinueStmtAssignment_6.eContents().get(0);
		private final Assignment cGotoStmtAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cGotoStmtGotoStmtParserRuleCall_7_0 = (RuleCall)cGotoStmtAssignment_7.eContents().get(0);
		private final Assignment cFallthroughStmtAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cFallthroughStmtFallthroughStmtParserRuleCall_8_0 = (RuleCall)cFallthroughStmtAssignment_8.eContents().get(0);
		private final Assignment cBlockAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final RuleCall cBlockBlockParserRuleCall_9_0 = (RuleCall)cBlockAssignment_9.eContents().get(0);
		private final Assignment cIfStmtAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final RuleCall cIfStmtIfStmtParserRuleCall_10_0 = (RuleCall)cIfStmtAssignment_10.eContents().get(0);
		private final Assignment cSwitchStmtAssignment_11 = (Assignment)cAlternatives.eContents().get(11);
		private final RuleCall cSwitchStmtSwitchStmtParserRuleCall_11_0 = (RuleCall)cSwitchStmtAssignment_11.eContents().get(0);
		private final Assignment cSelectStmtAssignment_12 = (Assignment)cAlternatives.eContents().get(12);
		private final RuleCall cSelectStmtSelectStmtParserRuleCall_12_0 = (RuleCall)cSelectStmtAssignment_12.eContents().get(0);
		private final Assignment cForStmtAssignment_13 = (Assignment)cAlternatives.eContents().get(13);
		private final RuleCall cForStmtForStmtParserRuleCall_13_0 = (RuleCall)cForStmtAssignment_13.eContents().get(0);
		private final Assignment cDeferStmtAssignment_14 = (Assignment)cAlternatives.eContents().get(14);
		private final RuleCall cDeferStmtDeferStmtParserRuleCall_14_0 = (RuleCall)cDeferStmtAssignment_14.eContents().get(0);
		
		//statement:
		//	declaration=declaration
		//	| labeledStmt=labeledStmt
		//	| simpleStmt=simpleStmt
		//	| goStmt=goStmt
		//	| returnStmt=returnStmt
		//	| breakStmt=breakStmt
		//	| continueStmt=continueStmt
		//	| gotoStmt=gotoStmt
		//	| fallthroughStmt=fallthroughStmt
		//	| block=block
		//	| ifStmt=ifStmt
		//	| switchStmt=switchStmt
		//	| selectStmt=selectStmt
		//	| forStmt=forStmt
		//	| deferStmt=deferStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//declaration=declaration | labeledStmt=labeledStmt | simpleStmt=simpleStmt | goStmt=goStmt | returnStmt=returnStmt |
		//breakStmt=breakStmt | continueStmt=continueStmt | gotoStmt=gotoStmt | fallthroughStmt=fallthroughStmt | block=block |
		//ifStmt=ifStmt | switchStmt=switchStmt | selectStmt=selectStmt | forStmt=forStmt | deferStmt=deferStmt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//declaration=declaration
		public Assignment getDeclarationAssignment_0() { return cDeclarationAssignment_0; }
		
		//declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_0_0() { return cDeclarationDeclarationParserRuleCall_0_0; }
		
		//labeledStmt=labeledStmt
		public Assignment getLabeledStmtAssignment_1() { return cLabeledStmtAssignment_1; }
		
		//labeledStmt
		public RuleCall getLabeledStmtLabeledStmtParserRuleCall_1_0() { return cLabeledStmtLabeledStmtParserRuleCall_1_0; }
		
		//simpleStmt=simpleStmt
		public Assignment getSimpleStmtAssignment_2() { return cSimpleStmtAssignment_2; }
		
		//simpleStmt
		public RuleCall getSimpleStmtSimpleStmtParserRuleCall_2_0() { return cSimpleStmtSimpleStmtParserRuleCall_2_0; }
		
		//goStmt=goStmt
		public Assignment getGoStmtAssignment_3() { return cGoStmtAssignment_3; }
		
		//goStmt
		public RuleCall getGoStmtGoStmtParserRuleCall_3_0() { return cGoStmtGoStmtParserRuleCall_3_0; }
		
		//returnStmt=returnStmt
		public Assignment getReturnStmtAssignment_4() { return cReturnStmtAssignment_4; }
		
		//returnStmt
		public RuleCall getReturnStmtReturnStmtParserRuleCall_4_0() { return cReturnStmtReturnStmtParserRuleCall_4_0; }
		
		//breakStmt=breakStmt
		public Assignment getBreakStmtAssignment_5() { return cBreakStmtAssignment_5; }
		
		//breakStmt
		public RuleCall getBreakStmtBreakStmtParserRuleCall_5_0() { return cBreakStmtBreakStmtParserRuleCall_5_0; }
		
		//continueStmt=continueStmt
		public Assignment getContinueStmtAssignment_6() { return cContinueStmtAssignment_6; }
		
		//continueStmt
		public RuleCall getContinueStmtContinueStmtParserRuleCall_6_0() { return cContinueStmtContinueStmtParserRuleCall_6_0; }
		
		//gotoStmt=gotoStmt
		public Assignment getGotoStmtAssignment_7() { return cGotoStmtAssignment_7; }
		
		//gotoStmt
		public RuleCall getGotoStmtGotoStmtParserRuleCall_7_0() { return cGotoStmtGotoStmtParserRuleCall_7_0; }
		
		//fallthroughStmt=fallthroughStmt
		public Assignment getFallthroughStmtAssignment_8() { return cFallthroughStmtAssignment_8; }
		
		//fallthroughStmt
		public RuleCall getFallthroughStmtFallthroughStmtParserRuleCall_8_0() { return cFallthroughStmtFallthroughStmtParserRuleCall_8_0; }
		
		//block=block
		public Assignment getBlockAssignment_9() { return cBlockAssignment_9; }
		
		//block
		public RuleCall getBlockBlockParserRuleCall_9_0() { return cBlockBlockParserRuleCall_9_0; }
		
		//ifStmt=ifStmt
		public Assignment getIfStmtAssignment_10() { return cIfStmtAssignment_10; }
		
		//ifStmt
		public RuleCall getIfStmtIfStmtParserRuleCall_10_0() { return cIfStmtIfStmtParserRuleCall_10_0; }
		
		//switchStmt=switchStmt
		public Assignment getSwitchStmtAssignment_11() { return cSwitchStmtAssignment_11; }
		
		//switchStmt
		public RuleCall getSwitchStmtSwitchStmtParserRuleCall_11_0() { return cSwitchStmtSwitchStmtParserRuleCall_11_0; }
		
		//selectStmt=selectStmt
		public Assignment getSelectStmtAssignment_12() { return cSelectStmtAssignment_12; }
		
		//selectStmt
		public RuleCall getSelectStmtSelectStmtParserRuleCall_12_0() { return cSelectStmtSelectStmtParserRuleCall_12_0; }
		
		//forStmt=forStmt
		public Assignment getForStmtAssignment_13() { return cForStmtAssignment_13; }
		
		//forStmt
		public RuleCall getForStmtForStmtParserRuleCall_13_0() { return cForStmtForStmtParserRuleCall_13_0; }
		
		//deferStmt=deferStmt
		public Assignment getDeferStmtAssignment_14() { return cDeferStmtAssignment_14; }
		
		//deferStmt
		public RuleCall getDeferStmtDeferStmtParserRuleCall_14_0() { return cDeferStmtDeferStmtParserRuleCall_14_0; }
	}
	public class SimpleStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.simpleStmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSendStmtAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSendStmtSendStmtParserRuleCall_0_0 = (RuleCall)cSendStmtAssignment_0.eContents().get(0);
		private final Assignment cExpressionStmtAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionStmtExpressionStmtParserRuleCall_1_0 = (RuleCall)cExpressionStmtAssignment_1.eContents().get(0);
		private final Assignment cIncDecStmtAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cIncDecStmtIncDecStmtParserRuleCall_2_0 = (RuleCall)cIncDecStmtAssignment_2.eContents().get(0);
		private final Assignment cAssignmentAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cAssignmentAssignmentParserRuleCall_3_0 = (RuleCall)cAssignmentAssignment_3.eContents().get(0);
		private final Assignment cShortVarDeclAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cShortVarDeclShortVarDeclParserRuleCall_4_0 = (RuleCall)cShortVarDeclAssignment_4.eContents().get(0);
		private final Assignment cEmptyStmtAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cEmptyStmtEmptyStmtParserRuleCall_5_0 = (RuleCall)cEmptyStmtAssignment_5.eContents().get(0);
		
		////SimpleStmt = EmptyStmt | ExpressionStmt | SendStmt | IncDecStmt | Assignment | ShortVarDecl .
		//simpleStmt:
		//	sendStmt=sendStmt
		//	| expressionStmt=expressionStmt
		//	| incDecStmt=incDecStmt
		//	| assignment=assignment
		//	| shortVarDecl=shortVarDecl
		//	| emptyStmt=emptyStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//sendStmt=sendStmt | expressionStmt=expressionStmt | incDecStmt=incDecStmt | assignment=assignment |
		//shortVarDecl=shortVarDecl | emptyStmt=emptyStmt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//sendStmt=sendStmt
		public Assignment getSendStmtAssignment_0() { return cSendStmtAssignment_0; }
		
		//sendStmt
		public RuleCall getSendStmtSendStmtParserRuleCall_0_0() { return cSendStmtSendStmtParserRuleCall_0_0; }
		
		//expressionStmt=expressionStmt
		public Assignment getExpressionStmtAssignment_1() { return cExpressionStmtAssignment_1; }
		
		//expressionStmt
		public RuleCall getExpressionStmtExpressionStmtParserRuleCall_1_0() { return cExpressionStmtExpressionStmtParserRuleCall_1_0; }
		
		//incDecStmt=incDecStmt
		public Assignment getIncDecStmtAssignment_2() { return cIncDecStmtAssignment_2; }
		
		//incDecStmt
		public RuleCall getIncDecStmtIncDecStmtParserRuleCall_2_0() { return cIncDecStmtIncDecStmtParserRuleCall_2_0; }
		
		//assignment=assignment
		public Assignment getAssignmentAssignment_3() { return cAssignmentAssignment_3; }
		
		//assignment
		public RuleCall getAssignmentAssignmentParserRuleCall_3_0() { return cAssignmentAssignmentParserRuleCall_3_0; }
		
		//shortVarDecl=shortVarDecl
		public Assignment getShortVarDeclAssignment_4() { return cShortVarDeclAssignment_4; }
		
		//shortVarDecl
		public RuleCall getShortVarDeclShortVarDeclParserRuleCall_4_0() { return cShortVarDeclShortVarDeclParserRuleCall_4_0; }
		
		//emptyStmt=emptyStmt
		public Assignment getEmptyStmtAssignment_5() { return cEmptyStmtAssignment_5; }
		
		//emptyStmt
		public RuleCall getEmptyStmtEmptyStmtParserRuleCall_5_0() { return cEmptyStmtEmptyStmtParserRuleCall_5_0; }
	}
	public class ExpressionStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.expressionStmt");
		private final Assignment cExprAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_0 = (RuleCall)cExprAssignment.eContents().get(0);
		
		////ExpressionStmt = Expression .
		//expressionStmt:
		//	expr=expression;
		@Override public ParserRule getRule() { return rule; }
		
		//expr=expression
		public Assignment getExprAssignment() { return cExprAssignment; }
		
		//expression
		public RuleCall getExprExpressionParserRuleCall_0() { return cExprExpressionParserRuleCall_0; }
	}
	public class SendStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.sendStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpr1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpr1ExpressionParserRuleCall_0_0 = (RuleCall)cExpr1Assignment_0.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpr2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpr2ExpressionParserRuleCall_2_0 = (RuleCall)cExpr2Assignment_2.eContents().get(0);
		
		////SendStmt = Channel "<-" Expression .
		////Channel  = Expression .
		//sendStmt:
		//	expr1=expression '<-' expr2=expression;
		@Override public ParserRule getRule() { return rule; }
		
		//expr1=expression '<-' expr2=expression
		public Group getGroup() { return cGroup; }
		
		//expr1=expression
		public Assignment getExpr1Assignment_0() { return cExpr1Assignment_0; }
		
		//expression
		public RuleCall getExpr1ExpressionParserRuleCall_0_0() { return cExpr1ExpressionParserRuleCall_0_0; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_1() { return cLessThanSignHyphenMinusKeyword_1; }
		
		//expr2=expression
		public Assignment getExpr2Assignment_2() { return cExpr2Assignment_2; }
		
		//expression
		public RuleCall getExpr2ExpressionParserRuleCall_2_0() { return cExpr2ExpressionParserRuleCall_2_0; }
	}
	public class IncDecStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.incDecStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprExpressionParserRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		////IncDecStmt = Expression ( "++" | "--" ) .
		//incDecStmt:
		//	expr=expression ('++' | '--');
		@Override public ParserRule getRule() { return rule; }
		
		//expr=expression ('++' | '--')
		public Group getGroup() { return cGroup; }
		
		//expr=expression
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }
		
		//expression
		public RuleCall getExprExpressionParserRuleCall_0_0() { return cExprExpressionParserRuleCall_0_0; }
		
		//'++' | '--'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'++'
		public Keyword getPlusSignPlusSignKeyword_1_0() { return cPlusSignPlusSignKeyword_1_0; }
		
		//'--'
		public Keyword getHyphenMinusHyphenMinusKeyword_1_1() { return cHyphenMinusHyphenMinusKeyword_1_1; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprList1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprList1ExpressionListParserRuleCall_0_0 = (RuleCall)cExprList1Assignment_0.eContents().get(0);
		private final Assignment cOperationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperationAssign_opParserRuleCall_1_0 = (RuleCall)cOperationAssignment_1.eContents().get(0);
		private final Assignment cExprList2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprList2ExpressionListParserRuleCall_2_0 = (RuleCall)cExprList2Assignment_2.eContents().get(0);
		
		////Assignment = ExpressionList assign_op ExpressionList .
		//assignment:
		//	exprList1=expressionList operation=assign_op
		//	exprList2=expressionList;
		@Override public ParserRule getRule() { return rule; }
		
		//exprList1=expressionList operation=assign_op exprList2=expressionList
		public Group getGroup() { return cGroup; }
		
		//exprList1=expressionList
		public Assignment getExprList1Assignment_0() { return cExprList1Assignment_0; }
		
		//expressionList
		public RuleCall getExprList1ExpressionListParserRuleCall_0_0() { return cExprList1ExpressionListParserRuleCall_0_0; }
		
		//operation=assign_op
		public Assignment getOperationAssignment_1() { return cOperationAssignment_1; }
		
		//assign_op
		public RuleCall getOperationAssign_opParserRuleCall_1_0() { return cOperationAssign_opParserRuleCall_1_0; }
		
		//exprList2=expressionList
		public Assignment getExprList2Assignment_2() { return cExprList2Assignment_2; }
		
		//expressionList
		public RuleCall getExprList2ExpressionListParserRuleCall_2_0() { return cExprList2ExpressionListParserRuleCall_2_0; }
	}
	public class Assign_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.assign_op");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cCircumflexAccentKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Keyword cAsteriskKeyword_0_4 = (Keyword)cAlternatives_0.eContents().get(4);
		private final Keyword cSolidusKeyword_0_5 = (Keyword)cAlternatives_0.eContents().get(5);
		private final Keyword cPercentSignKeyword_0_6 = (Keyword)cAlternatives_0.eContents().get(6);
		private final Keyword cLessThanSignLessThanSignKeyword_0_7 = (Keyword)cAlternatives_0.eContents().get(7);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_0_8 = (Keyword)cAlternatives_0.eContents().get(8);
		private final Keyword cAmpersandKeyword_0_9 = (Keyword)cAlternatives_0.eContents().get(9);
		private final Keyword cAmpersandCircumflexAccentKeyword_0_10 = (Keyword)cAlternatives_0.eContents().get(10);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		////assign_op =  add_op | mul_op ] "=" .
		//assign_op:
		//	('+' | '-' | '|' | '^' | '*' | '/' | '%' | '<<' | '>>' | '&' | '&^')? '=';
		@Override public ParserRule getRule() { return rule; }
		
		//('+' | '-' | '|' | '^' | '*' | '/' | '%' | '<<' | '>>' | '&' | '&^')? '='
		public Group getGroup() { return cGroup; }
		
		//('+' | '-' | '|' | '^' | '*' | '/' | '%' | '<<' | '>>' | '&' | '&^')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_0_2() { return cVerticalLineKeyword_0_2; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_0_3() { return cCircumflexAccentKeyword_0_3; }
		
		//'*'
		public Keyword getAsteriskKeyword_0_4() { return cAsteriskKeyword_0_4; }
		
		//'/'
		public Keyword getSolidusKeyword_0_5() { return cSolidusKeyword_0_5; }
		
		//'%'
		public Keyword getPercentSignKeyword_0_6() { return cPercentSignKeyword_0_6; }
		
		//'<<'
		public Keyword getLessThanSignLessThanSignKeyword_0_7() { return cLessThanSignLessThanSignKeyword_0_7; }
		
		//'>>'
		public Keyword getGreaterThanSignGreaterThanSignKeyword_0_8() { return cGreaterThanSignGreaterThanSignKeyword_0_8; }
		
		//'&'
		public Keyword getAmpersandKeyword_0_9() { return cAmpersandKeyword_0_9; }
		
		//'&^'
		public Keyword getAmpersandCircumflexAccentKeyword_0_10() { return cAmpersandCircumflexAccentKeyword_0_10; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
	}
	public class ShortVarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.shortVarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdListIdentifierListParserRuleCall_0_0 = (RuleCall)cIdListAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprListExpressionListParserRuleCall_2_0 = (RuleCall)cExprListAssignment_2.eContents().get(0);
		
		////ShortVarDecl = IdentifierList ":=" ExpressionList .
		//shortVarDecl:
		//	idList=identifierList ':=' exprList=expressionList;
		@Override public ParserRule getRule() { return rule; }
		
		//idList=identifierList ':=' exprList=expressionList
		public Group getGroup() { return cGroup; }
		
		//idList=identifierList
		public Assignment getIdListAssignment_0() { return cIdListAssignment_0; }
		
		//identifierList
		public RuleCall getIdListIdentifierListParserRuleCall_0_0() { return cIdListIdentifierListParserRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//exprList=expressionList
		public Assignment getExprListAssignment_2() { return cExprListAssignment_2; }
		
		//expressionList
		public RuleCall getExprListExpressionListParserRuleCall_2_0() { return cExprListExpressionListParserRuleCall_2_0; }
	}
	public class EmptyStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.emptyStmt");
		private final Assignment cContentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cContentWSTerminalRuleCall_0 = (RuleCall)cContentAssignment.eContents().get(0);
		
		//emptyStmt:
		//	content=WS;
		@Override public ParserRule getRule() { return rule; }
		
		//content=WS
		public Assignment getContentAssignment() { return cContentAssignment; }
		
		//WS
		public RuleCall getContentWSTerminalRuleCall_0() { return cContentWSTerminalRuleCall_0; }
	}
	public class LabeledStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.labeledStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLabelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLabelIDENTIFIERTerminalRuleCall_0_0 = (RuleCall)cLabelAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStmtAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStmtStatementParserRuleCall_2_0 = (RuleCall)cStmtAssignment_2.eContents().get(0);
		
		////LabeledStmt = Label ":" Statement .
		////Label       = identier .
		//labeledStmt:
		//	label=IDENTIFIER ':' stmt=statement;
		@Override public ParserRule getRule() { return rule; }
		
		//label=IDENTIFIER ':' stmt=statement
		public Group getGroup() { return cGroup; }
		
		//label=IDENTIFIER
		public Assignment getLabelAssignment_0() { return cLabelAssignment_0; }
		
		//IDENTIFIER
		public RuleCall getLabelIDENTIFIERTerminalRuleCall_0_0() { return cLabelIDENTIFIERTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//stmt=statement
		public Assignment getStmtAssignment_2() { return cStmtAssignment_2; }
		
		//statement
		public RuleCall getStmtStatementParserRuleCall_2_0() { return cStmtStatementParserRuleCall_2_0; }
	}
	public class ReturnStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.returnStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprListExpressionListParserRuleCall_1_0 = (RuleCall)cExprListAssignment_1.eContents().get(0);
		
		////ReturnStmt = "return" [ ExpressionList ] .
		//returnStmt:
		//	'return' exprList=expressionList?;
		@Override public ParserRule getRule() { return rule; }
		
		//'return' exprList=expressionList?
		public Group getGroup() { return cGroup; }
		
		//'return'
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//exprList=expressionList?
		public Assignment getExprListAssignment_1() { return cExprListAssignment_1; }
		
		//expressionList
		public RuleCall getExprListExpressionListParserRuleCall_1_0() { return cExprListExpressionListParserRuleCall_1_0; }
	}
	public class BreakStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.breakStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBreakKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		
		////BreakStmt = "break" [ Label ] .
		//breakStmt:
		//	'break' label=IDENTIFIER?;
		@Override public ParserRule getRule() { return rule; }
		
		//'break' label=IDENTIFIER?
		public Group getGroup() { return cGroup; }
		
		//'break'
		public Keyword getBreakKeyword_0() { return cBreakKeyword_0; }
		
		//label=IDENTIFIER?
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }
		
		//IDENTIFIER
		public RuleCall getLabelIDENTIFIERTerminalRuleCall_1_0() { return cLabelIDENTIFIERTerminalRuleCall_1_0; }
	}
	public class ContinueStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.continueStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContinueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		
		////ContinueStmt = "continue" [ Label ] .
		//continueStmt:
		//	'continue' label=IDENTIFIER?;
		@Override public ParserRule getRule() { return rule; }
		
		//'continue' label=IDENTIFIER?
		public Group getGroup() { return cGroup; }
		
		//'continue'
		public Keyword getContinueKeyword_0() { return cContinueKeyword_0; }
		
		//label=IDENTIFIER?
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }
		
		//IDENTIFIER
		public RuleCall getLabelIDENTIFIERTerminalRuleCall_1_0() { return cLabelIDENTIFIERTerminalRuleCall_1_0; }
	}
	public class GotoStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.gotoStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGotoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		
		////GotoStmt = "goto" Label .
		//gotoStmt:
		//	'goto' label=IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//'goto' label=IDENTIFIER
		public Group getGroup() { return cGroup; }
		
		//'goto'
		public Keyword getGotoKeyword_0() { return cGotoKeyword_0; }
		
		//label=IDENTIFIER
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }
		
		//IDENTIFIER
		public RuleCall getLabelIDENTIFIERTerminalRuleCall_1_0() { return cLabelIDENTIFIERTerminalRuleCall_1_0; }
	}
	public class FallthroughStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.fallthroughStmt");
		private final Assignment cContentAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cContentFallthroughKeyword_0 = (Keyword)cContentAssignment.eContents().get(0);
		
		////FallthroughStmt = "fallthrough" .
		//fallthroughStmt:
		//	content='fallthrough';
		@Override public ParserRule getRule() { return rule; }
		
		//content='fallthrough'
		public Assignment getContentAssignment() { return cContentAssignment; }
		
		//'fallthrough'
		public Keyword getContentFallthroughKeyword_0() { return cContentFallthroughKeyword_0; }
	}
	public class DeferStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.deferStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeferKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		////DeferStmt = "defer" Expression .
		//deferStmt:
		//	'defer' expr=expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'defer' expr=expression
		public Group getGroup() { return cGroup; }
		
		//'defer'
		public Keyword getDeferKeyword_0() { return cDeferKeyword_0; }
		
		//expr=expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }
	}
	public class IfStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.ifStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cSimplStatementAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSimplStatementSimpleStmtParserRuleCall_1_0_0 = (RuleCall)cSimplStatementAssignment_1_0.eContents().get(0);
		private final RuleCall cEosParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Assignment cCodeBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCodeBlockBlockParserRuleCall_3_0 = (RuleCall)cCodeBlockAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Assignment cIfStatementAssignment_4_1_0 = (Assignment)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cIfStatementIfStmtParserRuleCall_4_1_0_0 = (RuleCall)cIfStatementAssignment_4_1_0.eContents().get(0);
		private final Assignment cCodeBlockIfAssignment_4_1_1 = (Assignment)cAlternatives_4_1.eContents().get(1);
		private final RuleCall cCodeBlockIfBlockParserRuleCall_4_1_1_0 = (RuleCall)cCodeBlockIfAssignment_4_1_1.eContents().get(0);
		
		////IfStmt = "" [ SimpleStmt ";" ] Expression Block [ "else" ( IfStmt | Block ) ] .
		//ifStmt:
		//	'if' (simplStatement=simpleStmt eos)? expr=expression
		//	codeBlock=block ('else' (ifStatement=ifStmt | codeBlockIf=block))?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' (simplStatement=simpleStmt eos)? expr=expression codeBlock=block ('else' (ifStatement=ifStmt | codeBlockIf=block))?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//(simplStatement=simpleStmt eos)?
		public Group getGroup_1() { return cGroup_1; }
		
		//simplStatement=simpleStmt
		public Assignment getSimplStatementAssignment_1_0() { return cSimplStatementAssignment_1_0; }
		
		//simpleStmt
		public RuleCall getSimplStatementSimpleStmtParserRuleCall_1_0_0() { return cSimplStatementSimpleStmtParserRuleCall_1_0_0; }
		
		//eos
		public RuleCall getEosParserRuleCall_1_1() { return cEosParserRuleCall_1_1; }
		
		//expr=expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }
		
		//codeBlock=block
		public Assignment getCodeBlockAssignment_3() { return cCodeBlockAssignment_3; }
		
		//block
		public RuleCall getCodeBlockBlockParserRuleCall_3_0() { return cCodeBlockBlockParserRuleCall_3_0; }
		
		//('else' (ifStatement=ifStmt | codeBlockIf=block))?
		public Group getGroup_4() { return cGroup_4; }
		
		//'else'
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }
		
		//ifStatement=ifStmt | codeBlockIf=block
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//ifStatement=ifStmt
		public Assignment getIfStatementAssignment_4_1_0() { return cIfStatementAssignment_4_1_0; }
		
		//ifStmt
		public RuleCall getIfStatementIfStmtParserRuleCall_4_1_0_0() { return cIfStatementIfStmtParserRuleCall_4_1_0_0; }
		
		//codeBlockIf=block
		public Assignment getCodeBlockIfAssignment_4_1_1() { return cCodeBlockIfAssignment_4_1_1; }
		
		//block
		public RuleCall getCodeBlockIfBlockParserRuleCall_4_1_1_0() { return cCodeBlockIfBlockParserRuleCall_4_1_1_0; }
	}
	public class SwitchStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.switchStmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStatementAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStatementExprSwitchStmtParserRuleCall_0_0 = (RuleCall)cStatementAssignment_0.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStatementTypeSwitchStmtParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		
		////SwitchStmt = ExprSwitchStmt | TypeSwitchStmt .
		//switchStmt:
		//	statement=exprSwitchStmt | statement=typeSwitchStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//statement=exprSwitchStmt | statement=typeSwitchStmt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//statement=exprSwitchStmt
		public Assignment getStatementAssignment_0() { return cStatementAssignment_0; }
		
		//exprSwitchStmt
		public RuleCall getStatementExprSwitchStmtParserRuleCall_0_0() { return cStatementExprSwitchStmtParserRuleCall_0_0; }
		
		//statement=typeSwitchStmt
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }
		
		//typeSwitchStmt
		public RuleCall getStatementTypeSwitchStmtParserRuleCall_1_0() { return cStatementTypeSwitchStmtParserRuleCall_1_0; }
	}
	public class ExprSwitchStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.exprSwitchStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cSimpleStmtAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSimpleStmtSimpleStmtParserRuleCall_1_0_0 = (RuleCall)cSimpleStmtAssignment_1_0.eContents().get(0);
		private final RuleCall cEosParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExprCaseClausesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprCaseClausesExprCaseClauseParserRuleCall_4_0 = (RuleCall)cExprCaseClausesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////ExprSwitchStmt = "switch" [ SimpleStmt ";" ] [ Expression ] "{" { ExprCaseClause } "}" .
		////ExprCaseClause = ExprSwitchCase ":" StatementList .
		////ExprSwitchCase = "case" ExpressionList | "default" .
		//exprSwitchStmt:
		//	'switch' (simpleStmt=simpleStmt eos)? expr=expression?
		//	'{' exprCaseClauses+=exprCaseClause* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'switch' (simpleStmt=simpleStmt eos)? expr=expression? '{' exprCaseClauses+=exprCaseClause* '}'
		public Group getGroup() { return cGroup; }
		
		//'switch'
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }
		
		//(simpleStmt=simpleStmt eos)?
		public Group getGroup_1() { return cGroup_1; }
		
		//simpleStmt=simpleStmt
		public Assignment getSimpleStmtAssignment_1_0() { return cSimpleStmtAssignment_1_0; }
		
		//simpleStmt
		public RuleCall getSimpleStmtSimpleStmtParserRuleCall_1_0_0() { return cSimpleStmtSimpleStmtParserRuleCall_1_0_0; }
		
		//eos
		public RuleCall getEosParserRuleCall_1_1() { return cEosParserRuleCall_1_1; }
		
		//expr=expression?
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//exprCaseClauses+=exprCaseClause*
		public Assignment getExprCaseClausesAssignment_4() { return cExprCaseClausesAssignment_4; }
		
		//exprCaseClause
		public RuleCall getExprCaseClausesExprCaseClauseParserRuleCall_4_0() { return cExprCaseClausesExprCaseClauseParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ExprCaseClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.exprCaseClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprSwitchCaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprSwitchCaseExprSwitchCaseParserRuleCall_0_0 = (RuleCall)cExprSwitchCaseAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStmtListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStmtListStatementListParserRuleCall_2_0 = (RuleCall)cStmtListAssignment_2.eContents().get(0);
		
		//exprCaseClause:
		//	exprSwitchCase=exprSwitchCase ':' stmtList=statementList;
		@Override public ParserRule getRule() { return rule; }
		
		//exprSwitchCase=exprSwitchCase ':' stmtList=statementList
		public Group getGroup() { return cGroup; }
		
		//exprSwitchCase=exprSwitchCase
		public Assignment getExprSwitchCaseAssignment_0() { return cExprSwitchCaseAssignment_0; }
		
		//exprSwitchCase
		public RuleCall getExprSwitchCaseExprSwitchCaseParserRuleCall_0_0() { return cExprSwitchCaseExprSwitchCaseParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//stmtList=statementList
		public Assignment getStmtListAssignment_2() { return cStmtListAssignment_2; }
		
		//statementList
		public RuleCall getStmtListStatementListParserRuleCall_2_0() { return cStmtListStatementListParserRuleCall_2_0; }
	}
	public class ExprSwitchCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.exprSwitchCase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCaseKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cExprListAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExprListExpressionListParserRuleCall_0_1_0 = (RuleCall)cExprListAssignment_0_1.eContents().get(0);
		private final Keyword cDefaultKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//exprSwitchCase:
		//	'case' exprList=expressionList | 'default';
		@Override public ParserRule getRule() { return rule; }
		
		//'case' exprList=expressionList | 'default'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'case' exprList=expressionList
		public Group getGroup_0() { return cGroup_0; }
		
		//'case'
		public Keyword getCaseKeyword_0_0() { return cCaseKeyword_0_0; }
		
		//exprList=expressionList
		public Assignment getExprListAssignment_0_1() { return cExprListAssignment_0_1; }
		
		//expressionList
		public RuleCall getExprListExpressionListParserRuleCall_0_1_0() { return cExprListExpressionListParserRuleCall_0_1_0; }
		
		//'default'
		public Keyword getDefaultKeyword_1() { return cDefaultKeyword_1; }
	}
	public class TypeSwitchStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.typeSwitchStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cSimpleStatementAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSimpleStatementSimpleStmtParserRuleCall_1_0_0 = (RuleCall)cSimpleStatementAssignment_1_0.eContents().get(0);
		private final RuleCall cEosParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cTypeSwitchGuardAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeSwitchGuardTypeSwitchGuardParserRuleCall_2_0 = (RuleCall)cTypeSwitchGuardAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeCaseClausesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeCaseClausesTypeCaseClauseParserRuleCall_4_0 = (RuleCall)cTypeCaseClausesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////TypeSwitchStmt  = "switch" [ SimpleStmt ";" ] TypeSwitchGuard "{" { TypeCaseClause } "}" .
		////TypeSwitchGuard = [ identifier ":=" ] PrimaryExpr "." "(" "type" ")" .
		////TypeCaseClause  = TypeSwitchCase ":" StatementList .
		////TypeSwitchCase  = "case" TypeList | "default" .
		////TypeList        = Type { "," Type } .
		//typeSwitchStmt:
		//	'switch' (simpleStatement=simpleStmt eos)?
		//	typeSwitchGuard=typeSwitchGuard '{' typeCaseClauses+=typeCaseClause* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'switch' (simpleStatement=simpleStmt eos)? typeSwitchGuard=typeSwitchGuard '{' typeCaseClauses+=typeCaseClause* '}'
		public Group getGroup() { return cGroup; }
		
		//'switch'
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }
		
		//(simpleStatement=simpleStmt eos)?
		public Group getGroup_1() { return cGroup_1; }
		
		//simpleStatement=simpleStmt
		public Assignment getSimpleStatementAssignment_1_0() { return cSimpleStatementAssignment_1_0; }
		
		//simpleStmt
		public RuleCall getSimpleStatementSimpleStmtParserRuleCall_1_0_0() { return cSimpleStatementSimpleStmtParserRuleCall_1_0_0; }
		
		//eos
		public RuleCall getEosParserRuleCall_1_1() { return cEosParserRuleCall_1_1; }
		
		//typeSwitchGuard=typeSwitchGuard
		public Assignment getTypeSwitchGuardAssignment_2() { return cTypeSwitchGuardAssignment_2; }
		
		//typeSwitchGuard
		public RuleCall getTypeSwitchGuardTypeSwitchGuardParserRuleCall_2_0() { return cTypeSwitchGuardTypeSwitchGuardParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//typeCaseClauses+=typeCaseClause*
		public Assignment getTypeCaseClausesAssignment_4() { return cTypeCaseClausesAssignment_4; }
		
		//typeCaseClause
		public RuleCall getTypeCaseClausesTypeCaseClauseParserRuleCall_4_0() { return cTypeCaseClausesTypeCaseClauseParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class TypeSwitchGuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.typeSwitchGuard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cPrimaryExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrimaryExpressionPrimaryExprParserRuleCall_1_0 = (RuleCall)cPrimaryExpressionAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cTypeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//typeSwitchGuard:
		//	(name=IDENTIFIER ':=')? primaryExpression=primaryExpr '.' '(' 'type' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//(name=IDENTIFIER ':=')? primaryExpression=primaryExpr '.' '(' 'type' ')'
		public Group getGroup() { return cGroup; }
		
		//(name=IDENTIFIER ':=')?
		public Group getGroup_0() { return cGroup_0; }
		
		//name=IDENTIFIER
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_0_0_0() { return cNameIDENTIFIERTerminalRuleCall_0_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_0_1() { return cColonEqualsSignKeyword_0_1; }
		
		//primaryExpression=primaryExpr
		public Assignment getPrimaryExpressionAssignment_1() { return cPrimaryExpressionAssignment_1; }
		
		//primaryExpr
		public RuleCall getPrimaryExpressionPrimaryExprParserRuleCall_1_0() { return cPrimaryExpressionPrimaryExprParserRuleCall_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//'type'
		public Keyword getTypeKeyword_4() { return cTypeKeyword_4; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class TypeCaseClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.typeCaseClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeSwitchCaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeSwitchCaseTypeSwitchCaseParserRuleCall_0_0 = (RuleCall)cTypeSwitchCaseAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementListStatementListParserRuleCall_2_0 = (RuleCall)cStatementListAssignment_2.eContents().get(0);
		
		//typeCaseClause:
		//	typeSwitchCase=typeSwitchCase ':' statementList=statementList;
		@Override public ParserRule getRule() { return rule; }
		
		//typeSwitchCase=typeSwitchCase ':' statementList=statementList
		public Group getGroup() { return cGroup; }
		
		//typeSwitchCase=typeSwitchCase
		public Assignment getTypeSwitchCaseAssignment_0() { return cTypeSwitchCaseAssignment_0; }
		
		//typeSwitchCase
		public RuleCall getTypeSwitchCaseTypeSwitchCaseParserRuleCall_0_0() { return cTypeSwitchCaseTypeSwitchCaseParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//statementList=statementList
		public Assignment getStatementListAssignment_2() { return cStatementListAssignment_2; }
		
		//statementList
		public RuleCall getStatementListStatementListParserRuleCall_2_0() { return cStatementListStatementListParserRuleCall_2_0; }
	}
	public class TypeSwitchCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.typeSwitchCase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCaseKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTypeListAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeListTypeListParserRuleCall_0_1_0 = (RuleCall)cTypeListAssignment_0_1.eContents().get(0);
		private final Keyword cDefaultKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//typeSwitchCase:
		//	'case' typeList=typeList | 'default';
		@Override public ParserRule getRule() { return rule; }
		
		//'case' typeList=typeList | 'default'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'case' typeList=typeList
		public Group getGroup_0() { return cGroup_0; }
		
		//'case'
		public Keyword getCaseKeyword_0_0() { return cCaseKeyword_0_0; }
		
		//typeList=typeList
		public Assignment getTypeListAssignment_0_1() { return cTypeListAssignment_0_1; }
		
		//typeList
		public RuleCall getTypeListTypeListParserRuleCall_0_1_0() { return cTypeListTypeListParserRuleCall_0_1_0; }
		
		//'default'
		public Keyword getDefaultKeyword_1() { return cDefaultKeyword_1; }
	}
	public class TypeListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.typeList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypesTypeParserRuleCall_0_0 = (RuleCall)cTypesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypesTypeParserRuleCall_1_1_0 = (RuleCall)cTypesAssignment_1_1.eContents().get(0);
		
		//typeList:
		//	types+=type (',' types+=type)*;
		@Override public ParserRule getRule() { return rule; }
		
		//types+=type (',' types+=type)*
		public Group getGroup() { return cGroup; }
		
		//types+=type
		public Assignment getTypesAssignment_0() { return cTypesAssignment_0; }
		
		//type
		public RuleCall getTypesTypeParserRuleCall_0_0() { return cTypesTypeParserRuleCall_0_0; }
		
		//(',' types+=type)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//types+=type
		public Assignment getTypesAssignment_1_1() { return cTypesAssignment_1_1; }
		
		//type
		public RuleCall getTypesTypeParserRuleCall_1_1_0() { return cTypesTypeParserRuleCall_1_1_0; }
	}
	public class SelectStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.selectStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCommClausesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommClausesCommClauseParserRuleCall_2_0 = (RuleCall)cCommClausesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////SelectStmt = "select" "{" { CommClause } "}" .
		////CommClause = CommCase ":" StatementList .
		////CommCase   = "case" ( SendStmt | RecvStmt ) | "default" .
		////RecvStmt   = [ ExpressionList "=" | IdentifierList ":=" ] RecvExpr .
		////RecvExpr   = Expression .
		//selectStmt:
		//	'select' '{' commClauses+=commClause* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'select' '{' commClauses+=commClause* '}'
		public Group getGroup() { return cGroup; }
		
		//'select'
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//commClauses+=commClause*
		public Assignment getCommClausesAssignment_2() { return cCommClausesAssignment_2; }
		
		//commClause
		public RuleCall getCommClausesCommClauseParserRuleCall_2_0() { return cCommClausesCommClauseParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class CommClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.commClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCaseCommCaseParserRuleCall_0_0 = (RuleCall)cCaseAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStmtListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStmtListStatementListParserRuleCall_2_0 = (RuleCall)cStmtListAssignment_2.eContents().get(0);
		
		//commClause:
		//	case=commCase ':' stmtList=statementList;
		@Override public ParserRule getRule() { return rule; }
		
		//case=commCase ':' stmtList=statementList
		public Group getGroup() { return cGroup; }
		
		//case=commCase
		public Assignment getCaseAssignment_0() { return cCaseAssignment_0; }
		
		//commCase
		public RuleCall getCaseCommCaseParserRuleCall_0_0() { return cCaseCommCaseParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//stmtList=statementList
		public Assignment getStmtListAssignment_2() { return cStmtListAssignment_2; }
		
		//statementList
		public RuleCall getStmtListStatementListParserRuleCall_2_0() { return cStmtListStatementListParserRuleCall_2_0; }
	}
	public class CommCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.commCase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCaseKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cStatementAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cStatementSendStmtParserRuleCall_0_1_0_0 = (RuleCall)cStatementAssignment_0_1_0.eContents().get(0);
		private final Assignment cStatementAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cStatementRecvStmtParserRuleCall_0_1_1_0 = (RuleCall)cStatementAssignment_0_1_1.eContents().get(0);
		private final Keyword cDefaultKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//commCase:
		//	'case' (statement=sendStmt | statement=recvStmt) | 'default';
		@Override public ParserRule getRule() { return rule; }
		
		//'case' (statement=sendStmt | statement=recvStmt) | 'default'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'case' (statement=sendStmt | statement=recvStmt)
		public Group getGroup_0() { return cGroup_0; }
		
		//'case'
		public Keyword getCaseKeyword_0_0() { return cCaseKeyword_0_0; }
		
		//statement=sendStmt | statement=recvStmt
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//statement=sendStmt
		public Assignment getStatementAssignment_0_1_0() { return cStatementAssignment_0_1_0; }
		
		//sendStmt
		public RuleCall getStatementSendStmtParserRuleCall_0_1_0_0() { return cStatementSendStmtParserRuleCall_0_1_0_0; }
		
		//statement=recvStmt
		public Assignment getStatementAssignment_0_1_1() { return cStatementAssignment_0_1_1; }
		
		//recvStmt
		public RuleCall getStatementRecvStmtParserRuleCall_0_1_1_0() { return cStatementRecvStmtParserRuleCall_0_1_1_0; }
		
		//'default'
		public Keyword getDefaultKeyword_1() { return cDefaultKeyword_1; }
	}
	public class RecvStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.recvStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cExprListAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cExprListExpressionListParserRuleCall_0_0_0_0 = (RuleCall)cExprListAssignment_0_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cIdListAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cIdListIdentifierListParserRuleCall_0_1_0_0 = (RuleCall)cIdListAssignment_0_1_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//recvStmt:
		//	(exprList=expressionList '=' | idList=identifierList ':=')? expr=expression;
		@Override public ParserRule getRule() { return rule; }
		
		//(exprList=expressionList '=' | idList=identifierList ':=')? expr=expression
		public Group getGroup() { return cGroup; }
		
		//(exprList=expressionList '=' | idList=identifierList ':=')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//exprList=expressionList '='
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//exprList=expressionList
		public Assignment getExprListAssignment_0_0_0() { return cExprListAssignment_0_0_0; }
		
		//expressionList
		public RuleCall getExprListExpressionListParserRuleCall_0_0_0_0() { return cExprListExpressionListParserRuleCall_0_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_0_1() { return cEqualsSignKeyword_0_0_1; }
		
		//idList=identifierList ':='
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//idList=identifierList
		public Assignment getIdListAssignment_0_1_0() { return cIdListAssignment_0_1_0; }
		
		//identifierList
		public RuleCall getIdListIdentifierListParserRuleCall_0_1_0_0() { return cIdListIdentifierListParserRuleCall_0_1_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_0_1_1() { return cColonEqualsSignKeyword_0_1_1; }
		
		//expr=expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }
	}
	public class ForStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.forStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cExprExpressionParserRuleCall_1_0_0 = (RuleCall)cExprAssignment_1_0.eContents().get(0);
		private final Assignment cClauseAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cClauseForClauseParserRuleCall_1_1_0 = (RuleCall)cClauseAssignment_1_1.eContents().get(0);
		private final Assignment cClauseAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cClauseRangeClauseParserRuleCall_1_2_0 = (RuleCall)cClauseAssignment_1_2.eContents().get(0);
		private final Assignment cCodeBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCodeBlockBlockParserRuleCall_2_0 = (RuleCall)cCodeBlockAssignment_2.eContents().get(0);
		
		////ForStmt = "for" [ Condition | ForClause | RangeClause ] Block .
		////Condition = Expression .
		//forStmt:
		//	'for' (expr=expression | clause=forClause | clause=rangeClause)? codeBlock=block;
		@Override public ParserRule getRule() { return rule; }
		
		//'for' (expr=expression | clause=forClause | clause=rangeClause)? codeBlock=block
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//(expr=expression | clause=forClause | clause=rangeClause)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//expr=expression
		public Assignment getExprAssignment_1_0() { return cExprAssignment_1_0; }
		
		//expression
		public RuleCall getExprExpressionParserRuleCall_1_0_0() { return cExprExpressionParserRuleCall_1_0_0; }
		
		//clause=forClause
		public Assignment getClauseAssignment_1_1() { return cClauseAssignment_1_1; }
		
		//forClause
		public RuleCall getClauseForClauseParserRuleCall_1_1_0() { return cClauseForClauseParserRuleCall_1_1_0; }
		
		//clause=rangeClause
		public Assignment getClauseAssignment_1_2() { return cClauseAssignment_1_2; }
		
		//rangeClause
		public RuleCall getClauseRangeClauseParserRuleCall_1_2_0() { return cClauseRangeClauseParserRuleCall_1_2_0; }
		
		//codeBlock=block
		public Assignment getCodeBlockAssignment_2() { return cCodeBlockAssignment_2; }
		
		//block
		public RuleCall getCodeBlockBlockParserRuleCall_2_0() { return cCodeBlockBlockParserRuleCall_2_0; }
	}
	public class ForClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.forClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStatement1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStatement1SimpleStmtParserRuleCall_0_0 = (RuleCall)cStatement1Assignment_0.eContents().get(0);
		private final RuleCall cEosParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final RuleCall cEosParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cStatement2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatement2SimpleStmtParserRuleCall_4_0 = (RuleCall)cStatement2Assignment_4.eContents().get(0);
		
		////ForClause = [ InitStmt ] ";" [ Condition ] ";" [ PostStmt ] .
		////InitStmt = SimpleStmt .
		////PostStmt = SimpleStmt .
		//forClause:
		//	statement1=simpleStmt? eos expr=expression? eos statement2=simpleStmt?;
		@Override public ParserRule getRule() { return rule; }
		
		//statement1=simpleStmt? eos expr=expression? eos statement2=simpleStmt?
		public Group getGroup() { return cGroup; }
		
		//statement1=simpleStmt?
		public Assignment getStatement1Assignment_0() { return cStatement1Assignment_0; }
		
		//simpleStmt
		public RuleCall getStatement1SimpleStmtParserRuleCall_0_0() { return cStatement1SimpleStmtParserRuleCall_0_0; }
		
		//eos
		public RuleCall getEosParserRuleCall_1() { return cEosParserRuleCall_1; }
		
		//expr=expression?
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }
		
		//eos
		public RuleCall getEosParserRuleCall_3() { return cEosParserRuleCall_3; }
		
		//statement2=simpleStmt?
		public Assignment getStatement2Assignment_4() { return cStatement2Assignment_4; }
		
		//simpleStmt
		public RuleCall getStatement2SimpleStmtParserRuleCall_4_0() { return cStatement2SimpleStmtParserRuleCall_4_0; }
	}
	public class RangeClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.rangeClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cExprListAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cExprListExpressionListParserRuleCall_0_0_0_0 = (RuleCall)cExprListAssignment_0_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cIdListAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cIdListIdentifierListParserRuleCall_0_1_0_0 = (RuleCall)cIdListAssignment_0_1_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Keyword cRangeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		////RangeClause = [ ExpressionList "=" | IdentifierList ":=" ] "range" Expression .
		//rangeClause:
		//	(exprList=expressionList '=' | idList=identifierList ':=')? 'range' expr=expression;
		@Override public ParserRule getRule() { return rule; }
		
		//(exprList=expressionList '=' | idList=identifierList ':=')? 'range' expr=expression
		public Group getGroup() { return cGroup; }
		
		//(exprList=expressionList '=' | idList=identifierList ':=')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//exprList=expressionList '='
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//exprList=expressionList
		public Assignment getExprListAssignment_0_0_0() { return cExprListAssignment_0_0_0; }
		
		//expressionList
		public RuleCall getExprListExpressionListParserRuleCall_0_0_0_0() { return cExprListExpressionListParserRuleCall_0_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_0_1() { return cEqualsSignKeyword_0_0_1; }
		
		//idList=identifierList ':='
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//idList=identifierList
		public Assignment getIdListAssignment_0_1_0() { return cIdListAssignment_0_1_0; }
		
		//identifierList
		public RuleCall getIdListIdentifierListParserRuleCall_0_1_0_0() { return cIdListIdentifierListParserRuleCall_0_1_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_0_1_1() { return cColonEqualsSignKeyword_0_1_1; }
		
		//'range'
		public Keyword getRangeKeyword_1() { return cRangeKeyword_1; }
		
		//expr=expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }
	}
	public class GoStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.goStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		////GoStmt = "go" Expression .
		//goStmt:
		//	'go' expr=expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'go' expr=expression
		public Group getGroup() { return cGroup; }
		
		//'go'
		public Keyword getGoKeyword_0() { return cGoKeyword_0; }
		
		//expr=expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cContentTAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cContentTTypeNameParserRuleCall_0_0 = (RuleCall)cContentTAssignment_0.eContents().get(0);
		private final Assignment cContentLAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cContentLTypeLitParserRuleCall_1_0 = (RuleCall)cContentLAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cContentAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cContentTypeParserRuleCall_2_1_0 = (RuleCall)cContentAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		////Type      = TypeName | TypeLit | "(" Type ")" .
		//type:
		//	contentT=typeName
		//	| contentL=typeLit
		//	| '(' content=type ')';
		@Override public ParserRule getRule() { return rule; }
		
		//contentT=typeName | contentL=typeLit | '(' content=type ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//contentT=typeName
		public Assignment getContentTAssignment_0() { return cContentTAssignment_0; }
		
		//typeName
		public RuleCall getContentTTypeNameParserRuleCall_0_0() { return cContentTTypeNameParserRuleCall_0_0; }
		
		//contentL=typeLit
		public Assignment getContentLAssignment_1() { return cContentLAssignment_1; }
		
		//typeLit
		public RuleCall getContentLTypeLitParserRuleCall_1_0() { return cContentLTypeLitParserRuleCall_1_0; }
		
		//'(' content=type ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//content=type
		public Assignment getContentAssignment_2_1() { return cContentAssignment_2_1; }
		
		//type
		public RuleCall getContentTypeParserRuleCall_2_1_0() { return cContentTypeParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class TypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.typeName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cQualIdentAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cQualIdentQualifiedIdentParserRuleCall_1_0 = (RuleCall)cQualIdentAssignment_1.eContents().get(0);
		
		////TypeName  = identifier | QualifiedIdent .
		//typeName:
		//	name=IDENTIFIER
		//	| qualIdent=qualifiedIdent;
		@Override public ParserRule getRule() { return rule; }
		
		//name=IDENTIFIER | qualIdent=qualifiedIdent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=IDENTIFIER
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_0_0() { return cNameIDENTIFIERTerminalRuleCall_0_0; }
		
		//qualIdent=qualifiedIdent
		public Assignment getQualIdentAssignment_1() { return cQualIdentAssignment_1; }
		
		//qualifiedIdent
		public RuleCall getQualIdentQualifiedIdentParserRuleCall_1_0() { return cQualIdentQualifiedIdentParserRuleCall_1_0; }
	}
	public class TypeLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.typeLit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cLitAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cLitArrayTypeParserRuleCall_0_0_0 = (RuleCall)cLitAssignment_0_0.eContents().get(0);
		private final Assignment cContentTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cContentTypeArrayKeyword_0_1_0 = (Keyword)cContentTypeAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cLitAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLitStructTypeParserRuleCall_1_0_0 = (RuleCall)cLitAssignment_1_0.eContents().get(0);
		private final Assignment cContentTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cContentTypeStructTypeKeyword_1_1_0 = (Keyword)cContentTypeAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cLitAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cLitPointerTypeParserRuleCall_2_0_0 = (RuleCall)cLitAssignment_2_0.eContents().get(0);
		private final Assignment cContentTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cContentTypePointerKeyword_2_1_0 = (Keyword)cContentTypeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cLitAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cLitFunctionTypeParserRuleCall_3_0_0 = (RuleCall)cLitAssignment_3_0.eContents().get(0);
		private final Assignment cContentTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cContentTypeFunctionKeyword_3_1_0 = (Keyword)cContentTypeAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cLitAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cLitInterfaceTypeParserRuleCall_4_0_0 = (RuleCall)cLitAssignment_4_0.eContents().get(0);
		private final Assignment cContentTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Keyword cContentTypeInterfaceKeyword_4_1_0 = (Keyword)cContentTypeAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cLitAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cLitSliceTypeParserRuleCall_5_0_0 = (RuleCall)cLitAssignment_5_0.eContents().get(0);
		private final Assignment cContentTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final Keyword cContentTypeSliceKeyword_5_1_0 = (Keyword)cContentTypeAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cLitAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cLitMapTypeParserRuleCall_6_0_0 = (RuleCall)cLitAssignment_6_0.eContents().get(0);
		private final Assignment cContentTypeAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final Keyword cContentTypeMapKeyword_6_1_0 = (Keyword)cContentTypeAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cLitAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cLitChannelTypeParserRuleCall_7_0_0 = (RuleCall)cLitAssignment_7_0.eContents().get(0);
		private final Assignment cContentTypeAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final Keyword cContentTypeChannelKeyword_7_1_0 = (Keyword)cContentTypeAssignment_7_1.eContents().get(0);
		
		////TypeLit   = ArrayType | StructType | PointerType | FunctionType | InterfaceType |
		////	    SliceType | MapType | ChannelType .
		//typeLit:
		//	lit=arrayType contentType="Array"
		//	| lit=structType contentType="StructType"
		//	| lit=pointerType contentType="Pointer"
		//	| lit=functionType contentType="Function"
		//	| lit=interfaceType contentType="Interface"
		//	| lit=sliceType contentType="Slice"
		//	| lit=mapType contentType="Map"
		//	| lit=channelType contentType="Channel";
		@Override public ParserRule getRule() { return rule; }
		
		//lit=arrayType contentType="Array" | lit=structType contentType="StructType" | lit=pointerType contentType="Pointer" |
		//lit=functionType contentType="Function" | lit=interfaceType contentType="Interface" | lit=sliceType contentType="Slice"
		//| lit=mapType contentType="Map" | lit=channelType contentType="Channel"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//lit=arrayType contentType="Array"
		public Group getGroup_0() { return cGroup_0; }
		
		//lit=arrayType
		public Assignment getLitAssignment_0_0() { return cLitAssignment_0_0; }
		
		//arrayType
		public RuleCall getLitArrayTypeParserRuleCall_0_0_0() { return cLitArrayTypeParserRuleCall_0_0_0; }
		
		//contentType="Array"
		public Assignment getContentTypeAssignment_0_1() { return cContentTypeAssignment_0_1; }
		
		//"Array"
		public Keyword getContentTypeArrayKeyword_0_1_0() { return cContentTypeArrayKeyword_0_1_0; }
		
		//lit=structType contentType="StructType"
		public Group getGroup_1() { return cGroup_1; }
		
		//lit=structType
		public Assignment getLitAssignment_1_0() { return cLitAssignment_1_0; }
		
		//structType
		public RuleCall getLitStructTypeParserRuleCall_1_0_0() { return cLitStructTypeParserRuleCall_1_0_0; }
		
		//contentType="StructType"
		public Assignment getContentTypeAssignment_1_1() { return cContentTypeAssignment_1_1; }
		
		//"StructType"
		public Keyword getContentTypeStructTypeKeyword_1_1_0() { return cContentTypeStructTypeKeyword_1_1_0; }
		
		//lit=pointerType contentType="Pointer"
		public Group getGroup_2() { return cGroup_2; }
		
		//lit=pointerType
		public Assignment getLitAssignment_2_0() { return cLitAssignment_2_0; }
		
		//pointerType
		public RuleCall getLitPointerTypeParserRuleCall_2_0_0() { return cLitPointerTypeParserRuleCall_2_0_0; }
		
		//contentType="Pointer"
		public Assignment getContentTypeAssignment_2_1() { return cContentTypeAssignment_2_1; }
		
		//"Pointer"
		public Keyword getContentTypePointerKeyword_2_1_0() { return cContentTypePointerKeyword_2_1_0; }
		
		//lit=functionType contentType="Function"
		public Group getGroup_3() { return cGroup_3; }
		
		//lit=functionType
		public Assignment getLitAssignment_3_0() { return cLitAssignment_3_0; }
		
		//functionType
		public RuleCall getLitFunctionTypeParserRuleCall_3_0_0() { return cLitFunctionTypeParserRuleCall_3_0_0; }
		
		//contentType="Function"
		public Assignment getContentTypeAssignment_3_1() { return cContentTypeAssignment_3_1; }
		
		//"Function"
		public Keyword getContentTypeFunctionKeyword_3_1_0() { return cContentTypeFunctionKeyword_3_1_0; }
		
		//lit=interfaceType contentType="Interface"
		public Group getGroup_4() { return cGroup_4; }
		
		//lit=interfaceType
		public Assignment getLitAssignment_4_0() { return cLitAssignment_4_0; }
		
		//interfaceType
		public RuleCall getLitInterfaceTypeParserRuleCall_4_0_0() { return cLitInterfaceTypeParserRuleCall_4_0_0; }
		
		//contentType="Interface"
		public Assignment getContentTypeAssignment_4_1() { return cContentTypeAssignment_4_1; }
		
		//"Interface"
		public Keyword getContentTypeInterfaceKeyword_4_1_0() { return cContentTypeInterfaceKeyword_4_1_0; }
		
		//lit=sliceType contentType="Slice"
		public Group getGroup_5() { return cGroup_5; }
		
		//lit=sliceType
		public Assignment getLitAssignment_5_0() { return cLitAssignment_5_0; }
		
		//sliceType
		public RuleCall getLitSliceTypeParserRuleCall_5_0_0() { return cLitSliceTypeParserRuleCall_5_0_0; }
		
		//contentType="Slice"
		public Assignment getContentTypeAssignment_5_1() { return cContentTypeAssignment_5_1; }
		
		//"Slice"
		public Keyword getContentTypeSliceKeyword_5_1_0() { return cContentTypeSliceKeyword_5_1_0; }
		
		//lit=mapType contentType="Map"
		public Group getGroup_6() { return cGroup_6; }
		
		//lit=mapType
		public Assignment getLitAssignment_6_0() { return cLitAssignment_6_0; }
		
		//mapType
		public RuleCall getLitMapTypeParserRuleCall_6_0_0() { return cLitMapTypeParserRuleCall_6_0_0; }
		
		//contentType="Map"
		public Assignment getContentTypeAssignment_6_1() { return cContentTypeAssignment_6_1; }
		
		//"Map"
		public Keyword getContentTypeMapKeyword_6_1_0() { return cContentTypeMapKeyword_6_1_0; }
		
		//lit=channelType contentType="Channel"
		public Group getGroup_7() { return cGroup_7; }
		
		//lit=channelType
		public Assignment getLitAssignment_7_0() { return cLitAssignment_7_0; }
		
		//channelType
		public RuleCall getLitChannelTypeParserRuleCall_7_0_0() { return cLitChannelTypeParserRuleCall_7_0_0; }
		
		//contentType="Channel"
		public Assignment getContentTypeAssignment_7_1() { return cContentTypeAssignment_7_1; }
		
		//"Channel"
		public Keyword getContentTypeChannelKeyword_7_1_0() { return cContentTypeChannelKeyword_7_1_0; }
	}
	public class ArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.arrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArrayLengthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArrayLengthArrayLengthParserRuleCall_1_0 = (RuleCall)cArrayLengthAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElemTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElemTypeElementTypeParserRuleCall_3_0 = (RuleCall)cElemTypeAssignment_3.eContents().get(0);
		
		//arrayType:
		//	'[' arrayLength=arrayLength ']' elemType=elementType;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' arrayLength=arrayLength ']' elemType=elementType
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//arrayLength=arrayLength
		public Assignment getArrayLengthAssignment_1() { return cArrayLengthAssignment_1; }
		
		//arrayLength
		public RuleCall getArrayLengthArrayLengthParserRuleCall_1_0() { return cArrayLengthArrayLengthParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
		
		//elemType=elementType
		public Assignment getElemTypeAssignment_3() { return cElemTypeAssignment_3; }
		
		//elementType
		public RuleCall getElemTypeElementTypeParserRuleCall_3_0() { return cElemTypeElementTypeParserRuleCall_3_0; }
	}
	public class ArrayLengthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.arrayLength");
		private final Assignment cExprAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_0 = (RuleCall)cExprAssignment.eContents().get(0);
		
		//arrayLength:
		//	expr=expression;
		@Override public ParserRule getRule() { return rule; }
		
		//expr=expression
		public Assignment getExprAssignment() { return cExprAssignment; }
		
		//expression
		public RuleCall getExprExpressionParserRuleCall_0() { return cExprExpressionParserRuleCall_0; }
	}
	public class ElementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.elementType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//elementType:
		//	type=type;
		@Override public ParserRule getRule() { return rule; }
		
		//type=type
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_0() { return cTypeTypeParserRuleCall_0; }
	}
	public class PointerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.pointerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		////PointerType = "*" BaseType .
		////BaseType    = Type .
		//pointerType:
		//	'*' type=type;
		@Override public ParserRule getRule() { return rule; }
		
		//'*' type=type
		public Group getGroup() { return cGroup; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//type=type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
	}
	public class InterfaceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.interfaceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cMethodSpecsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cMethodSpecsMethodSpecParserRuleCall_2_0_0 = (RuleCall)cMethodSpecsAssignment_2_0.eContents().get(0);
		private final RuleCall cEosParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////InterfaceType      = "interface" "{" { MethodSpec ";" } "}" .
		////MethodSpec         = MethodName Signature | InterfaceTypeName .
		////MethodName         = identifier .
		////InterfaceTypeName  = TypeName .
		//interfaceType:
		//	'interface' '{' (methodSpecs+=methodSpec eos)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'interface' '{' (methodSpecs+=methodSpec eos)* '}'
		public Group getGroup() { return cGroup; }
		
		//'interface'
		public Keyword getInterfaceKeyword_0() { return cInterfaceKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(methodSpecs+=methodSpec eos)*
		public Group getGroup_2() { return cGroup_2; }
		
		//methodSpecs+=methodSpec
		public Assignment getMethodSpecsAssignment_2_0() { return cMethodSpecsAssignment_2_0; }
		
		//methodSpec
		public RuleCall getMethodSpecsMethodSpecParserRuleCall_2_0_0() { return cMethodSpecsMethodSpecParserRuleCall_2_0_0; }
		
		//eos
		public RuleCall getEosParserRuleCall_2_1() { return cEosParserRuleCall_2_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class SliceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.sliceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElemTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElemTypeElementTypeParserRuleCall_2_0 = (RuleCall)cElemTypeAssignment_2.eContents().get(0);
		
		////SliceType = "[" "]" ElementType .
		//sliceType:
		//	'[' ']' elemType=elementType;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' ']' elemType=elementType
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1() { return cRightSquareBracketKeyword_1; }
		
		//elemType=elementType
		public Assignment getElemTypeAssignment_2() { return cElemTypeAssignment_2; }
		
		//elementType
		public RuleCall getElemTypeElementTypeParserRuleCall_2_0() { return cElemTypeElementTypeParserRuleCall_2_0; }
	}
	public class MapTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.mapType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElemTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElemTypeElementTypeParserRuleCall_4_0 = (RuleCall)cElemTypeAssignment_4.eContents().get(0);
		
		////MapType     = "map" "[" KeyType "]" ElementType .
		////KeyType     = Type .
		//mapType:
		//	'map' '[' type=type ']' elemType=elementType;
		@Override public ParserRule getRule() { return rule; }
		
		//'map' '[' type=type ']' elemType=elementType
		public Group getGroup() { return cGroup; }
		
		//'map'
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//type=type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//elemType=elementType
		public Assignment getElemTypeAssignment_4() { return cElemTypeAssignment_4; }
		
		//elementType
		public RuleCall getElemTypeElementTypeParserRuleCall_4_0() { return cElemTypeElementTypeParserRuleCall_4_0; }
	}
	public class ChannelTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.channelType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cChanKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cChanKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Keyword cLessThanSignHyphenMinusKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Keyword cChanKeyword_0_2_1 = (Keyword)cGroup_0_2.eContents().get(1);
		private final Assignment cElemTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElemTypeElementTypeParserRuleCall_1_0 = (RuleCall)cElemTypeAssignment_1.eContents().get(0);
		
		////ChannelType = ( "chan" | "chan" "<-" | "<-" "chan" ) ElementType .
		//channelType:
		//	('chan' | 'chan' '<-' | '<-' 'chan') elemType=elementType;
		@Override public ParserRule getRule() { return rule; }
		
		//('chan' | 'chan' '<-' | '<-' 'chan') elemType=elementType
		public Group getGroup() { return cGroup; }
		
		//'chan' | 'chan' '<-' | '<-' 'chan'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'chan'
		public Keyword getChanKeyword_0_0() { return cChanKeyword_0_0; }
		
		//'chan' '<-'
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'chan'
		public Keyword getChanKeyword_0_1_0() { return cChanKeyword_0_1_0; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_0_1_1() { return cLessThanSignHyphenMinusKeyword_0_1_1; }
		
		//'<-' 'chan'
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_0_2_0() { return cLessThanSignHyphenMinusKeyword_0_2_0; }
		
		//'chan'
		public Keyword getChanKeyword_0_2_1() { return cChanKeyword_0_2_1; }
		
		//elemType=elementType
		public Assignment getElemTypeAssignment_1() { return cElemTypeAssignment_1; }
		
		//elementType
		public RuleCall getElemTypeElementTypeParserRuleCall_1_0() { return cElemTypeElementTypeParserRuleCall_1_0; }
	}
	public class MethodSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.methodSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Assignment cSigAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cSigSignatureParserRuleCall_0_1_0 = (RuleCall)cSigAssignment_0_1.eContents().get(0);
		private final Assignment cTypeNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypeNameTypeNameParserRuleCall_1_0 = (RuleCall)cTypeNameAssignment_1.eContents().get(0);
		
		//methodSpec:
		//	name=IDENTIFIER sig=signature | typeName=typeName;
		@Override public ParserRule getRule() { return rule; }
		
		//name=IDENTIFIER sig=signature | typeName=typeName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=IDENTIFIER sig=signature
		public Group getGroup_0() { return cGroup_0; }
		
		//name=IDENTIFIER
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_0_0_0() { return cNameIDENTIFIERTerminalRuleCall_0_0_0; }
		
		//sig=signature
		public Assignment getSigAssignment_0_1() { return cSigAssignment_0_1; }
		
		//signature
		public RuleCall getSigSignatureParserRuleCall_0_1_0() { return cSigSignatureParserRuleCall_0_1_0; }
		
		//typeName=typeName
		public Assignment getTypeNameAssignment_1() { return cTypeNameAssignment_1; }
		
		//typeName
		public RuleCall getTypeNameTypeNameParserRuleCall_1_0() { return cTypeNameTypeNameParserRuleCall_1_0; }
	}
	public class FunctionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.functionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSigAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSigSignatureParserRuleCall_1_0 = (RuleCall)cSigAssignment_1.eContents().get(0);
		
		////FunctionType   = "func" Signature .
		////Signature      = Parameters [ Result ] .
		////Result         = Parameters | Type .
		////Parameters     = "(" [ ParameterList [ "," ] ] ")" .
		////ParameterList  = ParameterDecl { "," ParameterDecl } .
		////ParameterDecl  = [ IdentifierList ] [ "..." ] Type .
		//functionType:
		//	'func' sig=signature;
		@Override public ParserRule getRule() { return rule; }
		
		//'func' sig=signature
		public Group getGroup() { return cGroup; }
		
		//'func'
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//sig=signature
		public Assignment getSigAssignment_1() { return cSigAssignment_1; }
		
		//signature
		public RuleCall getSigSignatureParserRuleCall_1_0() { return cSigSignatureParserRuleCall_1_0; }
	}
	public class SignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.signature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParamsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParamsParametersParserRuleCall_0_0 = (RuleCall)cParamsAssignment_0.eContents().get(0);
		private final Assignment cResultAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cResultResultParserRuleCall_1_0 = (RuleCall)cResultAssignment_1.eContents().get(0);
		
		//signature:
		//	params=parameters result=result?;
		@Override public ParserRule getRule() { return rule; }
		
		//params=parameters result=result?
		public Group getGroup() { return cGroup; }
		
		//params=parameters
		public Assignment getParamsAssignment_0() { return cParamsAssignment_0; }
		
		//parameters
		public RuleCall getParamsParametersParserRuleCall_0_0() { return cParamsParametersParserRuleCall_0_0; }
		
		//result=result?
		public Assignment getResultAssignment_1() { return cResultAssignment_1; }
		
		//result
		public RuleCall getResultResultParserRuleCall_1_0() { return cResultResultParserRuleCall_1_0; }
	}
	public class ResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.result");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cParamsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cParamsParametersParserRuleCall_0_0 = (RuleCall)cParamsAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//result:
		//	params=parameters | type=type;
		@Override public ParserRule getRule() { return rule; }
		
		//params=parameters | type=type
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//params=parameters
		public Assignment getParamsAssignment_0() { return cParamsAssignment_0; }
		
		//parameters
		public RuleCall getParamsParametersParserRuleCall_0_0() { return cParamsParametersParserRuleCall_0_0; }
		
		//type=type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
	}
	public class ParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.parameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cParamListAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cParamListParameterListParserRuleCall_1_0_0 = (RuleCall)cParamListAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//parameters:
		//	'(' (paramList+=parameterList ','?)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' (paramList+=parameterList ','?)? ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(paramList+=parameterList ','?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//paramList+=parameterList
		public Assignment getParamListAssignment_1_0() { return cParamListAssignment_1_0; }
		
		//parameterList
		public RuleCall getParamListParameterListParserRuleCall_1_0_0() { return cParamListParameterListParserRuleCall_1_0_0; }
		
		//','?
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.parameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParamsDeclAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParamsDeclParameterDeclParserRuleCall_0_0 = (RuleCall)cParamsDeclAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParamsDeclAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamsDeclParameterDeclParserRuleCall_1_1_0 = (RuleCall)cParamsDeclAssignment_1_1.eContents().get(0);
		
		//parameterList:
		//	paramsDecl+=parameterDecl (',' paramsDecl+=parameterDecl)*;
		@Override public ParserRule getRule() { return rule; }
		
		//paramsDecl+=parameterDecl (',' paramsDecl+=parameterDecl)*
		public Group getGroup() { return cGroup; }
		
		//paramsDecl+=parameterDecl
		public Assignment getParamsDeclAssignment_0() { return cParamsDeclAssignment_0; }
		
		//parameterDecl
		public RuleCall getParamsDeclParameterDeclParserRuleCall_0_0() { return cParamsDeclParameterDeclParserRuleCall_0_0; }
		
		//(',' paramsDecl+=parameterDecl)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//paramsDecl+=parameterDecl
		public Assignment getParamsDeclAssignment_1_1() { return cParamsDeclAssignment_1_1; }
		
		//parameterDecl
		public RuleCall getParamsDeclParameterDeclParserRuleCall_1_1_0() { return cParamsDeclParameterDeclParserRuleCall_1_1_0; }
	}
	public class ParameterDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.parameterDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierListIdentifierListParserRuleCall_0_0 = (RuleCall)cIdentifierListAssignment_0.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//parameterDecl:
		//	identifierList=identifierList? '...'? type=type;
		@Override public ParserRule getRule() { return rule; }
		
		//identifierList=identifierList? '...'? type=type
		public Group getGroup() { return cGroup; }
		
		//identifierList=identifierList?
		public Assignment getIdentifierListAssignment_0() { return cIdentifierListAssignment_0; }
		
		//identifierList
		public RuleCall getIdentifierListIdentifierListParserRuleCall_0_0() { return cIdentifierListIdentifierListParserRuleCall_0_0; }
		
		//'...'?
		public Keyword getFullStopFullStopFullStopKeyword_1() { return cFullStopFullStopFullStopKeyword_1; }
		
		//type=type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}
	public class OperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.operand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLiteralAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralLiteralParserRuleCall_0_0 = (RuleCall)cLiteralAssignment_0.eContents().get(0);
		private final Assignment cOperandNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOperandNameOperandNameParserRuleCall_1_0 = (RuleCall)cOperandNameAssignment_1.eContents().get(0);
		private final Assignment cMethodExprAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cMethodExprMethodExprParserRuleCall_2_0 = (RuleCall)cMethodExprAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExprAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_3_1_0 = (RuleCall)cExprAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//// Operands
		////Operand     = Literal | OperandName | MethodExpr | "(" Expression ")" .
		////Literal     = BasicLit | CompositeLit | FunctionLit .
		////BasicLit    = int_lit | float_lit | imaginary_lit | rune_lit | string_lit .
		////OperandName = identifier | QualifiedIdent.
		//operand:
		//	literal=literal | operandName=operandName | methodExpr=methodExpr |
		//	'(' expr=expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//literal=literal | operandName=operandName | methodExpr=methodExpr | '(' expr=expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//literal=literal
		public Assignment getLiteralAssignment_0() { return cLiteralAssignment_0; }
		
		//literal
		public RuleCall getLiteralLiteralParserRuleCall_0_0() { return cLiteralLiteralParserRuleCall_0_0; }
		
		//operandName=operandName
		public Assignment getOperandNameAssignment_1() { return cOperandNameAssignment_1; }
		
		//operandName
		public RuleCall getOperandNameOperandNameParserRuleCall_1_0() { return cOperandNameOperandNameParserRuleCall_1_0; }
		
		//methodExpr=methodExpr
		public Assignment getMethodExprAssignment_2() { return cMethodExprAssignment_2; }
		
		//methodExpr
		public RuleCall getMethodExprMethodExprParserRuleCall_2_0() { return cMethodExprMethodExprParserRuleCall_2_0; }
		
		//'(' expr=expression ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//expr=expression
		public Assignment getExprAssignment_3_1() { return cExprAssignment_3_1; }
		
		//expression
		public RuleCall getExprExpressionParserRuleCall_3_1_0() { return cExprExpressionParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLitBasicAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLitBasicBasicLitParserRuleCall_0_0 = (RuleCall)cLitBasicAssignment_0.eContents().get(0);
		private final Assignment cLitCompositeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cLitCompositeCompositeLitParserRuleCall_1_0 = (RuleCall)cLitCompositeAssignment_1.eContents().get(0);
		private final Assignment cLitFuncAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cLitFuncFunctionLitParserRuleCall_2_0 = (RuleCall)cLitFuncAssignment_2.eContents().get(0);
		
		//literal:
		//	litBasic=basicLit | litComposite=compositeLit | litFunc=functionLit;
		@Override public ParserRule getRule() { return rule; }
		
		//litBasic=basicLit | litComposite=compositeLit | litFunc=functionLit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//litBasic=basicLit
		public Assignment getLitBasicAssignment_0() { return cLitBasicAssignment_0; }
		
		//basicLit
		public RuleCall getLitBasicBasicLitParserRuleCall_0_0() { return cLitBasicBasicLitParserRuleCall_0_0; }
		
		//litComposite=compositeLit
		public Assignment getLitCompositeAssignment_1() { return cLitCompositeAssignment_1; }
		
		//compositeLit
		public RuleCall getLitCompositeCompositeLitParserRuleCall_1_0() { return cLitCompositeCompositeLitParserRuleCall_1_0; }
		
		//litFunc=functionLit
		public Assignment getLitFuncAssignment_2() { return cLitFuncAssignment_2; }
		
		//functionLit
		public RuleCall getLitFuncFunctionLitParserRuleCall_2_0() { return cLitFuncFunctionLitParserRuleCall_2_0; }
	}
	public class BasicLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.basicLit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIntLitAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIntLitIntLitParserRuleCall_0_0 = (RuleCall)cIntLitAssignment_0.eContents().get(0);
		private final Assignment cFloatLitAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFloatLitFloatLitParserRuleCall_1_0 = (RuleCall)cFloatLitAssignment_1.eContents().get(0);
		private final Assignment cImaginaryLitAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cImaginaryLitImaginaryLitParserRuleCall_2_0 = (RuleCall)cImaginaryLitAssignment_2.eContents().get(0);
		private final Assignment cRuneLitAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cRuneLitRuneLitParserRuleCall_3_0 = (RuleCall)cRuneLitAssignment_3.eContents().get(0);
		private final Assignment cStringLitAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cStringLitStringLitParserRuleCall_4_0 = (RuleCall)cStringLitAssignment_4.eContents().get(0);
		private final Assignment cBoolLitAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cBoolLitBoolLitParserRuleCall_5_0 = (RuleCall)cBoolLitAssignment_5.eContents().get(0);
		
		//basicLit:
		//	intLit=intLit | floatLit=floatLit | imaginaryLit=imaginaryLit | runeLit=runeLit | stringLit=stringLit |
		//	boolLit=boolLit;
		@Override public ParserRule getRule() { return rule; }
		
		//intLit=intLit | floatLit=floatLit | imaginaryLit=imaginaryLit | runeLit=runeLit | stringLit=stringLit | boolLit=boolLit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//intLit=intLit
		public Assignment getIntLitAssignment_0() { return cIntLitAssignment_0; }
		
		//intLit
		public RuleCall getIntLitIntLitParserRuleCall_0_0() { return cIntLitIntLitParserRuleCall_0_0; }
		
		//floatLit=floatLit
		public Assignment getFloatLitAssignment_1() { return cFloatLitAssignment_1; }
		
		//floatLit
		public RuleCall getFloatLitFloatLitParserRuleCall_1_0() { return cFloatLitFloatLitParserRuleCall_1_0; }
		
		//imaginaryLit=imaginaryLit
		public Assignment getImaginaryLitAssignment_2() { return cImaginaryLitAssignment_2; }
		
		//imaginaryLit
		public RuleCall getImaginaryLitImaginaryLitParserRuleCall_2_0() { return cImaginaryLitImaginaryLitParserRuleCall_2_0; }
		
		//runeLit=runeLit
		public Assignment getRuneLitAssignment_3() { return cRuneLitAssignment_3; }
		
		//runeLit
		public RuleCall getRuneLitRuneLitParserRuleCall_3_0() { return cRuneLitRuneLitParserRuleCall_3_0; }
		
		//stringLit=stringLit
		public Assignment getStringLitAssignment_4() { return cStringLitAssignment_4; }
		
		//stringLit
		public RuleCall getStringLitStringLitParserRuleCall_4_0() { return cStringLitStringLitParserRuleCall_4_0; }
		
		//boolLit=boolLit
		public Assignment getBoolLitAssignment_5() { return cBoolLitAssignment_5; }
		
		//boolLit
		public RuleCall getBoolLitBoolLitParserRuleCall_5_0() { return cBoolLitBoolLitParserRuleCall_5_0; }
	}
	public class IntLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.intLit");
		private final RuleCall cINT_LITTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//intLit:
		//	INT_LIT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT_LIT
		public RuleCall getINT_LITTerminalRuleCall() { return cINT_LITTerminalRuleCall; }
	}
	public class FloatLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.floatLit");
		private final RuleCall cFLOAT_LITTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//floatLit:
		//	FLOAT_LIT;
		@Override public ParserRule getRule() { return rule; }
		
		//FLOAT_LIT
		public RuleCall getFLOAT_LITTerminalRuleCall() { return cFLOAT_LITTerminalRuleCall; }
	}
	public class ImaginaryLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.imaginaryLit");
		private final RuleCall cIMAGINARY_LITTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//imaginaryLit:
		//	IMAGINARY_LIT;
		@Override public ParserRule getRule() { return rule; }
		
		//IMAGINARY_LIT
		public RuleCall getIMAGINARY_LITTerminalRuleCall() { return cIMAGINARY_LITTerminalRuleCall; }
	}
	public class RuneLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.runeLit");
		private final RuleCall cRUNE_LITTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//runeLit:
		//	RUNE_LIT;
		@Override public ParserRule getRule() { return rule; }
		
		//RUNE_LIT
		public RuleCall getRUNE_LITTerminalRuleCall() { return cRUNE_LITTerminalRuleCall; }
	}
	public class StringLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.stringLit");
		private final RuleCall cSTRING_LITTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//stringLit:
		//	STRING_LIT;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING_LIT
		public RuleCall getSTRING_LITTerminalRuleCall() { return cSTRING_LITTerminalRuleCall; }
	}
	public class BoolLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.boolLit");
		private final RuleCall cBOOLTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//boolLit:
		//	BOOL;
		@Override public ParserRule getRule() { return rule; }
		
		//BOOL
		public RuleCall getBOOLTerminalRuleCall() { return cBOOLTerminalRuleCall; }
	}
	public class OperandNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.operandName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cQualIdentAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cQualIdentQualifiedIdentParserRuleCall_1_0 = (RuleCall)cQualIdentAssignment_1.eContents().get(0);
		
		//operandName:
		//	name=IDENTIFIER | qualIdent=qualifiedIdent;
		@Override public ParserRule getRule() { return rule; }
		
		//name=IDENTIFIER | qualIdent=qualifiedIdent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=IDENTIFIER
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_0_0() { return cNameIDENTIFIERTerminalRuleCall_0_0; }
		
		//qualIdent=qualifiedIdent
		public Assignment getQualIdentAssignment_1() { return cQualIdentAssignment_1; }
		
		//qualifiedIdent
		public RuleCall getQualIdentQualifiedIdentParserRuleCall_1_0() { return cQualIdentQualifiedIdentParserRuleCall_1_0; }
	}
	public class QualifiedIdentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.qualifiedIdent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPackageNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPackageNameIDENTIFIERTerminalRuleCall_0_0 = (RuleCall)cPackageNameAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		////QualifiedIdent = PackageName "." identifier .
		//qualifiedIdent:
		//	packageName=IDENTIFIER '.' name=IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//packageName=IDENTIFIER '.' name=IDENTIFIER
		public Group getGroup() { return cGroup; }
		
		//packageName=IDENTIFIER
		public Assignment getPackageNameAssignment_0() { return cPackageNameAssignment_0; }
		
		//IDENTIFIER
		public RuleCall getPackageNameIDENTIFIERTerminalRuleCall_0_0() { return cPackageNameIDENTIFIERTerminalRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//name=IDENTIFIER
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_2_0() { return cNameIDENTIFIERTerminalRuleCall_2_0; }
	}
	public class CompositeLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.compositeLit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLiteralTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLiteralTypeLiteralTypeParserRuleCall_0_0 = (RuleCall)cLiteralTypeAssignment_0.eContents().get(0);
		private final Assignment cLiteralValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLiteralValueLiteralValueParserRuleCall_1_0 = (RuleCall)cLiteralValueAssignment_1.eContents().get(0);
		
		////CompositeLit  = LiteralType LiteralValue .
		////LiteralType   = StructType | ArrayType | "[" "..." "]" ElementType |
		////                SliceType | MapType | TypeName .
		////LiteralValue  = "{" [ ElementList [ "," ] ] "}" .
		////ElementList   = KeyedElement { "," KeyedElement } .
		////KeyedElement  = [ Key ":" ] Element .
		////Key           = FieldName | Expression | LiteralValue .
		////FieldName     = identifier .
		////Element       = Expression | LiteralValue .
		//compositeLit:
		//	literalType=literalType literalValue=literalValue;
		@Override public ParserRule getRule() { return rule; }
		
		//literalType=literalType literalValue=literalValue
		public Group getGroup() { return cGroup; }
		
		//literalType=literalType
		public Assignment getLiteralTypeAssignment_0() { return cLiteralTypeAssignment_0; }
		
		//literalType
		public RuleCall getLiteralTypeLiteralTypeParserRuleCall_0_0() { return cLiteralTypeLiteralTypeParserRuleCall_0_0; }
		
		//literalValue=literalValue
		public Assignment getLiteralValueAssignment_1() { return cLiteralValueAssignment_1; }
		
		//literalValue
		public RuleCall getLiteralValueLiteralValueParserRuleCall_1_0() { return cLiteralValueLiteralValueParserRuleCall_1_0; }
	}
	public class LiteralTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.literalType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTypeStructTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypeArrayTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cTypeAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cTypeElementTypeParserRuleCall_2_3_0 = (RuleCall)cTypeAssignment_2_3.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cTypeSliceTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cTypeAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cTypeMapTypeParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Assignment cTypeAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cTypeTypeNameParserRuleCall_5_0 = (RuleCall)cTypeAssignment_5.eContents().get(0);
		
		//literalType:
		//	type=structType
		//	| type=arrayType
		//	| '[' '...' ']' type=elementType
		//	| type=sliceType
		//	| type=mapType
		//	| type=typeName;
		@Override public ParserRule getRule() { return rule; }
		
		//type=structType | type=arrayType | '[' '...' ']' type=elementType | type=sliceType | type=mapType | type=typeName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//type=structType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//structType
		public RuleCall getTypeStructTypeParserRuleCall_0_0() { return cTypeStructTypeParserRuleCall_0_0; }
		
		//type=arrayType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//arrayType
		public RuleCall getTypeArrayTypeParserRuleCall_1_0() { return cTypeArrayTypeParserRuleCall_1_0; }
		
		//'[' '...' ']' type=elementType
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//'...'
		public Keyword getFullStopFullStopFullStopKeyword_2_1() { return cFullStopFullStopFullStopKeyword_2_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//type=elementType
		public Assignment getTypeAssignment_2_3() { return cTypeAssignment_2_3; }
		
		//elementType
		public RuleCall getTypeElementTypeParserRuleCall_2_3_0() { return cTypeElementTypeParserRuleCall_2_3_0; }
		
		//type=sliceType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//sliceType
		public RuleCall getTypeSliceTypeParserRuleCall_3_0() { return cTypeSliceTypeParserRuleCall_3_0; }
		
		//type=mapType
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//mapType
		public RuleCall getTypeMapTypeParserRuleCall_4_0() { return cTypeMapTypeParserRuleCall_4_0; }
		
		//type=typeName
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//typeName
		public RuleCall getTypeTypeNameParserRuleCall_5_0() { return cTypeTypeNameParserRuleCall_5_0; }
	}
	public class LiteralValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.literalValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cElementListAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cElementListElementListParserRuleCall_1_0_0 = (RuleCall)cElementListAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//literalValue:
		//	'{' (elementList=elementList ','?)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' (elementList=elementList ','?)? '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//(elementList=elementList ','?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//elementList=elementList
		public Assignment getElementListAssignment_1_0() { return cElementListAssignment_1_0; }
		
		//elementList
		public RuleCall getElementListElementListParserRuleCall_1_0_0() { return cElementListElementListParserRuleCall_1_0_0; }
		
		//','?
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class ElementListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.elementList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyedElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyedElementsKeyedElementParserRuleCall_0_0 = (RuleCall)cKeyedElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cKeyedElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cKeyedElementsKeyedElementParserRuleCall_1_1_0 = (RuleCall)cKeyedElementsAssignment_1_1.eContents().get(0);
		
		//elementList:
		//	keyedElements+=keyedElement (',' keyedElements+=keyedElement)*;
		@Override public ParserRule getRule() { return rule; }
		
		//keyedElements+=keyedElement (',' keyedElements+=keyedElement)*
		public Group getGroup() { return cGroup; }
		
		//keyedElements+=keyedElement
		public Assignment getKeyedElementsAssignment_0() { return cKeyedElementsAssignment_0; }
		
		//keyedElement
		public RuleCall getKeyedElementsKeyedElementParserRuleCall_0_0() { return cKeyedElementsKeyedElementParserRuleCall_0_0; }
		
		//(',' keyedElements+=keyedElement)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//keyedElements+=keyedElement
		public Assignment getKeyedElementsAssignment_1_1() { return cKeyedElementsAssignment_1_1; }
		
		//keyedElement
		public RuleCall getKeyedElementsKeyedElementParserRuleCall_1_1_0() { return cKeyedElementsKeyedElementParserRuleCall_1_1_0; }
	}
	public class KeyedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.keyedElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cKeyKeyParserRuleCall_0_0_0 = (RuleCall)cKeyAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementElementParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		
		//keyedElement:
		//	(key=key ':')? element=element;
		@Override public ParserRule getRule() { return rule; }
		
		//(key=key ':')? element=element
		public Group getGroup() { return cGroup; }
		
		//(key=key ':')?
		public Group getGroup_0() { return cGroup_0; }
		
		//key=key
		public Assignment getKeyAssignment_0_0() { return cKeyAssignment_0_0; }
		
		//key
		public RuleCall getKeyKeyParserRuleCall_0_0_0() { return cKeyKeyParserRuleCall_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//element=element
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//element
		public RuleCall getElementElementParserRuleCall_1_0() { return cElementElementParserRuleCall_1_0; }
	}
	public class KeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.key");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Assignment cLitAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cLitLiteralValueParserRuleCall_2_0 = (RuleCall)cLitAssignment_2.eContents().get(0);
		
		//key:
		//	name=IDENTIFIER | expr=expression | lit=literalValue;
		@Override public ParserRule getRule() { return rule; }
		
		//name=IDENTIFIER | expr=expression | lit=literalValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=IDENTIFIER
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_0_0() { return cNameIDENTIFIERTerminalRuleCall_0_0; }
		
		//expr=expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }
		
		//lit=literalValue
		public Assignment getLitAssignment_2() { return cLitAssignment_2; }
		
		//literalValue
		public RuleCall getLitLiteralValueParserRuleCall_2_0() { return cLitLiteralValueParserRuleCall_2_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cContentAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cContentExpressionParserRuleCall_0_0 = (RuleCall)cContentAssignment_0.eContents().get(0);
		private final Assignment cContentAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cContentLiteralValueParserRuleCall_1_0 = (RuleCall)cContentAssignment_1.eContents().get(0);
		
		//element:
		//	content=expression | content=literalValue;
		@Override public ParserRule getRule() { return rule; }
		
		//content=expression | content=literalValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//content=expression
		public Assignment getContentAssignment_0() { return cContentAssignment_0; }
		
		//expression
		public RuleCall getContentExpressionParserRuleCall_0_0() { return cContentExpressionParserRuleCall_0_0; }
		
		//content=literalValue
		public Assignment getContentAssignment_1() { return cContentAssignment_1; }
		
		//literalValue
		public RuleCall getContentLiteralValueParserRuleCall_1_0() { return cContentLiteralValueParserRuleCall_1_0; }
	}
	public class StructTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.structType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cFieldsDeclAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cFieldsDeclFieldDeclParserRuleCall_2_0_0 = (RuleCall)cFieldsDeclAssignment_2_0.eContents().get(0);
		private final RuleCall cEosParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////StructType     = "struct" "{" { FieldDecl ";" } "}" .
		////FieldDecl      = (IdentifierList Type | AnonymousField) [ Tag ] .
		////AnonymousField = [ "*" ] TypeName .
		////Tag            = string_lit .
		//structType:
		//	'struct' '{' (fieldsDecl+=fieldDecl eos)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'struct' '{' (fieldsDecl+=fieldDecl eos)* '}'
		public Group getGroup() { return cGroup; }
		
		//'struct'
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(fieldsDecl+=fieldDecl eos)*
		public Group getGroup_2() { return cGroup_2; }
		
		//fieldsDecl+=fieldDecl
		public Assignment getFieldsDeclAssignment_2_0() { return cFieldsDeclAssignment_2_0; }
		
		//fieldDecl
		public RuleCall getFieldsDeclFieldDeclParserRuleCall_2_0_0() { return cFieldsDeclFieldDeclParserRuleCall_2_0_0; }
		
		//eos
		public RuleCall getEosParserRuleCall_2_1() { return cEosParserRuleCall_2_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class FieldDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.fieldDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cIdentifierListAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cIdentifierListIdentifierListParserRuleCall_0_0_0_0 = (RuleCall)cIdentifierListAssignment_0_0_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_0_0_1_0 = (RuleCall)cTypeAssignment_0_0_1.eContents().get(0);
		private final Assignment cAnonymousFieldAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cAnonymousFieldAnonymousFieldParserRuleCall_0_1_0 = (RuleCall)cAnonymousFieldAssignment_0_1.eContents().get(0);
		private final RuleCall cSTRING_LITTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//fieldDecl:
		//	(identifierList=identifierList type=type | anonymousField=anonymousField) STRING_LIT?;
		@Override public ParserRule getRule() { return rule; }
		
		//(identifierList=identifierList type=type | anonymousField=anonymousField) STRING_LIT?
		public Group getGroup() { return cGroup; }
		
		//identifierList=identifierList type=type | anonymousField=anonymousField
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//identifierList=identifierList type=type
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//identifierList=identifierList
		public Assignment getIdentifierListAssignment_0_0_0() { return cIdentifierListAssignment_0_0_0; }
		
		//identifierList
		public RuleCall getIdentifierListIdentifierListParserRuleCall_0_0_0_0() { return cIdentifierListIdentifierListParserRuleCall_0_0_0_0; }
		
		//type=type
		public Assignment getTypeAssignment_0_0_1() { return cTypeAssignment_0_0_1; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_0_0_1_0() { return cTypeTypeParserRuleCall_0_0_1_0; }
		
		//anonymousField=anonymousField
		public Assignment getAnonymousFieldAssignment_0_1() { return cAnonymousFieldAssignment_0_1; }
		
		//anonymousField
		public RuleCall getAnonymousFieldAnonymousFieldParserRuleCall_0_1_0() { return cAnonymousFieldAnonymousFieldParserRuleCall_0_1_0; }
		
		//STRING_LIT?
		public RuleCall getSTRING_LITTerminalRuleCall_1() { return cSTRING_LITTerminalRuleCall_1; }
	}
	public class AnonymousFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.anonymousField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeNameTypeNameParserRuleCall_1_0 = (RuleCall)cTypeNameAssignment_1.eContents().get(0);
		
		//anonymousField:
		//	'*'? typeName=typeName;
		@Override public ParserRule getRule() { return rule; }
		
		//'*'? typeName=typeName
		public Group getGroup() { return cGroup; }
		
		//'*'?
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//typeName=typeName
		public Assignment getTypeNameAssignment_1() { return cTypeNameAssignment_1; }
		
		//typeName
		public RuleCall getTypeNameTypeNameParserRuleCall_1_0() { return cTypeNameTypeNameParserRuleCall_1_0; }
	}
	public class FunctionLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.functionLit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionFunctionParserRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		
		////FunctionLit = "func" Function .
		//functionLit:
		//	'func' function=function;
		@Override public ParserRule getRule() { return rule; }
		
		//'func' function=function
		public Group getGroup() { return cGroup; }
		
		//'func'
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//function=function
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }
		
		//function
		public RuleCall getFunctionFunctionParserRuleCall_1_0() { return cFunctionFunctionParserRuleCall_1_0; }
	}
	public class PrimaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.primaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final Assignment cOperandAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cOperandOperandParserRuleCall_0_0_0 = (RuleCall)cOperandAssignment_0_0.eContents().get(0);
		private final Assignment cConversionAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cConversionConversionParserRuleCall_0_1_0 = (RuleCall)cConversionAssignment_0_1.eContents().get(0);
		private final Assignment cPrimaryExprSelectorAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPrimaryExprSelectorPrimaryExprSelectorParserRuleCall_1_0 = (RuleCall)cPrimaryExprSelectorAssignment_1.eContents().get(0);
		private final Assignment cPrimaryExprIndexAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cPrimaryExprIndexPrimaryExprIndexParserRuleCall_2_0 = (RuleCall)cPrimaryExprIndexAssignment_2.eContents().get(0);
		private final Assignment cPrimaryExprSliceAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cPrimaryExprSlicePrimaryExprSliceParserRuleCall_3_0 = (RuleCall)cPrimaryExprSliceAssignment_3.eContents().get(0);
		private final Assignment cPrimaryExprTypeAssertionAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cPrimaryExprTypeAssertionPrimaryExprTypeAssertionParserRuleCall_4_0 = (RuleCall)cPrimaryExprTypeAssertionAssignment_4.eContents().get(0);
		private final Assignment cPrimaryExprArgumentsAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cPrimaryExprArgumentsPrimaryExprArgumentsParserRuleCall_5_0 = (RuleCall)cPrimaryExprArgumentsAssignment_5.eContents().get(0);
		
		////PrimaryExpr =
		////	Operand |
		////	Conversion |
		////	PrimaryExpr Selector |
		////	PrimaryExpr Index |
		////	PrimaryExpr Slice |
		////	PrimaryExpr TypeAssertion |
		////	PrimaryExpr Arguments .
		////
		////Selector       = "." identifier .
		////Index          = "[" Expression "]" .
		////Slice          = "[" ( [ Expression ] ":" [ Expression ] ) |
		////                     ( [ Expression ] ":" Expression ":" Expression )
		////                 "]" .
		////TypeAssertion  = "." "(" Type ")" .
		////Arguments      = "(" [ ( ExpressionList | Type [ "," ExpressionList ] ) [ "..." ] [ "," ] ] ")" .
		//primaryExpr:
		//	(operand=operand | conversion=conversion) | primaryExprSelector=primaryExprSelector |
		//	primaryExprIndex=primaryExprIndex | primaryExprSlice=primaryExprSlice |
		//	primaryExprTypeAssertion=primaryExprTypeAssertion | primaryExprArguments=primaryExprArguments;
		@Override public ParserRule getRule() { return rule; }
		
		//(operand=operand | conversion=conversion) | primaryExprSelector=primaryExprSelector | primaryExprIndex=primaryExprIndex
		//| primaryExprSlice=primaryExprSlice | primaryExprTypeAssertion=primaryExprTypeAssertion |
		//primaryExprArguments=primaryExprArguments
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(operand=operand | conversion=conversion)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//operand=operand
		public Assignment getOperandAssignment_0_0() { return cOperandAssignment_0_0; }
		
		//operand
		public RuleCall getOperandOperandParserRuleCall_0_0_0() { return cOperandOperandParserRuleCall_0_0_0; }
		
		//conversion=conversion
		public Assignment getConversionAssignment_0_1() { return cConversionAssignment_0_1; }
		
		//conversion
		public RuleCall getConversionConversionParserRuleCall_0_1_0() { return cConversionConversionParserRuleCall_0_1_0; }
		
		//primaryExprSelector=primaryExprSelector
		public Assignment getPrimaryExprSelectorAssignment_1() { return cPrimaryExprSelectorAssignment_1; }
		
		//primaryExprSelector
		public RuleCall getPrimaryExprSelectorPrimaryExprSelectorParserRuleCall_1_0() { return cPrimaryExprSelectorPrimaryExprSelectorParserRuleCall_1_0; }
		
		//primaryExprIndex=primaryExprIndex
		public Assignment getPrimaryExprIndexAssignment_2() { return cPrimaryExprIndexAssignment_2; }
		
		//primaryExprIndex
		public RuleCall getPrimaryExprIndexPrimaryExprIndexParserRuleCall_2_0() { return cPrimaryExprIndexPrimaryExprIndexParserRuleCall_2_0; }
		
		//primaryExprSlice=primaryExprSlice
		public Assignment getPrimaryExprSliceAssignment_3() { return cPrimaryExprSliceAssignment_3; }
		
		//primaryExprSlice
		public RuleCall getPrimaryExprSlicePrimaryExprSliceParserRuleCall_3_0() { return cPrimaryExprSlicePrimaryExprSliceParserRuleCall_3_0; }
		
		//primaryExprTypeAssertion=primaryExprTypeAssertion
		public Assignment getPrimaryExprTypeAssertionAssignment_4() { return cPrimaryExprTypeAssertionAssignment_4; }
		
		//primaryExprTypeAssertion
		public RuleCall getPrimaryExprTypeAssertionPrimaryExprTypeAssertionParserRuleCall_4_0() { return cPrimaryExprTypeAssertionPrimaryExprTypeAssertionParserRuleCall_4_0; }
		
		//primaryExprArguments=primaryExprArguments
		public Assignment getPrimaryExprArgumentsAssignment_5() { return cPrimaryExprArgumentsAssignment_5; }
		
		//primaryExprArguments
		public RuleCall getPrimaryExprArgumentsPrimaryExprArgumentsParserRuleCall_5_0() { return cPrimaryExprArgumentsPrimaryExprArgumentsParserRuleCall_5_0; }
	}
	public class PrimaryExprStuffElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.primaryExprStuff");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSelectorAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSelectorSelectorParserRuleCall_0_0 = (RuleCall)cSelectorAssignment_0.eContents().get(0);
		private final Assignment cIndexAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIndexIndexParserRuleCall_1_0 = (RuleCall)cIndexAssignment_1.eContents().get(0);
		private final Assignment cSliceAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSliceSliceParserRuleCall_2_0 = (RuleCall)cSliceAssignment_2.eContents().get(0);
		private final Assignment cTypeAssertionAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cTypeAssertionTypeAssertionParserRuleCall_3_0 = (RuleCall)cTypeAssertionAssignment_3.eContents().get(0);
		private final Assignment cArgumentsAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cArgumentsArgumentsParserRuleCall_4_0 = (RuleCall)cArgumentsAssignment_4.eContents().get(0);
		
		//primaryExprStuff:
		//	selector=selector | index=index | slice=slice | typeAssertion=typeAssertion | arguments=arguments;
		@Override public ParserRule getRule() { return rule; }
		
		//selector=selector | index=index | slice=slice | typeAssertion=typeAssertion | arguments=arguments
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//selector=selector
		public Assignment getSelectorAssignment_0() { return cSelectorAssignment_0; }
		
		//selector
		public RuleCall getSelectorSelectorParserRuleCall_0_0() { return cSelectorSelectorParserRuleCall_0_0; }
		
		//index=index
		public Assignment getIndexAssignment_1() { return cIndexAssignment_1; }
		
		//index
		public RuleCall getIndexIndexParserRuleCall_1_0() { return cIndexIndexParserRuleCall_1_0; }
		
		//slice=slice
		public Assignment getSliceAssignment_2() { return cSliceAssignment_2; }
		
		//slice
		public RuleCall getSliceSliceParserRuleCall_2_0() { return cSliceSliceParserRuleCall_2_0; }
		
		//typeAssertion=typeAssertion
		public Assignment getTypeAssertionAssignment_3() { return cTypeAssertionAssignment_3; }
		
		//typeAssertion
		public RuleCall getTypeAssertionTypeAssertionParserRuleCall_3_0() { return cTypeAssertionTypeAssertionParserRuleCall_3_0; }
		
		//arguments=arguments
		public Assignment getArgumentsAssignment_4() { return cArgumentsAssignment_4; }
		
		//arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_4_0() { return cArgumentsArgumentsParserRuleCall_4_0; }
	}
	public class PrimaryExprSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.primaryExprSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContentPrimaryExprStuffParserRuleCall_0_0 = (RuleCall)cContentAssignment_0.eContents().get(0);
		private final Assignment cPrimaryExprSelectorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrimaryExprSelectorPrimaryExprSelectorParserRuleCall_1_0 = (RuleCall)cPrimaryExprSelectorAssignment_1.eContents().get(0);
		
		//////Left Rec removal for primaryExpr
		//primaryExprSelector:
		//	(content=primaryExprStuff primaryExprSelector=primaryExprSelector)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(content=primaryExprStuff primaryExprSelector=primaryExprSelector)?
		public Group getGroup() { return cGroup; }
		
		//content=primaryExprStuff
		public Assignment getContentAssignment_0() { return cContentAssignment_0; }
		
		//primaryExprStuff
		public RuleCall getContentPrimaryExprStuffParserRuleCall_0_0() { return cContentPrimaryExprStuffParserRuleCall_0_0; }
		
		//primaryExprSelector=primaryExprSelector
		public Assignment getPrimaryExprSelectorAssignment_1() { return cPrimaryExprSelectorAssignment_1; }
		
		//primaryExprSelector
		public RuleCall getPrimaryExprSelectorPrimaryExprSelectorParserRuleCall_1_0() { return cPrimaryExprSelectorPrimaryExprSelectorParserRuleCall_1_0; }
	}
	public class PrimaryExprIndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.primaryExprIndex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContentPrimaryExprStuffParserRuleCall_0_0 = (RuleCall)cContentAssignment_0.eContents().get(0);
		private final Assignment cPrimaryExprIndexAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrimaryExprIndexPrimaryExprIndexParserRuleCall_1_0 = (RuleCall)cPrimaryExprIndexAssignment_1.eContents().get(0);
		
		//primaryExprIndex:
		//	(content=primaryExprStuff primaryExprIndex=primaryExprIndex)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(content=primaryExprStuff primaryExprIndex=primaryExprIndex)?
		public Group getGroup() { return cGroup; }
		
		//content=primaryExprStuff
		public Assignment getContentAssignment_0() { return cContentAssignment_0; }
		
		//primaryExprStuff
		public RuleCall getContentPrimaryExprStuffParserRuleCall_0_0() { return cContentPrimaryExprStuffParserRuleCall_0_0; }
		
		//primaryExprIndex=primaryExprIndex
		public Assignment getPrimaryExprIndexAssignment_1() { return cPrimaryExprIndexAssignment_1; }
		
		//primaryExprIndex
		public RuleCall getPrimaryExprIndexPrimaryExprIndexParserRuleCall_1_0() { return cPrimaryExprIndexPrimaryExprIndexParserRuleCall_1_0; }
	}
	public class PrimaryExprSliceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.primaryExprSlice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContentPrimaryExprStuffParserRuleCall_0_0 = (RuleCall)cContentAssignment_0.eContents().get(0);
		private final Assignment cPrimaryExprSliceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrimaryExprSlicePrimaryExprSliceParserRuleCall_1_0 = (RuleCall)cPrimaryExprSliceAssignment_1.eContents().get(0);
		
		//primaryExprSlice:
		//	(content=primaryExprStuff primaryExprSlice=primaryExprSlice)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(content=primaryExprStuff primaryExprSlice=primaryExprSlice)?
		public Group getGroup() { return cGroup; }
		
		//content=primaryExprStuff
		public Assignment getContentAssignment_0() { return cContentAssignment_0; }
		
		//primaryExprStuff
		public RuleCall getContentPrimaryExprStuffParserRuleCall_0_0() { return cContentPrimaryExprStuffParserRuleCall_0_0; }
		
		//primaryExprSlice=primaryExprSlice
		public Assignment getPrimaryExprSliceAssignment_1() { return cPrimaryExprSliceAssignment_1; }
		
		//primaryExprSlice
		public RuleCall getPrimaryExprSlicePrimaryExprSliceParserRuleCall_1_0() { return cPrimaryExprSlicePrimaryExprSliceParserRuleCall_1_0; }
	}
	public class PrimaryExprTypeAssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.primaryExprTypeAssertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContentPrimaryExprStuffParserRuleCall_0_0 = (RuleCall)cContentAssignment_0.eContents().get(0);
		private final Assignment cPrimaryExprTypeAssertionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrimaryExprTypeAssertionPrimaryExprTypeAssertionParserRuleCall_1_0 = (RuleCall)cPrimaryExprTypeAssertionAssignment_1.eContents().get(0);
		
		//primaryExprTypeAssertion:
		//	(content=primaryExprStuff primaryExprTypeAssertion=primaryExprTypeAssertion)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(content=primaryExprStuff primaryExprTypeAssertion=primaryExprTypeAssertion)?
		public Group getGroup() { return cGroup; }
		
		//content=primaryExprStuff
		public Assignment getContentAssignment_0() { return cContentAssignment_0; }
		
		//primaryExprStuff
		public RuleCall getContentPrimaryExprStuffParserRuleCall_0_0() { return cContentPrimaryExprStuffParserRuleCall_0_0; }
		
		//primaryExprTypeAssertion=primaryExprTypeAssertion
		public Assignment getPrimaryExprTypeAssertionAssignment_1() { return cPrimaryExprTypeAssertionAssignment_1; }
		
		//primaryExprTypeAssertion
		public RuleCall getPrimaryExprTypeAssertionPrimaryExprTypeAssertionParserRuleCall_1_0() { return cPrimaryExprTypeAssertionPrimaryExprTypeAssertionParserRuleCall_1_0; }
	}
	public class PrimaryExprArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.primaryExprArguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContentPrimaryExprStuffParserRuleCall_0_0 = (RuleCall)cContentAssignment_0.eContents().get(0);
		private final Assignment cPrimaryExprArgumentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrimaryExprArgumentsPrimaryExprArgumentsParserRuleCall_1_0 = (RuleCall)cPrimaryExprArgumentsAssignment_1.eContents().get(0);
		
		//primaryExprArguments:
		//	(content=primaryExprStuff primaryExprArguments=primaryExprArguments)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(content=primaryExprStuff primaryExprArguments=primaryExprArguments)?
		public Group getGroup() { return cGroup; }
		
		//content=primaryExprStuff
		public Assignment getContentAssignment_0() { return cContentAssignment_0; }
		
		//primaryExprStuff
		public RuleCall getContentPrimaryExprStuffParserRuleCall_0_0() { return cContentPrimaryExprStuffParserRuleCall_0_0; }
		
		//primaryExprArguments=primaryExprArguments
		public Assignment getPrimaryExprArgumentsAssignment_1() { return cPrimaryExprArgumentsAssignment_1; }
		
		//primaryExprArguments
		public RuleCall getPrimaryExprArgumentsPrimaryExprArgumentsParserRuleCall_1_0() { return cPrimaryExprArgumentsPrimaryExprArgumentsParserRuleCall_1_0; }
	}
	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.selector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//////
		//selector:
		//	'.' name=IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//'.' name=IDENTIFIER
		public Group getGroup() { return cGroup; }
		
		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//name=IDENTIFIER
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_1_0() { return cNameIDENTIFIERTerminalRuleCall_1_0; }
	}
	public class IndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.index");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//index:
		//	'[' expr=expression ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' expr=expression ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//expr=expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class SliceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.slice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cExpr1Assignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cExpr1ExpressionParserRuleCall_1_0_0_0 = (RuleCall)cExpr1Assignment_1_0_0.eContents().get(0);
		private final Keyword cColonKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cExpr2Assignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cExpr2ExpressionParserRuleCall_1_0_2_0 = (RuleCall)cExpr2Assignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cExpr1Assignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cExpr1ExpressionParserRuleCall_1_1_0_0 = (RuleCall)cExpr1Assignment_1_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cExpr2Assignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cExpr2ExpressionParserRuleCall_1_1_2_0 = (RuleCall)cExpr2Assignment_1_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Assignment cExpr3Assignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final RuleCall cExpr3ExpressionParserRuleCall_1_1_4_0 = (RuleCall)cExpr3Assignment_1_1_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//slice:
		//	'[' (expr1=expression? ':' expr2=expression? | expr1=expression? ':' expr2=expression ':' expr3=expression) ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' (expr1=expression? ':' expr2=expression? | expr1=expression? ':' expr2=expression ':' expr3=expression) ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//expr1=expression? ':' expr2=expression? | expr1=expression? ':' expr2=expression ':' expr3=expression
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//expr1=expression? ':' expr2=expression?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//expr1=expression?
		public Assignment getExpr1Assignment_1_0_0() { return cExpr1Assignment_1_0_0; }
		
		//expression
		public RuleCall getExpr1ExpressionParserRuleCall_1_0_0_0() { return cExpr1ExpressionParserRuleCall_1_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_0_1() { return cColonKeyword_1_0_1; }
		
		//expr2=expression?
		public Assignment getExpr2Assignment_1_0_2() { return cExpr2Assignment_1_0_2; }
		
		//expression
		public RuleCall getExpr2ExpressionParserRuleCall_1_0_2_0() { return cExpr2ExpressionParserRuleCall_1_0_2_0; }
		
		//expr1=expression? ':' expr2=expression ':' expr3=expression
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//expr1=expression?
		public Assignment getExpr1Assignment_1_1_0() { return cExpr1Assignment_1_1_0; }
		
		//expression
		public RuleCall getExpr1ExpressionParserRuleCall_1_1_0_0() { return cExpr1ExpressionParserRuleCall_1_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_1_1() { return cColonKeyword_1_1_1; }
		
		//expr2=expression
		public Assignment getExpr2Assignment_1_1_2() { return cExpr2Assignment_1_1_2; }
		
		//expression
		public RuleCall getExpr2ExpressionParserRuleCall_1_1_2_0() { return cExpr2ExpressionParserRuleCall_1_1_2_0; }
		
		//':'
		public Keyword getColonKeyword_1_1_3() { return cColonKeyword_1_1_3; }
		
		//expr3=expression
		public Assignment getExpr3Assignment_1_1_4() { return cExpr3Assignment_1_1_4; }
		
		//expression
		public RuleCall getExpr3ExpressionParserRuleCall_1_1_4_0() { return cExpr3ExpressionParserRuleCall_1_1_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class TypeAssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.typeAssertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//typeAssertion:
		//	'.' '(' type=type ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'.' '(' type=type ')'
		public Group getGroup() { return cGroup; }
		
		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//type=type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.arguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cExpressionListAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cExpressionListExpressionListParserRuleCall_1_0_0_0 = (RuleCall)cExpressionListAssignment_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Assignment cTypeAssignment_1_0_1_0 = (Assignment)cGroup_1_0_1.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_1_0_1_0_0 = (RuleCall)cTypeAssignment_1_0_1_0.eContents().get(0);
		private final Group cGroup_1_0_1_1 = (Group)cGroup_1_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_1_1_0 = (Keyword)cGroup_1_0_1_1.eContents().get(0);
		private final Assignment cExpressionListAssignment_1_0_1_1_1 = (Assignment)cGroup_1_0_1_1.eContents().get(1);
		private final RuleCall cExpressionListExpressionListParserRuleCall_1_0_1_1_1_0 = (RuleCall)cExpressionListAssignment_1_0_1_1_1.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//arguments:
		//	'(' ((expressionList=expressionList | type=type (',' expressionList=expressionList)?) '...'? ','?)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' ((expressionList=expressionList | type=type (',' expressionList=expressionList)?) '...'? ','?)? ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//((expressionList=expressionList | type=type (',' expressionList=expressionList)?) '...'? ','?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//expressionList=expressionList | type=type (',' expressionList=expressionList)?
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//expressionList=expressionList
		public Assignment getExpressionListAssignment_1_0_0() { return cExpressionListAssignment_1_0_0; }
		
		//expressionList
		public RuleCall getExpressionListExpressionListParserRuleCall_1_0_0_0() { return cExpressionListExpressionListParserRuleCall_1_0_0_0; }
		
		//type=type (',' expressionList=expressionList)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//type=type
		public Assignment getTypeAssignment_1_0_1_0() { return cTypeAssignment_1_0_1_0; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_1_0_1_0_0() { return cTypeTypeParserRuleCall_1_0_1_0_0; }
		
		//(',' expressionList=expressionList)?
		public Group getGroup_1_0_1_1() { return cGroup_1_0_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_0_1_1_0() { return cCommaKeyword_1_0_1_1_0; }
		
		//expressionList=expressionList
		public Assignment getExpressionListAssignment_1_0_1_1_1() { return cExpressionListAssignment_1_0_1_1_1; }
		
		//expressionList
		public RuleCall getExpressionListExpressionListParserRuleCall_1_0_1_1_1_0() { return cExpressionListExpressionListParserRuleCall_1_0_1_1_1_0; }
		
		//'...'?
		public Keyword getFullStopFullStopFullStopKeyword_1_1() { return cFullStopFullStopFullStopKeyword_1_1; }
		
		//','?
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class MethodExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.methodExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReceiverTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReceiverTypeReceiverTypeParserRuleCall_0_0 = (RuleCall)cReceiverTypeAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		////MethodExpr    = ReceiverType "." MethodName .
		////ReceiverType  = TypeName | "(" "*" TypeName ")" | "(" ReceiverType ")" .
		//methodExpr:
		//	receiverType=receiverType '.' IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//receiverType=receiverType '.' IDENTIFIER
		public Group getGroup() { return cGroup; }
		
		//receiverType=receiverType
		public Assignment getReceiverTypeAssignment_0() { return cReceiverTypeAssignment_0; }
		
		//receiverType
		public RuleCall getReceiverTypeReceiverTypeParserRuleCall_0_0() { return cReceiverTypeReceiverTypeParserRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_2() { return cIDENTIFIERTerminalRuleCall_2; }
	}
	public class ReceiverTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.receiverType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTypeNameTypeNameParserRuleCall_0_0 = (RuleCall)cTypeNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypeNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTypeNameTypeNameParserRuleCall_1_2_0 = (RuleCall)cTypeNameAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cReceiverTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cReceiverTypeReceiverTypeParserRuleCall_2_1_0 = (RuleCall)cReceiverTypeAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//receiverType:
		//	typeName=typeName
		//	| '(' '*' typeName=typeName ')'
		//	| '(' receiverType=receiverType ')';
		@Override public ParserRule getRule() { return rule; }
		
		//typeName=typeName | '(' '*' typeName=typeName ')' | '(' receiverType=receiverType ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//typeName=typeName
		public Assignment getTypeNameAssignment_0() { return cTypeNameAssignment_0; }
		
		//typeName
		public RuleCall getTypeNameTypeNameParserRuleCall_0_0() { return cTypeNameTypeNameParserRuleCall_0_0; }
		
		//'(' '*' typeName=typeName ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
		
		//typeName=typeName
		public Assignment getTypeNameAssignment_1_2() { return cTypeNameAssignment_1_2; }
		
		//typeName
		public RuleCall getTypeNameTypeNameParserRuleCall_1_2_0() { return cTypeNameTypeNameParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//'(' receiverType=receiverType ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//receiverType=receiverType
		public Assignment getReceiverTypeAssignment_2_1() { return cReceiverTypeAssignment_2_1; }
		
		//receiverType
		public RuleCall getReceiverTypeReceiverTypeParserRuleCall_2_1_0() { return cReceiverTypeReceiverTypeParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnaryExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUnaryExprUnaryExprParserRuleCall_0_0 = (RuleCall)cUnaryExprAssignment_0.eContents().get(0);
		private final Assignment cExpressionMatchedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionMatchedExpressionMatchedParserRuleCall_1_0 = (RuleCall)cExpressionMatchedAssignment_1.eContents().get(0);
		
		////Expression = UnaryExpr | Expression binary_op Expression .
		////UnaryExpr  = PrimaryExpr | unary_op UnaryExpr .
		//expression:
		//	unaryExpr=unaryExpr
		//	//  | expression BINARY_OP expression
		//	expressionMatched=expressionMatched;
		@Override public ParserRule getRule() { return rule; }
		
		//unaryExpr=unaryExpr //  | expression BINARY_OP expression
		//expressionMatched=expressionMatched
		public Group getGroup() { return cGroup; }
		
		//unaryExpr=unaryExpr
		public Assignment getUnaryExprAssignment_0() { return cUnaryExprAssignment_0; }
		
		//unaryExpr
		public RuleCall getUnaryExprUnaryExprParserRuleCall_0_0() { return cUnaryExprUnaryExprParserRuleCall_0_0; }
		
		////  | expression BINARY_OP expression
		//expressionMatched=expressionMatched
		public Assignment getExpressionMatchedAssignment_1() { return cExpressionMatchedAssignment_1; }
		
		//expressionMatched
		public RuleCall getExpressionMatchedExpressionMatchedParserRuleCall_1_0() { return cExpressionMatchedExpressionMatchedParserRuleCall_1_0; }
	}
	public class ExpressionMatchedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.expressionMatched");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorBINARY_OPTerminalRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		////// attempt to remove left recursion of rule expression
		//expressionMatched:
		//	(operator=BINARY_OP expression=expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(operator=BINARY_OP expression=expression)?
		public Group getGroup() { return cGroup; }
		
		//operator=BINARY_OP
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//BINARY_OP
		public RuleCall getOperatorBINARY_OPTerminalRuleCall_0_0() { return cOperatorBINARY_OPTerminalRuleCall_0_0; }
		
		//expression=expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class UnaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.unaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPrimaryExprAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPrimaryExprPrimaryExprParserRuleCall_0_0 = (RuleCall)cPrimaryExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1_0_2 = (Keyword)cAlternatives_1_0.eContents().get(2);
		private final Keyword cCircumflexAccentKeyword_1_0_3 = (Keyword)cAlternatives_1_0.eContents().get(3);
		private final Keyword cAsteriskKeyword_1_0_4 = (Keyword)cAlternatives_1_0.eContents().get(4);
		private final Keyword cAmpersandKeyword_1_0_5 = (Keyword)cAlternatives_1_0.eContents().get(5);
		private final Keyword cLessThanSignHyphenMinusKeyword_1_0_6 = (Keyword)cAlternatives_1_0.eContents().get(6);
		private final Assignment cUnaryExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUnaryExprUnaryExprParserRuleCall_1_1_0 = (RuleCall)cUnaryExprAssignment_1_1.eContents().get(0);
		
		//////
		//unaryExpr:
		//	primaryExpr=primaryExpr | ('+' | '-' | '!' | '^' | '*' | '&' | '<-') unaryExpr=unaryExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//primaryExpr=primaryExpr | ('+' | '-' | '!' | '^' | '*' | '&' | '<-') unaryExpr=unaryExpr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//primaryExpr=primaryExpr
		public Assignment getPrimaryExprAssignment_0() { return cPrimaryExprAssignment_0; }
		
		//primaryExpr
		public RuleCall getPrimaryExprPrimaryExprParserRuleCall_0_0() { return cPrimaryExprPrimaryExprParserRuleCall_0_0; }
		
		//('+' | '-' | '!' | '^' | '*' | '&' | '<-') unaryExpr=unaryExpr
		public Group getGroup_1() { return cGroup_1; }
		
		//'+' | '-' | '!' | '^' | '*' | '&' | '<-'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0() { return cPlusSignKeyword_1_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1() { return cHyphenMinusKeyword_1_0_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1_0_2() { return cExclamationMarkKeyword_1_0_2; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_1_0_3() { return cCircumflexAccentKeyword_1_0_3; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_4() { return cAsteriskKeyword_1_0_4; }
		
		//'&'
		public Keyword getAmpersandKeyword_1_0_5() { return cAmpersandKeyword_1_0_5; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_1_0_6() { return cLessThanSignHyphenMinusKeyword_1_0_6; }
		
		//unaryExpr=unaryExpr
		public Assignment getUnaryExprAssignment_1_1() { return cUnaryExprAssignment_1_1; }
		
		//unaryExpr
		public RuleCall getUnaryExprUnaryExprParserRuleCall_1_1_0() { return cUnaryExprUnaryExprParserRuleCall_1_1_0; }
	}
	public class ConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.conversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////Conversion = Type "(" Expression [ "," ] ")" .
		//conversion:
		//	type=type '(' expression=expression ','? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//type=type '(' expression=expression ','? ')'
		public Group getGroup() { return cGroup; }
		
		//type=type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//','?
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class EosElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.eos");
		private final Keyword cSemicolonKeyword = (Keyword)rule.eContents().get(1);
		
		//eos:
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//';'
		public Keyword getSemicolonKeyword() { return cSemicolonKeyword; }
	}
	
	
	private final ModelElements pModel;
	private final SourceFileElements pSourceFile;
	private final PackageClauseElements pPackageClause;
	private final ImportDeclElements pImportDecl;
	private final ImportSpecElements pImportSpec;
	private final ImportPathElements pImportPath;
	private final TopLevelDeclElements pTopLevelDecl;
	private final DeclarationElements pDeclaration;
	private final ConstDeclElements pConstDecl;
	private final ConstSpecElements pConstSpec;
	private final IdentifierListElements pIdentifierList;
	private final ExpressionListElements pExpressionList;
	private final TypeDeclElements pTypeDecl;
	private final TypeSpecElements pTypeSpec;
	private final FunctionDeclElements pFunctionDecl;
	private final FunctionElements pFunction;
	private final MethodDeclElements pMethodDecl;
	private final ReceiverElements pReceiver;
	private final VarDeclElements pVarDecl;
	private final VarSpecElements pVarSpec;
	private final BlockElements pBlock;
	private final StatementListElements pStatementList;
	private final StatementElements pStatement;
	private final SimpleStmtElements pSimpleStmt;
	private final ExpressionStmtElements pExpressionStmt;
	private final SendStmtElements pSendStmt;
	private final IncDecStmtElements pIncDecStmt;
	private final AssignmentElements pAssignment;
	private final Assign_opElements pAssign_op;
	private final ShortVarDeclElements pShortVarDecl;
	private final EmptyStmtElements pEmptyStmt;
	private final LabeledStmtElements pLabeledStmt;
	private final ReturnStmtElements pReturnStmt;
	private final BreakStmtElements pBreakStmt;
	private final ContinueStmtElements pContinueStmt;
	private final GotoStmtElements pGotoStmt;
	private final FallthroughStmtElements pFallthroughStmt;
	private final DeferStmtElements pDeferStmt;
	private final IfStmtElements pIfStmt;
	private final SwitchStmtElements pSwitchStmt;
	private final ExprSwitchStmtElements pExprSwitchStmt;
	private final ExprCaseClauseElements pExprCaseClause;
	private final ExprSwitchCaseElements pExprSwitchCase;
	private final TypeSwitchStmtElements pTypeSwitchStmt;
	private final TypeSwitchGuardElements pTypeSwitchGuard;
	private final TypeCaseClauseElements pTypeCaseClause;
	private final TypeSwitchCaseElements pTypeSwitchCase;
	private final TypeListElements pTypeList;
	private final SelectStmtElements pSelectStmt;
	private final CommClauseElements pCommClause;
	private final CommCaseElements pCommCase;
	private final RecvStmtElements pRecvStmt;
	private final ForStmtElements pForStmt;
	private final ForClauseElements pForClause;
	private final RangeClauseElements pRangeClause;
	private final GoStmtElements pGoStmt;
	private final TypeElements pType;
	private final TypeNameElements pTypeName;
	private final TypeLitElements pTypeLit;
	private final ArrayTypeElements pArrayType;
	private final ArrayLengthElements pArrayLength;
	private final ElementTypeElements pElementType;
	private final PointerTypeElements pPointerType;
	private final InterfaceTypeElements pInterfaceType;
	private final SliceTypeElements pSliceType;
	private final MapTypeElements pMapType;
	private final ChannelTypeElements pChannelType;
	private final MethodSpecElements pMethodSpec;
	private final FunctionTypeElements pFunctionType;
	private final SignatureElements pSignature;
	private final ResultElements pResult;
	private final ParametersElements pParameters;
	private final ParameterListElements pParameterList;
	private final ParameterDeclElements pParameterDecl;
	private final OperandElements pOperand;
	private final LiteralElements pLiteral;
	private final BasicLitElements pBasicLit;
	private final IntLitElements pIntLit;
	private final FloatLitElements pFloatLit;
	private final ImaginaryLitElements pImaginaryLit;
	private final RuneLitElements pRuneLit;
	private final StringLitElements pStringLit;
	private final BoolLitElements pBoolLit;
	private final OperandNameElements pOperandName;
	private final QualifiedIdentElements pQualifiedIdent;
	private final CompositeLitElements pCompositeLit;
	private final LiteralTypeElements pLiteralType;
	private final LiteralValueElements pLiteralValue;
	private final ElementListElements pElementList;
	private final KeyedElementElements pKeyedElement;
	private final KeyElements pKey;
	private final ElementElements pElement;
	private final StructTypeElements pStructType;
	private final FieldDeclElements pFieldDecl;
	private final AnonymousFieldElements pAnonymousField;
	private final FunctionLitElements pFunctionLit;
	private final PrimaryExprElements pPrimaryExpr;
	private final PrimaryExprStuffElements pPrimaryExprStuff;
	private final PrimaryExprSelectorElements pPrimaryExprSelector;
	private final PrimaryExprIndexElements pPrimaryExprIndex;
	private final PrimaryExprSliceElements pPrimaryExprSlice;
	private final PrimaryExprTypeAssertionElements pPrimaryExprTypeAssertion;
	private final PrimaryExprArgumentsElements pPrimaryExprArguments;
	private final SelectorElements pSelector;
	private final IndexElements pIndex;
	private final SliceElements pSlice;
	private final TypeAssertionElements pTypeAssertion;
	private final ArgumentsElements pArguments;
	private final MethodExprElements pMethodExpr;
	private final ReceiverTypeElements pReceiverType;
	private final ExpressionElements pExpression;
	private final ExpressionMatchedElements pExpressionMatched;
	private final UnaryExprElements pUnaryExpr;
	private final ConversionElements pConversion;
	private final EosElements pEos;
	private final TerminalRule tBOOL;
	private final TerminalRule tIDENTIFIER;
	private final TerminalRule tBINARY_OP;
	private final TerminalRule tREL_OP;
	private final TerminalRule tADD_OP;
	private final TerminalRule tMUL_OP;
	private final TerminalRule tUNARY_OP;
	private final TerminalRule tINT_LIT;
	private final TerminalRule tDECIMAL_LIT;
	private final TerminalRule tOCTAL_LIT;
	private final TerminalRule tHEX_LIT;
	private final TerminalRule tFLOAT_LIT;
	private final TerminalRule tDECIMALS;
	private final TerminalRule tEXPONENT;
	private final TerminalRule tIMAGINARY_LIT;
	private final TerminalRule tRUNE_LIT;
	private final TerminalRule tUNICODE_VALUE;
	private final TerminalRule tBYTE_VALUE;
	private final TerminalRule tOCTAL_BYTE_VALUE;
	private final TerminalRule tHEX_BYTE_VALUE;
	private final TerminalRule tLITTLE_U_VALUE;
	private final TerminalRule tBIG_U_VALUE;
	private final TerminalRule tESCAPED_CHAR;
	private final TerminalRule tSTRING_LIT;
	private final TerminalRule tRAW_STRING_LIT;
	private final TerminalRule tINTERPRETED_STRING_LIT;
	private final TerminalRule tLETTER;
	private final TerminalRule tDECIMAL_DIGIT;
	private final TerminalRule tOCTAL_DIGIT;
	private final TerminalRule tHEX_DIGIT;
	private final TerminalRule tNEWLINE;
	private final TerminalRule tUNICODE_CHAR;
	private final TerminalRule tUNICODE_LETTER;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GoGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pSourceFile = new SourceFileElements();
		this.pPackageClause = new PackageClauseElements();
		this.pImportDecl = new ImportDeclElements();
		this.pImportSpec = new ImportSpecElements();
		this.pImportPath = new ImportPathElements();
		this.pTopLevelDecl = new TopLevelDeclElements();
		this.pDeclaration = new DeclarationElements();
		this.pConstDecl = new ConstDeclElements();
		this.pConstSpec = new ConstSpecElements();
		this.pIdentifierList = new IdentifierListElements();
		this.pExpressionList = new ExpressionListElements();
		this.pTypeDecl = new TypeDeclElements();
		this.pTypeSpec = new TypeSpecElements();
		this.pFunctionDecl = new FunctionDeclElements();
		this.pFunction = new FunctionElements();
		this.pMethodDecl = new MethodDeclElements();
		this.pReceiver = new ReceiverElements();
		this.pVarDecl = new VarDeclElements();
		this.pVarSpec = new VarSpecElements();
		this.pBlock = new BlockElements();
		this.pStatementList = new StatementListElements();
		this.pStatement = new StatementElements();
		this.pSimpleStmt = new SimpleStmtElements();
		this.pExpressionStmt = new ExpressionStmtElements();
		this.pSendStmt = new SendStmtElements();
		this.pIncDecStmt = new IncDecStmtElements();
		this.pAssignment = new AssignmentElements();
		this.pAssign_op = new Assign_opElements();
		this.pShortVarDecl = new ShortVarDeclElements();
		this.pEmptyStmt = new EmptyStmtElements();
		this.pLabeledStmt = new LabeledStmtElements();
		this.pReturnStmt = new ReturnStmtElements();
		this.pBreakStmt = new BreakStmtElements();
		this.pContinueStmt = new ContinueStmtElements();
		this.pGotoStmt = new GotoStmtElements();
		this.pFallthroughStmt = new FallthroughStmtElements();
		this.pDeferStmt = new DeferStmtElements();
		this.pIfStmt = new IfStmtElements();
		this.pSwitchStmt = new SwitchStmtElements();
		this.pExprSwitchStmt = new ExprSwitchStmtElements();
		this.pExprCaseClause = new ExprCaseClauseElements();
		this.pExprSwitchCase = new ExprSwitchCaseElements();
		this.pTypeSwitchStmt = new TypeSwitchStmtElements();
		this.pTypeSwitchGuard = new TypeSwitchGuardElements();
		this.pTypeCaseClause = new TypeCaseClauseElements();
		this.pTypeSwitchCase = new TypeSwitchCaseElements();
		this.pTypeList = new TypeListElements();
		this.pSelectStmt = new SelectStmtElements();
		this.pCommClause = new CommClauseElements();
		this.pCommCase = new CommCaseElements();
		this.pRecvStmt = new RecvStmtElements();
		this.pForStmt = new ForStmtElements();
		this.pForClause = new ForClauseElements();
		this.pRangeClause = new RangeClauseElements();
		this.pGoStmt = new GoStmtElements();
		this.pType = new TypeElements();
		this.pTypeName = new TypeNameElements();
		this.pTypeLit = new TypeLitElements();
		this.pArrayType = new ArrayTypeElements();
		this.pArrayLength = new ArrayLengthElements();
		this.pElementType = new ElementTypeElements();
		this.pPointerType = new PointerTypeElements();
		this.pInterfaceType = new InterfaceTypeElements();
		this.pSliceType = new SliceTypeElements();
		this.pMapType = new MapTypeElements();
		this.pChannelType = new ChannelTypeElements();
		this.pMethodSpec = new MethodSpecElements();
		this.pFunctionType = new FunctionTypeElements();
		this.pSignature = new SignatureElements();
		this.pResult = new ResultElements();
		this.pParameters = new ParametersElements();
		this.pParameterList = new ParameterListElements();
		this.pParameterDecl = new ParameterDeclElements();
		this.pOperand = new OperandElements();
		this.pLiteral = new LiteralElements();
		this.pBasicLit = new BasicLitElements();
		this.pIntLit = new IntLitElements();
		this.pFloatLit = new FloatLitElements();
		this.pImaginaryLit = new ImaginaryLitElements();
		this.pRuneLit = new RuneLitElements();
		this.pStringLit = new StringLitElements();
		this.pBoolLit = new BoolLitElements();
		this.pOperandName = new OperandNameElements();
		this.pQualifiedIdent = new QualifiedIdentElements();
		this.pCompositeLit = new CompositeLitElements();
		this.pLiteralType = new LiteralTypeElements();
		this.pLiteralValue = new LiteralValueElements();
		this.pElementList = new ElementListElements();
		this.pKeyedElement = new KeyedElementElements();
		this.pKey = new KeyElements();
		this.pElement = new ElementElements();
		this.pStructType = new StructTypeElements();
		this.pFieldDecl = new FieldDeclElements();
		this.pAnonymousField = new AnonymousFieldElements();
		this.pFunctionLit = new FunctionLitElements();
		this.pPrimaryExpr = new PrimaryExprElements();
		this.pPrimaryExprStuff = new PrimaryExprStuffElements();
		this.pPrimaryExprSelector = new PrimaryExprSelectorElements();
		this.pPrimaryExprIndex = new PrimaryExprIndexElements();
		this.pPrimaryExprSlice = new PrimaryExprSliceElements();
		this.pPrimaryExprTypeAssertion = new PrimaryExprTypeAssertionElements();
		this.pPrimaryExprArguments = new PrimaryExprArgumentsElements();
		this.pSelector = new SelectorElements();
		this.pIndex = new IndexElements();
		this.pSlice = new SliceElements();
		this.pTypeAssertion = new TypeAssertionElements();
		this.pArguments = new ArgumentsElements();
		this.pMethodExpr = new MethodExprElements();
		this.pReceiverType = new ReceiverTypeElements();
		this.pExpression = new ExpressionElements();
		this.pExpressionMatched = new ExpressionMatchedElements();
		this.pUnaryExpr = new UnaryExprElements();
		this.pConversion = new ConversionElements();
		this.pEos = new EosElements();
		this.tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.BOOL");
		this.tIDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.IDENTIFIER");
		this.tBINARY_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.BINARY_OP");
		this.tREL_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.REL_OP");
		this.tADD_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.ADD_OP");
		this.tMUL_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.MUL_OP");
		this.tUNARY_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.UNARY_OP");
		this.tINT_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.INT_LIT");
		this.tDECIMAL_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.DECIMAL_LIT");
		this.tOCTAL_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.OCTAL_LIT");
		this.tHEX_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.HEX_LIT");
		this.tFLOAT_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.FLOAT_LIT");
		this.tDECIMALS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.DECIMALS");
		this.tEXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.EXPONENT");
		this.tIMAGINARY_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.IMAGINARY_LIT");
		this.tRUNE_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.RUNE_LIT");
		this.tUNICODE_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.UNICODE_VALUE");
		this.tBYTE_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.BYTE_VALUE");
		this.tOCTAL_BYTE_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.OCTAL_BYTE_VALUE");
		this.tHEX_BYTE_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.HEX_BYTE_VALUE");
		this.tLITTLE_U_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.LITTLE_U_VALUE");
		this.tBIG_U_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.BIG_U_VALUE");
		this.tESCAPED_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.ESCAPED_CHAR");
		this.tSTRING_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.STRING_LIT");
		this.tRAW_STRING_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.RAW_STRING_LIT");
		this.tINTERPRETED_STRING_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.INTERPRETED_STRING_LIT");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.LETTER");
		this.tDECIMAL_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.DECIMAL_DIGIT");
		this.tOCTAL_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.OCTAL_DIGIT");
		this.tHEX_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.HEX_DIGIT");
		this.tNEWLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.NEWLINE");
		this.tUNICODE_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.UNICODE_CHAR");
		this.tUNICODE_LETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.UNICODE_LETTER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.Go".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	greetings+=sourceFile;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	////SourceFile       = PackageClause ";" { ImportDecl ";" } { TopLevelDecl ";" } .
	//sourceFile:
	//	package=packageClause eos? (imports+=importDecl eos?)* (topLevelDecls+=topLevelDecl eos)*;
	public SourceFileElements getSourceFileAccess() {
		return pSourceFile;
	}
	
	public ParserRule getSourceFileRule() {
		return getSourceFileAccess().getRule();
	}
	
	////PackageClause  = "package" PackageName .
	////PackageName    = identifier .
	//packageClause:
	//	'package' packageName=IDENTIFIER;
	public PackageClauseElements getPackageClauseAccess() {
		return pPackageClause;
	}
	
	public ParserRule getPackageClauseRule() {
		return getPackageClauseAccess().getRule();
	}
	
	//importDecl:
	//	'import' (specs+=importSpec | '(' (specs+=importSpec eos?)* ')');
	public ImportDeclElements getImportDeclAccess() {
		return pImportDecl;
	}
	
	public ParserRule getImportDeclRule() {
		return getImportDeclAccess().getRule();
	}
	
	//importSpec:
	//	('.' | IDENTIFIER)? path=importPath;
	public ImportSpecElements getImportSpecAccess() {
		return pImportSpec;
	}
	
	public ParserRule getImportSpecRule() {
		return getImportSpecAccess().getRule();
	}
	
	//importPath:
	//	STRING_LIT;
	public ImportPathElements getImportPathAccess() {
		return pImportPath;
	}
	
	public ParserRule getImportPathRule() {
		return getImportPathAccess().getRule();
	}
	
	////TopLevelDecl  = Declaration | FunctionDecl | MethodDecl .
	//topLevelDecl:
	//	decl=declaration
	//	| decl=functionDecl
	//	| decl=methodDecl;
	public TopLevelDeclElements getTopLevelDeclAccess() {
		return pTopLevelDecl;
	}
	
	public ParserRule getTopLevelDeclRule() {
		return getTopLevelDeclAccess().getRule();
	}
	
	////Declaration   = ConstDecl | TypeDecl | VarDecl .
	//declaration:
	//	decl=constDecl
	//	| decl=typeDecl
	//	| decl=varDecl;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	////ConstDecl      = "const" ( ConstSpec | "(" { ConstSpec ";" } ")" ) .
	//constDecl:
	//	'const' (spec+=constSpec | '(' (spec+=constSpec eos?)* ')');
	public ConstDeclElements getConstDeclAccess() {
		return pConstDecl;
	}
	
	public ParserRule getConstDeclRule() {
		return getConstDeclAccess().getRule();
	}
	
	////ConstSpec      = IdentifierList [ [ Type ] "=" ExpressionList ] .
	//constSpec:
	//	identifiers=identifierList (type=type? '=' expression=expressionList)?;
	public ConstSpecElements getConstSpecAccess() {
		return pConstSpec;
	}
	
	public ParserRule getConstSpecRule() {
		return getConstSpecAccess().getRule();
	}
	
	////
	////IdentifierList = identifier { "," identifier } .
	//identifierList:
	//	ids+=IDENTIFIER (',' ids+=IDENTIFIER)*;
	public IdentifierListElements getIdentifierListAccess() {
		return pIdentifierList;
	}
	
	public ParserRule getIdentifierListRule() {
		return getIdentifierListAccess().getRule();
	}
	
	////ExpressionList = Expression { "," Expression } .
	//expressionList:
	//	expr+=expression (',' expr+=expression)*;
	public ExpressionListElements getExpressionListAccess() {
		return pExpressionList;
	}
	
	public ParserRule getExpressionListRule() {
		return getExpressionListAccess().getRule();
	}
	
	////TypeDecl     = "type" ( TypeSpec | "(" { TypeSpec ";" } ")" ) .
	//typeDecl:
	//	'type' (spec+=typeSpec | '(' (spec+=typeSpec eos)* ')');
	public TypeDeclElements getTypeDeclAccess() {
		return pTypeDecl;
	}
	
	public ParserRule getTypeDeclRule() {
		return getTypeDeclAccess().getRule();
	}
	
	////TypeSpec     = identifier Type .
	//typeSpec:
	//	name=IDENTIFIER type=type;
	public TypeSpecElements getTypeSpecAccess() {
		return pTypeSpec;
	}
	
	public ParserRule getTypeSpecRule() {
		return getTypeSpecAccess().getRule();
	}
	
	//// Function declarations
	////FunctionDecl = "func" FunctionName ( Function | Signature ) .
	////FunctionName = identifier .
	////Function     = Signature FunctionBody .
	////FunctionBody = Block .
	//functionDecl:
	//	'func' name=IDENTIFIER (func=function | sig=signature);
	public FunctionDeclElements getFunctionDeclAccess() {
		return pFunctionDecl;
	}
	
	public ParserRule getFunctionDeclRule() {
		return getFunctionDeclAccess().getRule();
	}
	
	//function:
	//	sig=signature codeBlock=block;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	////MethodDecl   = "func" Receiver MethodName ( Function | Signature ) .
	////Receiver     = Parameters .
	//methodDecl:
	//	'func' params=receiver name=IDENTIFIER (func=function | sig=signature);
	public MethodDeclElements getMethodDeclAccess() {
		return pMethodDecl;
	}
	
	public ParserRule getMethodDeclRule() {
		return getMethodDeclAccess().getRule();
	}
	
	//receiver:
	//	params=parameters;
	public ReceiverElements getReceiverAccess() {
		return pReceiver;
	}
	
	public ParserRule getReceiverRule() {
		return getReceiverAccess().getRule();
	}
	
	////VarDecl     = "var" ( VarSpec | "(" { VarSpec ";" } ")" ) .
	////VarSpec     = IdentifierList ( Type [ "=" ExpressionList ] | "=" ExpressionList ) .
	//varDecl:
	//	'var' (specs+=varSpec | '(' (specs+=varSpec eos)* ')');
	public VarDeclElements getVarDeclAccess() {
		return pVarDecl;
	}
	
	public ParserRule getVarDeclRule() {
		return getVarDeclAccess().getRule();
	}
	
	//varSpec:
	//	idList=identifierList (type=type ('=' exprList+=expressionList)? |
	//	'=' exprList+=expressionList);
	public VarSpecElements getVarSpecAccess() {
		return pVarSpec;
	}
	
	public ParserRule getVarSpecRule() {
		return getVarSpecAccess().getRule();
	}
	
	////Block = "{" StatementList "}" .
	//block:
	//	'{' statements=statementList '}';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	////StatementList = { Statement ";" } .
	//statementList:
	//	(statements+=statement eos)*;
	public StatementListElements getStatementListAccess() {
		return pStatementList;
	}
	
	public ParserRule getStatementListRule() {
		return getStatementListAccess().getRule();
	}
	
	//statement:
	//	declaration=declaration
	//	| labeledStmt=labeledStmt
	//	| simpleStmt=simpleStmt
	//	| goStmt=goStmt
	//	| returnStmt=returnStmt
	//	| breakStmt=breakStmt
	//	| continueStmt=continueStmt
	//	| gotoStmt=gotoStmt
	//	| fallthroughStmt=fallthroughStmt
	//	| block=block
	//	| ifStmt=ifStmt
	//	| switchStmt=switchStmt
	//	| selectStmt=selectStmt
	//	| forStmt=forStmt
	//	| deferStmt=deferStmt;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	////SimpleStmt = EmptyStmt | ExpressionStmt | SendStmt | IncDecStmt | Assignment | ShortVarDecl .
	//simpleStmt:
	//	sendStmt=sendStmt
	//	| expressionStmt=expressionStmt
	//	| incDecStmt=incDecStmt
	//	| assignment=assignment
	//	| shortVarDecl=shortVarDecl
	//	| emptyStmt=emptyStmt;
	public SimpleStmtElements getSimpleStmtAccess() {
		return pSimpleStmt;
	}
	
	public ParserRule getSimpleStmtRule() {
		return getSimpleStmtAccess().getRule();
	}
	
	////ExpressionStmt = Expression .
	//expressionStmt:
	//	expr=expression;
	public ExpressionStmtElements getExpressionStmtAccess() {
		return pExpressionStmt;
	}
	
	public ParserRule getExpressionStmtRule() {
		return getExpressionStmtAccess().getRule();
	}
	
	////SendStmt = Channel "<-" Expression .
	////Channel  = Expression .
	//sendStmt:
	//	expr1=expression '<-' expr2=expression;
	public SendStmtElements getSendStmtAccess() {
		return pSendStmt;
	}
	
	public ParserRule getSendStmtRule() {
		return getSendStmtAccess().getRule();
	}
	
	////IncDecStmt = Expression ( "++" | "--" ) .
	//incDecStmt:
	//	expr=expression ('++' | '--');
	public IncDecStmtElements getIncDecStmtAccess() {
		return pIncDecStmt;
	}
	
	public ParserRule getIncDecStmtRule() {
		return getIncDecStmtAccess().getRule();
	}
	
	////Assignment = ExpressionList assign_op ExpressionList .
	//assignment:
	//	exprList1=expressionList operation=assign_op
	//	exprList2=expressionList;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	////assign_op =  add_op | mul_op ] "=" .
	//assign_op:
	//	('+' | '-' | '|' | '^' | '*' | '/' | '%' | '<<' | '>>' | '&' | '&^')? '=';
	public Assign_opElements getAssign_opAccess() {
		return pAssign_op;
	}
	
	public ParserRule getAssign_opRule() {
		return getAssign_opAccess().getRule();
	}
	
	////ShortVarDecl = IdentifierList ":=" ExpressionList .
	//shortVarDecl:
	//	idList=identifierList ':=' exprList=expressionList;
	public ShortVarDeclElements getShortVarDeclAccess() {
		return pShortVarDecl;
	}
	
	public ParserRule getShortVarDeclRule() {
		return getShortVarDeclAccess().getRule();
	}
	
	//emptyStmt:
	//	content=WS;
	public EmptyStmtElements getEmptyStmtAccess() {
		return pEmptyStmt;
	}
	
	public ParserRule getEmptyStmtRule() {
		return getEmptyStmtAccess().getRule();
	}
	
	////LabeledStmt = Label ":" Statement .
	////Label       = identier .
	//labeledStmt:
	//	label=IDENTIFIER ':' stmt=statement;
	public LabeledStmtElements getLabeledStmtAccess() {
		return pLabeledStmt;
	}
	
	public ParserRule getLabeledStmtRule() {
		return getLabeledStmtAccess().getRule();
	}
	
	////ReturnStmt = "return" [ ExpressionList ] .
	//returnStmt:
	//	'return' exprList=expressionList?;
	public ReturnStmtElements getReturnStmtAccess() {
		return pReturnStmt;
	}
	
	public ParserRule getReturnStmtRule() {
		return getReturnStmtAccess().getRule();
	}
	
	////BreakStmt = "break" [ Label ] .
	//breakStmt:
	//	'break' label=IDENTIFIER?;
	public BreakStmtElements getBreakStmtAccess() {
		return pBreakStmt;
	}
	
	public ParserRule getBreakStmtRule() {
		return getBreakStmtAccess().getRule();
	}
	
	////ContinueStmt = "continue" [ Label ] .
	//continueStmt:
	//	'continue' label=IDENTIFIER?;
	public ContinueStmtElements getContinueStmtAccess() {
		return pContinueStmt;
	}
	
	public ParserRule getContinueStmtRule() {
		return getContinueStmtAccess().getRule();
	}
	
	////GotoStmt = "goto" Label .
	//gotoStmt:
	//	'goto' label=IDENTIFIER;
	public GotoStmtElements getGotoStmtAccess() {
		return pGotoStmt;
	}
	
	public ParserRule getGotoStmtRule() {
		return getGotoStmtAccess().getRule();
	}
	
	////FallthroughStmt = "fallthrough" .
	//fallthroughStmt:
	//	content='fallthrough';
	public FallthroughStmtElements getFallthroughStmtAccess() {
		return pFallthroughStmt;
	}
	
	public ParserRule getFallthroughStmtRule() {
		return getFallthroughStmtAccess().getRule();
	}
	
	////DeferStmt = "defer" Expression .
	//deferStmt:
	//	'defer' expr=expression;
	public DeferStmtElements getDeferStmtAccess() {
		return pDeferStmt;
	}
	
	public ParserRule getDeferStmtRule() {
		return getDeferStmtAccess().getRule();
	}
	
	////IfStmt = "" [ SimpleStmt ";" ] Expression Block [ "else" ( IfStmt | Block ) ] .
	//ifStmt:
	//	'if' (simplStatement=simpleStmt eos)? expr=expression
	//	codeBlock=block ('else' (ifStatement=ifStmt | codeBlockIf=block))?;
	public IfStmtElements getIfStmtAccess() {
		return pIfStmt;
	}
	
	public ParserRule getIfStmtRule() {
		return getIfStmtAccess().getRule();
	}
	
	////SwitchStmt = ExprSwitchStmt | TypeSwitchStmt .
	//switchStmt:
	//	statement=exprSwitchStmt | statement=typeSwitchStmt;
	public SwitchStmtElements getSwitchStmtAccess() {
		return pSwitchStmt;
	}
	
	public ParserRule getSwitchStmtRule() {
		return getSwitchStmtAccess().getRule();
	}
	
	////ExprSwitchStmt = "switch" [ SimpleStmt ";" ] [ Expression ] "{" { ExprCaseClause } "}" .
	////ExprCaseClause = ExprSwitchCase ":" StatementList .
	////ExprSwitchCase = "case" ExpressionList | "default" .
	//exprSwitchStmt:
	//	'switch' (simpleStmt=simpleStmt eos)? expr=expression?
	//	'{' exprCaseClauses+=exprCaseClause* '}';
	public ExprSwitchStmtElements getExprSwitchStmtAccess() {
		return pExprSwitchStmt;
	}
	
	public ParserRule getExprSwitchStmtRule() {
		return getExprSwitchStmtAccess().getRule();
	}
	
	//exprCaseClause:
	//	exprSwitchCase=exprSwitchCase ':' stmtList=statementList;
	public ExprCaseClauseElements getExprCaseClauseAccess() {
		return pExprCaseClause;
	}
	
	public ParserRule getExprCaseClauseRule() {
		return getExprCaseClauseAccess().getRule();
	}
	
	//exprSwitchCase:
	//	'case' exprList=expressionList | 'default';
	public ExprSwitchCaseElements getExprSwitchCaseAccess() {
		return pExprSwitchCase;
	}
	
	public ParserRule getExprSwitchCaseRule() {
		return getExprSwitchCaseAccess().getRule();
	}
	
	////TypeSwitchStmt  = "switch" [ SimpleStmt ";" ] TypeSwitchGuard "{" { TypeCaseClause } "}" .
	////TypeSwitchGuard = [ identifier ":=" ] PrimaryExpr "." "(" "type" ")" .
	////TypeCaseClause  = TypeSwitchCase ":" StatementList .
	////TypeSwitchCase  = "case" TypeList | "default" .
	////TypeList        = Type { "," Type } .
	//typeSwitchStmt:
	//	'switch' (simpleStatement=simpleStmt eos)?
	//	typeSwitchGuard=typeSwitchGuard '{' typeCaseClauses+=typeCaseClause* '}';
	public TypeSwitchStmtElements getTypeSwitchStmtAccess() {
		return pTypeSwitchStmt;
	}
	
	public ParserRule getTypeSwitchStmtRule() {
		return getTypeSwitchStmtAccess().getRule();
	}
	
	//typeSwitchGuard:
	//	(name=IDENTIFIER ':=')? primaryExpression=primaryExpr '.' '(' 'type' ')';
	public TypeSwitchGuardElements getTypeSwitchGuardAccess() {
		return pTypeSwitchGuard;
	}
	
	public ParserRule getTypeSwitchGuardRule() {
		return getTypeSwitchGuardAccess().getRule();
	}
	
	//typeCaseClause:
	//	typeSwitchCase=typeSwitchCase ':' statementList=statementList;
	public TypeCaseClauseElements getTypeCaseClauseAccess() {
		return pTypeCaseClause;
	}
	
	public ParserRule getTypeCaseClauseRule() {
		return getTypeCaseClauseAccess().getRule();
	}
	
	//typeSwitchCase:
	//	'case' typeList=typeList | 'default';
	public TypeSwitchCaseElements getTypeSwitchCaseAccess() {
		return pTypeSwitchCase;
	}
	
	public ParserRule getTypeSwitchCaseRule() {
		return getTypeSwitchCaseAccess().getRule();
	}
	
	//typeList:
	//	types+=type (',' types+=type)*;
	public TypeListElements getTypeListAccess() {
		return pTypeList;
	}
	
	public ParserRule getTypeListRule() {
		return getTypeListAccess().getRule();
	}
	
	////SelectStmt = "select" "{" { CommClause } "}" .
	////CommClause = CommCase ":" StatementList .
	////CommCase   = "case" ( SendStmt | RecvStmt ) | "default" .
	////RecvStmt   = [ ExpressionList "=" | IdentifierList ":=" ] RecvExpr .
	////RecvExpr   = Expression .
	//selectStmt:
	//	'select' '{' commClauses+=commClause* '}';
	public SelectStmtElements getSelectStmtAccess() {
		return pSelectStmt;
	}
	
	public ParserRule getSelectStmtRule() {
		return getSelectStmtAccess().getRule();
	}
	
	//commClause:
	//	case=commCase ':' stmtList=statementList;
	public CommClauseElements getCommClauseAccess() {
		return pCommClause;
	}
	
	public ParserRule getCommClauseRule() {
		return getCommClauseAccess().getRule();
	}
	
	//commCase:
	//	'case' (statement=sendStmt | statement=recvStmt) | 'default';
	public CommCaseElements getCommCaseAccess() {
		return pCommCase;
	}
	
	public ParserRule getCommCaseRule() {
		return getCommCaseAccess().getRule();
	}
	
	//recvStmt:
	//	(exprList=expressionList '=' | idList=identifierList ':=')? expr=expression;
	public RecvStmtElements getRecvStmtAccess() {
		return pRecvStmt;
	}
	
	public ParserRule getRecvStmtRule() {
		return getRecvStmtAccess().getRule();
	}
	
	////ForStmt = "for" [ Condition | ForClause | RangeClause ] Block .
	////Condition = Expression .
	//forStmt:
	//	'for' (expr=expression | clause=forClause | clause=rangeClause)? codeBlock=block;
	public ForStmtElements getForStmtAccess() {
		return pForStmt;
	}
	
	public ParserRule getForStmtRule() {
		return getForStmtAccess().getRule();
	}
	
	////ForClause = [ InitStmt ] ";" [ Condition ] ";" [ PostStmt ] .
	////InitStmt = SimpleStmt .
	////PostStmt = SimpleStmt .
	//forClause:
	//	statement1=simpleStmt? eos expr=expression? eos statement2=simpleStmt?;
	public ForClauseElements getForClauseAccess() {
		return pForClause;
	}
	
	public ParserRule getForClauseRule() {
		return getForClauseAccess().getRule();
	}
	
	////RangeClause = [ ExpressionList "=" | IdentifierList ":=" ] "range" Expression .
	//rangeClause:
	//	(exprList=expressionList '=' | idList=identifierList ':=')? 'range' expr=expression;
	public RangeClauseElements getRangeClauseAccess() {
		return pRangeClause;
	}
	
	public ParserRule getRangeClauseRule() {
		return getRangeClauseAccess().getRule();
	}
	
	////GoStmt = "go" Expression .
	//goStmt:
	//	'go' expr=expression;
	public GoStmtElements getGoStmtAccess() {
		return pGoStmt;
	}
	
	public ParserRule getGoStmtRule() {
		return getGoStmtAccess().getRule();
	}
	
	////Type      = TypeName | TypeLit | "(" Type ")" .
	//type:
	//	contentT=typeName
	//	| contentL=typeLit
	//	| '(' content=type ')';
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	////TypeName  = identifier | QualifiedIdent .
	//typeName:
	//	name=IDENTIFIER
	//	| qualIdent=qualifiedIdent;
	public TypeNameElements getTypeNameAccess() {
		return pTypeName;
	}
	
	public ParserRule getTypeNameRule() {
		return getTypeNameAccess().getRule();
	}
	
	////TypeLit   = ArrayType | StructType | PointerType | FunctionType | InterfaceType |
	////	    SliceType | MapType | ChannelType .
	//typeLit:
	//	lit=arrayType contentType="Array"
	//	| lit=structType contentType="StructType"
	//	| lit=pointerType contentType="Pointer"
	//	| lit=functionType contentType="Function"
	//	| lit=interfaceType contentType="Interface"
	//	| lit=sliceType contentType="Slice"
	//	| lit=mapType contentType="Map"
	//	| lit=channelType contentType="Channel";
	public TypeLitElements getTypeLitAccess() {
		return pTypeLit;
	}
	
	public ParserRule getTypeLitRule() {
		return getTypeLitAccess().getRule();
	}
	
	//arrayType:
	//	'[' arrayLength=arrayLength ']' elemType=elementType;
	public ArrayTypeElements getArrayTypeAccess() {
		return pArrayType;
	}
	
	public ParserRule getArrayTypeRule() {
		return getArrayTypeAccess().getRule();
	}
	
	//arrayLength:
	//	expr=expression;
	public ArrayLengthElements getArrayLengthAccess() {
		return pArrayLength;
	}
	
	public ParserRule getArrayLengthRule() {
		return getArrayLengthAccess().getRule();
	}
	
	//elementType:
	//	type=type;
	public ElementTypeElements getElementTypeAccess() {
		return pElementType;
	}
	
	public ParserRule getElementTypeRule() {
		return getElementTypeAccess().getRule();
	}
	
	////PointerType = "*" BaseType .
	////BaseType    = Type .
	//pointerType:
	//	'*' type=type;
	public PointerTypeElements getPointerTypeAccess() {
		return pPointerType;
	}
	
	public ParserRule getPointerTypeRule() {
		return getPointerTypeAccess().getRule();
	}
	
	////InterfaceType      = "interface" "{" { MethodSpec ";" } "}" .
	////MethodSpec         = MethodName Signature | InterfaceTypeName .
	////MethodName         = identifier .
	////InterfaceTypeName  = TypeName .
	//interfaceType:
	//	'interface' '{' (methodSpecs+=methodSpec eos)* '}';
	public InterfaceTypeElements getInterfaceTypeAccess() {
		return pInterfaceType;
	}
	
	public ParserRule getInterfaceTypeRule() {
		return getInterfaceTypeAccess().getRule();
	}
	
	////SliceType = "[" "]" ElementType .
	//sliceType:
	//	'[' ']' elemType=elementType;
	public SliceTypeElements getSliceTypeAccess() {
		return pSliceType;
	}
	
	public ParserRule getSliceTypeRule() {
		return getSliceTypeAccess().getRule();
	}
	
	////MapType     = "map" "[" KeyType "]" ElementType .
	////KeyType     = Type .
	//mapType:
	//	'map' '[' type=type ']' elemType=elementType;
	public MapTypeElements getMapTypeAccess() {
		return pMapType;
	}
	
	public ParserRule getMapTypeRule() {
		return getMapTypeAccess().getRule();
	}
	
	////ChannelType = ( "chan" | "chan" "<-" | "<-" "chan" ) ElementType .
	//channelType:
	//	('chan' | 'chan' '<-' | '<-' 'chan') elemType=elementType;
	public ChannelTypeElements getChannelTypeAccess() {
		return pChannelType;
	}
	
	public ParserRule getChannelTypeRule() {
		return getChannelTypeAccess().getRule();
	}
	
	//methodSpec:
	//	name=IDENTIFIER sig=signature | typeName=typeName;
	public MethodSpecElements getMethodSpecAccess() {
		return pMethodSpec;
	}
	
	public ParserRule getMethodSpecRule() {
		return getMethodSpecAccess().getRule();
	}
	
	////FunctionType   = "func" Signature .
	////Signature      = Parameters [ Result ] .
	////Result         = Parameters | Type .
	////Parameters     = "(" [ ParameterList [ "," ] ] ")" .
	////ParameterList  = ParameterDecl { "," ParameterDecl } .
	////ParameterDecl  = [ IdentifierList ] [ "..." ] Type .
	//functionType:
	//	'func' sig=signature;
	public FunctionTypeElements getFunctionTypeAccess() {
		return pFunctionType;
	}
	
	public ParserRule getFunctionTypeRule() {
		return getFunctionTypeAccess().getRule();
	}
	
	//signature:
	//	params=parameters result=result?;
	public SignatureElements getSignatureAccess() {
		return pSignature;
	}
	
	public ParserRule getSignatureRule() {
		return getSignatureAccess().getRule();
	}
	
	//result:
	//	params=parameters | type=type;
	public ResultElements getResultAccess() {
		return pResult;
	}
	
	public ParserRule getResultRule() {
		return getResultAccess().getRule();
	}
	
	//parameters:
	//	'(' (paramList+=parameterList ','?)? ')';
	public ParametersElements getParametersAccess() {
		return pParameters;
	}
	
	public ParserRule getParametersRule() {
		return getParametersAccess().getRule();
	}
	
	//parameterList:
	//	paramsDecl+=parameterDecl (',' paramsDecl+=parameterDecl)*;
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//parameterDecl:
	//	identifierList=identifierList? '...'? type=type;
	public ParameterDeclElements getParameterDeclAccess() {
		return pParameterDecl;
	}
	
	public ParserRule getParameterDeclRule() {
		return getParameterDeclAccess().getRule();
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//// Operands
	////Operand     = Literal | OperandName | MethodExpr | "(" Expression ")" .
	////Literal     = BasicLit | CompositeLit | FunctionLit .
	////BasicLit    = int_lit | float_lit | imaginary_lit | rune_lit | string_lit .
	////OperandName = identifier | QualifiedIdent.
	//operand:
	//	literal=literal | operandName=operandName | methodExpr=methodExpr |
	//	'(' expr=expression ')';
	public OperandElements getOperandAccess() {
		return pOperand;
	}
	
	public ParserRule getOperandRule() {
		return getOperandAccess().getRule();
	}
	
	//literal:
	//	litBasic=basicLit | litComposite=compositeLit | litFunc=functionLit;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//basicLit:
	//	intLit=intLit | floatLit=floatLit | imaginaryLit=imaginaryLit | runeLit=runeLit | stringLit=stringLit |
	//	boolLit=boolLit;
	public BasicLitElements getBasicLitAccess() {
		return pBasicLit;
	}
	
	public ParserRule getBasicLitRule() {
		return getBasicLitAccess().getRule();
	}
	
	//intLit:
	//	INT_LIT;
	public IntLitElements getIntLitAccess() {
		return pIntLit;
	}
	
	public ParserRule getIntLitRule() {
		return getIntLitAccess().getRule();
	}
	
	//floatLit:
	//	FLOAT_LIT;
	public FloatLitElements getFloatLitAccess() {
		return pFloatLit;
	}
	
	public ParserRule getFloatLitRule() {
		return getFloatLitAccess().getRule();
	}
	
	//imaginaryLit:
	//	IMAGINARY_LIT;
	public ImaginaryLitElements getImaginaryLitAccess() {
		return pImaginaryLit;
	}
	
	public ParserRule getImaginaryLitRule() {
		return getImaginaryLitAccess().getRule();
	}
	
	//runeLit:
	//	RUNE_LIT;
	public RuneLitElements getRuneLitAccess() {
		return pRuneLit;
	}
	
	public ParserRule getRuneLitRule() {
		return getRuneLitAccess().getRule();
	}
	
	//stringLit:
	//	STRING_LIT;
	public StringLitElements getStringLitAccess() {
		return pStringLit;
	}
	
	public ParserRule getStringLitRule() {
		return getStringLitAccess().getRule();
	}
	
	//boolLit:
	//	BOOL;
	public BoolLitElements getBoolLitAccess() {
		return pBoolLit;
	}
	
	public ParserRule getBoolLitRule() {
		return getBoolLitAccess().getRule();
	}
	
	//operandName:
	//	name=IDENTIFIER | qualIdent=qualifiedIdent;
	public OperandNameElements getOperandNameAccess() {
		return pOperandName;
	}
	
	public ParserRule getOperandNameRule() {
		return getOperandNameAccess().getRule();
	}
	
	////QualifiedIdent = PackageName "." identifier .
	//qualifiedIdent:
	//	packageName=IDENTIFIER '.' name=IDENTIFIER;
	public QualifiedIdentElements getQualifiedIdentAccess() {
		return pQualifiedIdent;
	}
	
	public ParserRule getQualifiedIdentRule() {
		return getQualifiedIdentAccess().getRule();
	}
	
	////CompositeLit  = LiteralType LiteralValue .
	////LiteralType   = StructType | ArrayType | "[" "..." "]" ElementType |
	////                SliceType | MapType | TypeName .
	////LiteralValue  = "{" [ ElementList [ "," ] ] "}" .
	////ElementList   = KeyedElement { "," KeyedElement } .
	////KeyedElement  = [ Key ":" ] Element .
	////Key           = FieldName | Expression | LiteralValue .
	////FieldName     = identifier .
	////Element       = Expression | LiteralValue .
	//compositeLit:
	//	literalType=literalType literalValue=literalValue;
	public CompositeLitElements getCompositeLitAccess() {
		return pCompositeLit;
	}
	
	public ParserRule getCompositeLitRule() {
		return getCompositeLitAccess().getRule();
	}
	
	//literalType:
	//	type=structType
	//	| type=arrayType
	//	| '[' '...' ']' type=elementType
	//	| type=sliceType
	//	| type=mapType
	//	| type=typeName;
	public LiteralTypeElements getLiteralTypeAccess() {
		return pLiteralType;
	}
	
	public ParserRule getLiteralTypeRule() {
		return getLiteralTypeAccess().getRule();
	}
	
	//literalValue:
	//	'{' (elementList=elementList ','?)? '}';
	public LiteralValueElements getLiteralValueAccess() {
		return pLiteralValue;
	}
	
	public ParserRule getLiteralValueRule() {
		return getLiteralValueAccess().getRule();
	}
	
	//elementList:
	//	keyedElements+=keyedElement (',' keyedElements+=keyedElement)*;
	public ElementListElements getElementListAccess() {
		return pElementList;
	}
	
	public ParserRule getElementListRule() {
		return getElementListAccess().getRule();
	}
	
	//keyedElement:
	//	(key=key ':')? element=element;
	public KeyedElementElements getKeyedElementAccess() {
		return pKeyedElement;
	}
	
	public ParserRule getKeyedElementRule() {
		return getKeyedElementAccess().getRule();
	}
	
	//key:
	//	name=IDENTIFIER | expr=expression | lit=literalValue;
	public KeyElements getKeyAccess() {
		return pKey;
	}
	
	public ParserRule getKeyRule() {
		return getKeyAccess().getRule();
	}
	
	//element:
	//	content=expression | content=literalValue;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	////StructType     = "struct" "{" { FieldDecl ";" } "}" .
	////FieldDecl      = (IdentifierList Type | AnonymousField) [ Tag ] .
	////AnonymousField = [ "*" ] TypeName .
	////Tag            = string_lit .
	//structType:
	//	'struct' '{' (fieldsDecl+=fieldDecl eos)* '}';
	public StructTypeElements getStructTypeAccess() {
		return pStructType;
	}
	
	public ParserRule getStructTypeRule() {
		return getStructTypeAccess().getRule();
	}
	
	//fieldDecl:
	//	(identifierList=identifierList type=type | anonymousField=anonymousField) STRING_LIT?;
	public FieldDeclElements getFieldDeclAccess() {
		return pFieldDecl;
	}
	
	public ParserRule getFieldDeclRule() {
		return getFieldDeclAccess().getRule();
	}
	
	//anonymousField:
	//	'*'? typeName=typeName;
	public AnonymousFieldElements getAnonymousFieldAccess() {
		return pAnonymousField;
	}
	
	public ParserRule getAnonymousFieldRule() {
		return getAnonymousFieldAccess().getRule();
	}
	
	////FunctionLit = "func" Function .
	//functionLit:
	//	'func' function=function;
	public FunctionLitElements getFunctionLitAccess() {
		return pFunctionLit;
	}
	
	public ParserRule getFunctionLitRule() {
		return getFunctionLitAccess().getRule();
	}
	
	////PrimaryExpr =
	////	Operand |
	////	Conversion |
	////	PrimaryExpr Selector |
	////	PrimaryExpr Index |
	////	PrimaryExpr Slice |
	////	PrimaryExpr TypeAssertion |
	////	PrimaryExpr Arguments .
	////
	////Selector       = "." identifier .
	////Index          = "[" Expression "]" .
	////Slice          = "[" ( [ Expression ] ":" [ Expression ] ) |
	////                     ( [ Expression ] ":" Expression ":" Expression )
	////                 "]" .
	////TypeAssertion  = "." "(" Type ")" .
	////Arguments      = "(" [ ( ExpressionList | Type [ "," ExpressionList ] ) [ "..." ] [ "," ] ] ")" .
	//primaryExpr:
	//	(operand=operand | conversion=conversion) | primaryExprSelector=primaryExprSelector |
	//	primaryExprIndex=primaryExprIndex | primaryExprSlice=primaryExprSlice |
	//	primaryExprTypeAssertion=primaryExprTypeAssertion | primaryExprArguments=primaryExprArguments;
	public PrimaryExprElements getPrimaryExprAccess() {
		return pPrimaryExpr;
	}
	
	public ParserRule getPrimaryExprRule() {
		return getPrimaryExprAccess().getRule();
	}
	
	//primaryExprStuff:
	//	selector=selector | index=index | slice=slice | typeAssertion=typeAssertion | arguments=arguments;
	public PrimaryExprStuffElements getPrimaryExprStuffAccess() {
		return pPrimaryExprStuff;
	}
	
	public ParserRule getPrimaryExprStuffRule() {
		return getPrimaryExprStuffAccess().getRule();
	}
	
	//////Left Rec removal for primaryExpr
	//primaryExprSelector:
	//	(content=primaryExprStuff primaryExprSelector=primaryExprSelector)?;
	public PrimaryExprSelectorElements getPrimaryExprSelectorAccess() {
		return pPrimaryExprSelector;
	}
	
	public ParserRule getPrimaryExprSelectorRule() {
		return getPrimaryExprSelectorAccess().getRule();
	}
	
	//primaryExprIndex:
	//	(content=primaryExprStuff primaryExprIndex=primaryExprIndex)?;
	public PrimaryExprIndexElements getPrimaryExprIndexAccess() {
		return pPrimaryExprIndex;
	}
	
	public ParserRule getPrimaryExprIndexRule() {
		return getPrimaryExprIndexAccess().getRule();
	}
	
	//primaryExprSlice:
	//	(content=primaryExprStuff primaryExprSlice=primaryExprSlice)?;
	public PrimaryExprSliceElements getPrimaryExprSliceAccess() {
		return pPrimaryExprSlice;
	}
	
	public ParserRule getPrimaryExprSliceRule() {
		return getPrimaryExprSliceAccess().getRule();
	}
	
	//primaryExprTypeAssertion:
	//	(content=primaryExprStuff primaryExprTypeAssertion=primaryExprTypeAssertion)?;
	public PrimaryExprTypeAssertionElements getPrimaryExprTypeAssertionAccess() {
		return pPrimaryExprTypeAssertion;
	}
	
	public ParserRule getPrimaryExprTypeAssertionRule() {
		return getPrimaryExprTypeAssertionAccess().getRule();
	}
	
	//primaryExprArguments:
	//	(content=primaryExprStuff primaryExprArguments=primaryExprArguments)?;
	public PrimaryExprArgumentsElements getPrimaryExprArgumentsAccess() {
		return pPrimaryExprArguments;
	}
	
	public ParserRule getPrimaryExprArgumentsRule() {
		return getPrimaryExprArgumentsAccess().getRule();
	}
	
	//////
	//selector:
	//	'.' name=IDENTIFIER;
	public SelectorElements getSelectorAccess() {
		return pSelector;
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}
	
	//index:
	//	'[' expr=expression ']';
	public IndexElements getIndexAccess() {
		return pIndex;
	}
	
	public ParserRule getIndexRule() {
		return getIndexAccess().getRule();
	}
	
	//slice:
	//	'[' (expr1=expression? ':' expr2=expression? | expr1=expression? ':' expr2=expression ':' expr3=expression) ']';
	public SliceElements getSliceAccess() {
		return pSlice;
	}
	
	public ParserRule getSliceRule() {
		return getSliceAccess().getRule();
	}
	
	//typeAssertion:
	//	'.' '(' type=type ')';
	public TypeAssertionElements getTypeAssertionAccess() {
		return pTypeAssertion;
	}
	
	public ParserRule getTypeAssertionRule() {
		return getTypeAssertionAccess().getRule();
	}
	
	//arguments:
	//	'(' ((expressionList=expressionList | type=type (',' expressionList=expressionList)?) '...'? ','?)? ')';
	public ArgumentsElements getArgumentsAccess() {
		return pArguments;
	}
	
	public ParserRule getArgumentsRule() {
		return getArgumentsAccess().getRule();
	}
	
	////MethodExpr    = ReceiverType "." MethodName .
	////ReceiverType  = TypeName | "(" "*" TypeName ")" | "(" ReceiverType ")" .
	//methodExpr:
	//	receiverType=receiverType '.' IDENTIFIER;
	public MethodExprElements getMethodExprAccess() {
		return pMethodExpr;
	}
	
	public ParserRule getMethodExprRule() {
		return getMethodExprAccess().getRule();
	}
	
	//receiverType:
	//	typeName=typeName
	//	| '(' '*' typeName=typeName ')'
	//	| '(' receiverType=receiverType ')';
	public ReceiverTypeElements getReceiverTypeAccess() {
		return pReceiverType;
	}
	
	public ParserRule getReceiverTypeRule() {
		return getReceiverTypeAccess().getRule();
	}
	
	////Expression = UnaryExpr | Expression binary_op Expression .
	////UnaryExpr  = PrimaryExpr | unary_op UnaryExpr .
	//expression:
	//	unaryExpr=unaryExpr
	//	//  | expression BINARY_OP expression
	//	expressionMatched=expressionMatched;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	////// attempt to remove left recursion of rule expression
	//expressionMatched:
	//	(operator=BINARY_OP expression=expression)?;
	public ExpressionMatchedElements getExpressionMatchedAccess() {
		return pExpressionMatched;
	}
	
	public ParserRule getExpressionMatchedRule() {
		return getExpressionMatchedAccess().getRule();
	}
	
	//////
	//unaryExpr:
	//	primaryExpr=primaryExpr | ('+' | '-' | '!' | '^' | '*' | '&' | '<-') unaryExpr=unaryExpr;
	public UnaryExprElements getUnaryExprAccess() {
		return pUnaryExpr;
	}
	
	public ParserRule getUnaryExprRule() {
		return getUnaryExprAccess().getRule();
	}
	
	////Conversion = Type "(" Expression [ "," ] ")" .
	//conversion:
	//	type=type '(' expression=expression ','? ')';
	public ConversionElements getConversionAccess() {
		return pConversion;
	}
	
	public ParserRule getConversionRule() {
		return getConversionAccess().getRule();
	}
	
	//eos:
	//	';';
	public EosElements getEosAccess() {
		return pEos;
	}
	
	public ParserRule getEosRule() {
		return getEosAccess().getRule();
	}
	
	//terminal BOOL:
	//	'true' | 'false';
	public TerminalRule getBOOLRule() {
		return tBOOL;
	}
	
	//terminal IDENTIFIER:
	//	LETTER (LETTER | DECIMAL_DIGIT)*;
	public TerminalRule getIDENTIFIERRule() {
		return tIDENTIFIER;
	}
	
	//terminal BINARY_OP:
	//	'||' | '&&' | REL_OP | ADD_OP | MUL_OP;
	public TerminalRule getBINARY_OPRule() {
		return tBINARY_OP;
	}
	
	//terminal fragment REL_OP:
	//	'==' | '!=' | '<' | '<=' | '>' | '>=';
	public TerminalRule getREL_OPRule() {
		return tREL_OP;
	}
	
	//terminal fragment ADD_OP:
	//	'+' | '-' | '|' | '^';
	public TerminalRule getADD_OPRule() {
		return tADD_OP;
	}
	
	//terminal fragment MUL_OP:
	//	'*' | '/' | '%' | '<<' | '>>' | '&' | '&^';
	public TerminalRule getMUL_OPRule() {
		return tMUL_OP;
	}
	
	//terminal fragment UNARY_OP:
	//	'+' | '-' | '!' | '^' | '*' | '&' | '<-';
	public TerminalRule getUNARY_OPRule() {
		return tUNARY_OP;
	}
	
	//terminal INT_LIT:
	//	DECIMAL_LIT | OCTAL_LIT | HEX_LIT;
	public TerminalRule getINT_LITRule() {
		return tINT_LIT;
	}
	
	//terminal fragment DECIMAL_LIT:
	//	'1'..'9' DECIMAL_DIGIT*;
	public TerminalRule getDECIMAL_LITRule() {
		return tDECIMAL_LIT;
	}
	
	//terminal fragment OCTAL_LIT:
	//	'0' OCTAL_DIGIT*;
	public TerminalRule getOCTAL_LITRule() {
		return tOCTAL_LIT;
	}
	
	//terminal fragment HEX_LIT:
	//	'0' ('X' | 'x') HEX_DIGIT+;
	public TerminalRule getHEX_LITRule() {
		return tHEX_LIT;
	}
	
	//terminal FLOAT_LIT:
	//	DECIMALS '.' DECIMALS? EXPONENT?
	//	| DECIMALS EXPONENT
	//	| '.' DECIMALS EXPONENT?;
	public TerminalRule getFLOAT_LITRule() {
		return tFLOAT_LIT;
	}
	
	//terminal fragment DECIMALS:
	//	DECIMAL_DIGIT+;
	public TerminalRule getDECIMALSRule() {
		return tDECIMALS;
	}
	
	//terminal fragment EXPONENT:
	//	('e' | 'E') ('+' | '-')? DECIMALS;
	public TerminalRule getEXPONENTRule() {
		return tEXPONENT;
	}
	
	//terminal IMAGINARY_LIT:
	//	(DECIMALS | FLOAT_LIT) 'i';
	public TerminalRule getIMAGINARY_LITRule() {
		return tIMAGINARY_LIT;
	}
	
	//terminal RUNE_LIT:
	//	"\'" (UNICODE_VALUE | BYTE_VALUE) "\'";
	public TerminalRule getRUNE_LITRule() {
		return tRUNE_LIT;
	}
	
	//terminal fragment UNICODE_VALUE:
	//	UNICODE_CHAR | LITTLE_U_VALUE | BIG_U_VALUE | ESCAPED_CHAR;
	public TerminalRule getUNICODE_VALUERule() {
		return tUNICODE_VALUE;
	}
	
	//terminal fragment BYTE_VALUE:
	//	OCTAL_BYTE_VALUE | HEX_BYTE_VALUE;
	public TerminalRule getBYTE_VALUERule() {
		return tBYTE_VALUE;
	}
	
	//terminal fragment OCTAL_BYTE_VALUE:
	//	'\\' OCTAL_DIGIT OCTAL_DIGIT OCTAL_DIGIT;
	public TerminalRule getOCTAL_BYTE_VALUERule() {
		return tOCTAL_BYTE_VALUE;
	}
	
	//terminal fragment HEX_BYTE_VALUE:
	//	'\\x' HEX_DIGIT HEX_DIGIT;
	public TerminalRule getHEX_BYTE_VALUERule() {
		return tHEX_BYTE_VALUE;
	}
	
	//terminal LITTLE_U_VALUE:
	public TerminalRule getLITTLE_U_VALUERule() {
		return tLITTLE_U_VALUE;
	}
	
	//terminal BIG_U_VALUE:
	//	'\\U' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
	public TerminalRule getBIG_U_VALUERule() {
		return tBIG_U_VALUE;
	}
	
	//terminal fragment ESCAPED_CHAR:
	//	'\\' ('a' | 'b' | 'f' | 'n' | 'r' | 't' | 'v' | '\\' | "\'" | '"');
	public TerminalRule getESCAPED_CHARRule() {
		return tESCAPED_CHAR;
	}
	
	//terminal STRING_LIT:
	//	RAW_STRING_LIT | INTERPRETED_STRING_LIT;
	public TerminalRule getSTRING_LITRule() {
		return tSTRING_LIT;
	}
	
	//terminal fragment RAW_STRING_LIT:
	//	"'" (UNICODE_CHAR | NEWLINE)* "'";
	public TerminalRule getRAW_STRING_LITRule() {
		return tRAW_STRING_LIT;
	}
	
	//terminal fragment INTERPRETED_STRING_LIT:
	//	'"' (UNICODE_VALUE | BYTE_VALUE)* '"';
	public TerminalRule getINTERPRETED_STRING_LITRule() {
		return tINTERPRETED_STRING_LIT;
	}
	
	//terminal fragment LETTER:
	//	UNICODE_LETTER | '_';
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//terminal fragment DECIMAL_DIGIT:
	//	'0'..'9';
	public TerminalRule getDECIMAL_DIGITRule() {
		return tDECIMAL_DIGIT;
	}
	
	//terminal fragment OCTAL_DIGIT:
	//	'0'..'7';
	public TerminalRule getOCTAL_DIGITRule() {
		return tOCTAL_DIGIT;
	}
	
	//terminal fragment HEX_DIGIT:
	//	'0'..'9' | 'A'..'F' | 'a'..'f';
	public TerminalRule getHEX_DIGITRule() {
		return tHEX_DIGIT;
	}
	
	//terminal fragment NEWLINE:
	//	'\\u000A';
	public TerminalRule getNEWLINERule() {
		return tNEWLINE;
	}
	
	//terminal fragment UNICODE_CHAR:
	//	'A'..'Z' | 'a'..'z';
	public TerminalRule getUNICODE_CHARRule() {
		return tUNICODE_CHAR;
	}
	
	//terminal fragment UNICODE_LETTER:
	//	'A'..'Z' | 'a'..'z';
	public TerminalRule getUNICODE_LETTERRule() {
		return tUNICODE_LETTER;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
