/*
 * generated by Xtext 2.14.0
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GoGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.Model");
		private final Assignment cGreetingsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGreetingsSourceFileParserRuleCall_0 = (RuleCall)cGreetingsAssignment.eContents().get(0);
		
		//Model:
		//	greetings+=sourceFile;
		@Override public ParserRule getRule() { return rule; }
		
		//greetings+=sourceFile
		public Assignment getGreetingsAssignment() { return cGreetingsAssignment; }
		
		//sourceFile
		public RuleCall getGreetingsSourceFileParserRuleCall_0() { return cGreetingsSourceFileParserRuleCall_0; }
	}
	public class SourceFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.sourceFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPackageClauseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPackageClausePackageClauseParserRuleCall_0_0 = (RuleCall)cPackageClauseAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cImportDeclParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cTopLevelDeclParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		////SourceFile       = PackageClause ";" { ImportDecl ";" } { TopLevelDecl ";" } .
		//sourceFile:
		//	packageClause=packageClause (importDecl ';')* (topLevelDecl ';')*;
		@Override public ParserRule getRule() { return rule; }
		
		//packageClause=packageClause (importDecl ';')* (topLevelDecl ';')*
		public Group getGroup() { return cGroup; }
		
		//packageClause=packageClause
		public Assignment getPackageClauseAssignment_0() { return cPackageClauseAssignment_0; }
		
		//packageClause
		public RuleCall getPackageClausePackageClauseParserRuleCall_0_0() { return cPackageClausePackageClauseParserRuleCall_0_0; }
		
		//(importDecl ';')*
		public Group getGroup_1() { return cGroup_1; }
		
		//importDecl
		public RuleCall getImportDeclParserRuleCall_1_0() { return cImportDeclParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//(topLevelDecl ';')*
		public Group getGroup_2() { return cGroup_2; }
		
		//topLevelDecl
		public RuleCall getTopLevelDeclParserRuleCall_2_0() { return cTopLevelDeclParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
	}
	public class PackageClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.packageClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////PackageClause  = "package" PackageName .
		////PackageName    = identifier .
		//packageClause:
		//	'package' IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//'package' IDENTIFIER
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1() { return cIDENTIFIERTerminalRuleCall_1; }
	}
	public class ImportDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.importDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cImportSpecParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cImportSpecParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//importDecl:
		//	'import' (importSpec | '(' importSpec //';'
		//* ')');
		@Override public ParserRule getRule() { return rule; }
		
		//'import' (importSpec | '(' importSpec //';'
		//* ')')
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importSpec | '(' importSpec //';'
		//* ')'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//importSpec
		public RuleCall getImportSpecParserRuleCall_1_0() { return cImportSpecParserRuleCall_1_0; }
		
		//'(' importSpec //';'
		//* ')'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//importSpec //';'
		//*
		public RuleCall getImportSpecParserRuleCall_1_1_1() { return cImportSpecParserRuleCall_1_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}
	public class ImportSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.importSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cImportPathParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//importSpec:
		//	('.' | IDENTIFIER)? importPath;
		@Override public ParserRule getRule() { return rule; }
		
		//('.' | IDENTIFIER)? importPath
		public Group getGroup() { return cGroup; }
		
		//('.' | IDENTIFIER)?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_0() { return cFullStopKeyword_0_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0_1() { return cIDENTIFIERTerminalRuleCall_0_1; }
		
		//importPath
		public RuleCall getImportPathParserRuleCall_1() { return cImportPathParserRuleCall_1; }
	}
	public class ImportPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.importPath");
		private final RuleCall cSTRING_LITTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//importPath:
		//	STRING_LIT;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING_LIT
		public RuleCall getSTRING_LITTerminalRuleCall() { return cSTRING_LITTerminalRuleCall; }
	}
	public class TopLevelDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.topLevelDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMethodDeclParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////TopLevelDecl  = Declaration | FunctionDecl | MethodDecl .
		//topLevelDecl:
		//	declaration
		//	| functionDecl
		//	| methodDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//declaration | functionDecl | methodDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//declaration
		public RuleCall getDeclarationParserRuleCall_0() { return cDeclarationParserRuleCall_0; }
		
		//functionDecl
		public RuleCall getFunctionDeclParserRuleCall_1() { return cFunctionDeclParserRuleCall_1; }
		
		//methodDecl
		public RuleCall getMethodDeclParserRuleCall_2() { return cMethodDeclParserRuleCall_2; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVarDeclParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////Declaration   = ConstDecl | TypeDecl | VarDecl .
		//declaration:
		//	constDecl
		//	| typeDecl
		//	| varDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//constDecl | typeDecl | varDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//constDecl
		public RuleCall getConstDeclParserRuleCall_0() { return cConstDeclParserRuleCall_0; }
		
		//typeDecl
		public RuleCall getTypeDeclParserRuleCall_1() { return cTypeDeclParserRuleCall_1; }
		
		//varDecl
		public RuleCall getVarDeclParserRuleCall_2() { return cVarDeclParserRuleCall_2; }
	}
	public class ConstDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.constDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cConstSpecParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final RuleCall cConstSpecParserRuleCall_1_1_1_0 = (RuleCall)cGroup_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1_1 = (Keyword)cGroup_1_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		////ConstDecl      = "const" ( ConstSpec | "(" { ConstSpec ";" } ")" ) .
		//constDecl:
		//	'const' (constSpec | '(' (constSpec ';')* ')');
		@Override public ParserRule getRule() { return rule; }
		
		//'const' (constSpec | '(' (constSpec ';')* ')')
		public Group getGroup() { return cGroup; }
		
		//'const'
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }
		
		//constSpec | '(' (constSpec ';')* ')'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//constSpec
		public RuleCall getConstSpecParserRuleCall_1_0() { return cConstSpecParserRuleCall_1_0; }
		
		//'(' (constSpec ';')* ')'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//(constSpec ';')*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//constSpec
		public RuleCall getConstSpecParserRuleCall_1_1_1_0() { return cConstSpecParserRuleCall_1_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1_1_1() { return cSemicolonKeyword_1_1_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}
	public class ConstSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.constSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierListParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionListParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		////ConstSpec      = IdentifierList [ [ Type ] "=" ExpressionList ] .
		//constSpec:
		//	identifierList (type? '=' expressionList)?;
		@Override public ParserRule getRule() { return rule; }
		
		//identifierList (type? '=' expressionList)?
		public Group getGroup() { return cGroup; }
		
		//identifierList
		public RuleCall getIdentifierListParserRuleCall_0() { return cIdentifierListParserRuleCall_0; }
		
		//(type? '=' expressionList)?
		public Group getGroup_1() { return cGroup_1; }
		
		//type?
		public RuleCall getTypeParserRuleCall_1_0() { return cTypeParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//expressionList
		public RuleCall getExpressionListParserRuleCall_1_2() { return cExpressionListParserRuleCall_1_2; }
	}
	public class IdentifierListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.identifierList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		////
		////IdentifierList = identifier { "," identifier } .
		//identifierList:
		//	IDENTIFIER (',' IDENTIFIER)*;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER (',' IDENTIFIER)*
		public Group getGroup() { return cGroup; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }
		
		//(',' IDENTIFIER)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1_1() { return cIDENTIFIERTerminalRuleCall_1_1; }
	}
	public class ExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.expressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		////ExpressionList = Expression { "," Expression } .
		//expressionList:
		//	expression (',' expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//expression (',' expression)*
		public Group getGroup() { return cGroup; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//(',' expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }
	}
	public class TypeDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.typeDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cTypeSpecParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final RuleCall cTypeSpecParserRuleCall_1_1_1_0 = (RuleCall)cGroup_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1_1 = (Keyword)cGroup_1_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		////TypeDecl     = "type" ( TypeSpec | "(" { TypeSpec ";" } ")" ) .
		//typeDecl:
		//	'type' (typeSpec | '(' (typeSpec ';')* ')');
		@Override public ParserRule getRule() { return rule; }
		
		//'type' (typeSpec | '(' (typeSpec ';')* ')')
		public Group getGroup() { return cGroup; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//typeSpec | '(' (typeSpec ';')* ')'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//typeSpec
		public RuleCall getTypeSpecParserRuleCall_1_0() { return cTypeSpecParserRuleCall_1_0; }
		
		//'(' (typeSpec ';')* ')'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//(typeSpec ';')*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//typeSpec
		public RuleCall getTypeSpecParserRuleCall_1_1_1_0() { return cTypeSpecParserRuleCall_1_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1_1_1() { return cSemicolonKeyword_1_1_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}
	public class TypeSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.typeSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////TypeSpec     = identifier Type .
		//typeSpec:
		//	IDENTIFIER type;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER type
		public Group getGroup() { return cGroup; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }
		
		//type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }
	}
	public class FunctionDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.functionDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cFunctionParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cSignatureParserRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//// Function declarations
		////FunctionDecl = "func" FunctionName ( Function | Signature ) .
		////FunctionName = identifier .
		////Function     = Signature FunctionBody .
		////FunctionBody = Block .
		//functionDecl:
		//	'func' IDENTIFIER (function | signature);
		@Override public ParserRule getRule() { return rule; }
		
		//'func' IDENTIFIER (function | signature)
		public Group getGroup() { return cGroup; }
		
		//'func'
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1() { return cIDENTIFIERTerminalRuleCall_1; }
		
		//function | signature
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//function
		public RuleCall getFunctionParserRuleCall_2_0() { return cFunctionParserRuleCall_2_0; }
		
		//signature
		public RuleCall getSignatureParserRuleCall_2_1() { return cSignatureParserRuleCall_2_1; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSignatureParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cBlockParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//function:
		//	signature block;
		@Override public ParserRule getRule() { return rule; }
		
		//signature block
		public Group getGroup() { return cGroup; }
		
		//signature
		public RuleCall getSignatureParserRuleCall_0() { return cSignatureParserRuleCall_0; }
		
		//block
		public RuleCall getBlockParserRuleCall_1() { return cBlockParserRuleCall_1; }
	}
	public class MethodDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.methodDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cReceiverParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cFunctionParserRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final RuleCall cSignatureParserRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		////MethodDecl   = "func" Receiver MethodName ( Function | Signature ) .
		////Receiver     = Parameters .
		//methodDecl:
		//	'func' receiver IDENTIFIER (function | signature);
		@Override public ParserRule getRule() { return rule; }
		
		//'func' receiver IDENTIFIER (function | signature)
		public Group getGroup() { return cGroup; }
		
		//'func'
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//receiver
		public RuleCall getReceiverParserRuleCall_1() { return cReceiverParserRuleCall_1; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_2() { return cIDENTIFIERTerminalRuleCall_2; }
		
		//function | signature
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//function
		public RuleCall getFunctionParserRuleCall_3_0() { return cFunctionParserRuleCall_3_0; }
		
		//signature
		public RuleCall getSignatureParserRuleCall_3_1() { return cSignatureParserRuleCall_3_1; }
	}
	public class ReceiverElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.receiver");
		private final RuleCall cParametersParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//receiver:
		//	parameters;
		@Override public ParserRule getRule() { return rule; }
		
		//parameters
		public RuleCall getParametersParserRuleCall() { return cParametersParserRuleCall; }
	}
	public class VarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.varDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cVarSpecParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final RuleCall cVarSpecParserRuleCall_1_1_1_0 = (RuleCall)cGroup_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1_1 = (Keyword)cGroup_1_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		////VarDecl     = "var" ( VarSpec | "(" { VarSpec ";" } ")" ) .
		////VarSpec     = IdentifierList ( Type [ "=" ExpressionList ] | "=" ExpressionList ) .
		//varDecl:
		//	'var' (varSpec | '(' (varSpec ';')* ')');
		@Override public ParserRule getRule() { return rule; }
		
		//'var' (varSpec | '(' (varSpec ';')* ')')
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//varSpec | '(' (varSpec ';')* ')'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//varSpec
		public RuleCall getVarSpecParserRuleCall_1_0() { return cVarSpecParserRuleCall_1_0; }
		
		//'(' (varSpec ';')* ')'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//(varSpec ';')*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//varSpec
		public RuleCall getVarSpecParserRuleCall_1_1_1_0() { return cVarSpecParserRuleCall_1_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1_1_1() { return cSemicolonKeyword_1_1_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}
	public class VarSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.varSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierListParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final RuleCall cExpressionListParserRuleCall_1_0_1_1 = (RuleCall)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cExpressionListParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//varSpec:
		//	identifierList (type ('=' expressionList)? | '=' expressionList);
		@Override public ParserRule getRule() { return rule; }
		
		//identifierList (type ('=' expressionList)? | '=' expressionList)
		public Group getGroup() { return cGroup; }
		
		//identifierList
		public RuleCall getIdentifierListParserRuleCall_0() { return cIdentifierListParserRuleCall_0; }
		
		//type ('=' expressionList)? | '=' expressionList
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//type ('=' expressionList)?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//type
		public RuleCall getTypeParserRuleCall_1_0_0() { return cTypeParserRuleCall_1_0_0; }
		
		//('=' expressionList)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0_1_0() { return cEqualsSignKeyword_1_0_1_0; }
		
		//expressionList
		public RuleCall getExpressionListParserRuleCall_1_0_1_1() { return cExpressionListParserRuleCall_1_0_1_1; }
		
		//'=' expressionList
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1_0() { return cEqualsSignKeyword_1_1_0; }
		
		//expressionList
		public RuleCall getExpressionListParserRuleCall_1_1_1() { return cExpressionListParserRuleCall_1_1_1; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cStatementListParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		////Block = "{" StatementList "}" .
		//block:
		//	'{' statementList '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' statementList '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//statementList
		public RuleCall getStatementListParserRuleCall_1() { return cStatementListParserRuleCall_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class StatementListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.statementList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		////StatementList = { Statement ";" } .
		//statementList:
		//	(statement ';')*;
		@Override public ParserRule getRule() { return rule; }
		
		//(statement ';')*
		public Group getGroup() { return cGroup; }
		
		//statement
		public RuleCall getStatementParserRuleCall_0() { return cStatementParserRuleCall_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLabeledStmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSimpleStmtParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGoStmtParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cReturnStmtParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBreakStmtParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cContinueStmtParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cGotoStmtParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cFallthroughStmtParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cBlockParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cIfStmtParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cSwitchStmtParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cSelectStmtParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cForStmtParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cDeferStmtParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		
		//statement:
		//	declaration
		//	| labeledStmt
		//	| simpleStmt
		//	| goStmt
		//	| returnStmt
		//	| breakStmt
		//	| continueStmt
		//	| gotoStmt
		//	| fallthroughStmt
		//	| block
		//	| ifStmt
		//	| switchStmt
		//	| selectStmt
		//	| forStmt
		//	| deferStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//declaration | labeledStmt | simpleStmt | goStmt | returnStmt | breakStmt | continueStmt | gotoStmt | fallthroughStmt |
		//block | ifStmt | switchStmt | selectStmt | forStmt | deferStmt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//declaration
		public RuleCall getDeclarationParserRuleCall_0() { return cDeclarationParserRuleCall_0; }
		
		//labeledStmt
		public RuleCall getLabeledStmtParserRuleCall_1() { return cLabeledStmtParserRuleCall_1; }
		
		//simpleStmt
		public RuleCall getSimpleStmtParserRuleCall_2() { return cSimpleStmtParserRuleCall_2; }
		
		//goStmt
		public RuleCall getGoStmtParserRuleCall_3() { return cGoStmtParserRuleCall_3; }
		
		//returnStmt
		public RuleCall getReturnStmtParserRuleCall_4() { return cReturnStmtParserRuleCall_4; }
		
		//breakStmt
		public RuleCall getBreakStmtParserRuleCall_5() { return cBreakStmtParserRuleCall_5; }
		
		//continueStmt
		public RuleCall getContinueStmtParserRuleCall_6() { return cContinueStmtParserRuleCall_6; }
		
		//gotoStmt
		public RuleCall getGotoStmtParserRuleCall_7() { return cGotoStmtParserRuleCall_7; }
		
		//fallthroughStmt
		public RuleCall getFallthroughStmtParserRuleCall_8() { return cFallthroughStmtParserRuleCall_8; }
		
		//block
		public RuleCall getBlockParserRuleCall_9() { return cBlockParserRuleCall_9; }
		
		//ifStmt
		public RuleCall getIfStmtParserRuleCall_10() { return cIfStmtParserRuleCall_10; }
		
		//switchStmt
		public RuleCall getSwitchStmtParserRuleCall_11() { return cSwitchStmtParserRuleCall_11; }
		
		//selectStmt
		public RuleCall getSelectStmtParserRuleCall_12() { return cSelectStmtParserRuleCall_12; }
		
		//forStmt
		public RuleCall getForStmtParserRuleCall_13() { return cForStmtParserRuleCall_13; }
		
		//deferStmt
		public RuleCall getDeferStmtParserRuleCall_14() { return cDeferStmtParserRuleCall_14; }
	}
	public class SimpleStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.simpleStmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSendStmtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionStmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIncDecStmtParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAssignmentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cShortVarDeclParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEmptyStmtParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		////SimpleStmt = EmptyStmt | ExpressionStmt | SendStmt | IncDecStmt | Assignment | ShortVarDecl .
		//simpleStmt:
		//	sendStmt
		//	| expressionStmt
		//	| incDecStmt
		//	| assignment
		//	| shortVarDecl
		//	| emptyStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//sendStmt | expressionStmt | incDecStmt | assignment | shortVarDecl | emptyStmt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//sendStmt
		public RuleCall getSendStmtParserRuleCall_0() { return cSendStmtParserRuleCall_0; }
		
		//expressionStmt
		public RuleCall getExpressionStmtParserRuleCall_1() { return cExpressionStmtParserRuleCall_1; }
		
		//incDecStmt
		public RuleCall getIncDecStmtParserRuleCall_2() { return cIncDecStmtParserRuleCall_2; }
		
		//assignment
		public RuleCall getAssignmentParserRuleCall_3() { return cAssignmentParserRuleCall_3; }
		
		//shortVarDecl
		public RuleCall getShortVarDeclParserRuleCall_4() { return cShortVarDeclParserRuleCall_4; }
		
		//emptyStmt
		public RuleCall getEmptyStmtParserRuleCall_5() { return cEmptyStmtParserRuleCall_5; }
	}
	public class ExpressionStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.expressionStmt");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////ExpressionStmt = Expression .
		//expressionStmt:
		//	expression;
		@Override public ParserRule getRule() { return rule; }
		
		//expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	public class SendStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.sendStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		////SendStmt = Channel "<-" Expression .
		////Channel  = Expression .
		//sendStmt:
		//	expression '<-' expression;
		@Override public ParserRule getRule() { return rule; }
		
		//expression '<-' expression
		public Group getGroup() { return cGroup; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_1() { return cLessThanSignHyphenMinusKeyword_1; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }
	}
	public class IncDecStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.incDecStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		////IncDecStmt = Expression ( "++" | "--" ) .
		//incDecStmt:
		//	expression ('++' | '--');
		@Override public ParserRule getRule() { return rule; }
		
		//expression ('++' | '--')
		public Group getGroup() { return cGroup; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//'++' | '--'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'++'
		public Keyword getPlusSignPlusSignKeyword_1_0() { return cPlusSignPlusSignKeyword_1_0; }
		
		//'--'
		public Keyword getHyphenMinusHyphenMinusKeyword_1_1() { return cHyphenMinusHyphenMinusKeyword_1_1; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionListParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cAssign_opParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cExpressionListParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		////Assignment = ExpressionList assign_op ExpressionList .
		//assignment:
		//	expressionList assign_op expressionList;
		@Override public ParserRule getRule() { return rule; }
		
		//expressionList assign_op expressionList
		public Group getGroup() { return cGroup; }
		
		//expressionList
		public RuleCall getExpressionListParserRuleCall_0() { return cExpressionListParserRuleCall_0; }
		
		//assign_op
		public RuleCall getAssign_opParserRuleCall_1() { return cAssign_opParserRuleCall_1; }
		
		//expressionList
		public RuleCall getExpressionListParserRuleCall_2() { return cExpressionListParserRuleCall_2; }
	}
	public class Assign_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.assign_op");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cCircumflexAccentKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Keyword cAsteriskKeyword_0_4 = (Keyword)cAlternatives_0.eContents().get(4);
		private final Keyword cSolidusKeyword_0_5 = (Keyword)cAlternatives_0.eContents().get(5);
		private final Keyword cPercentSignKeyword_0_6 = (Keyword)cAlternatives_0.eContents().get(6);
		private final Keyword cLessThanSignLessThanSignKeyword_0_7 = (Keyword)cAlternatives_0.eContents().get(7);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_0_8 = (Keyword)cAlternatives_0.eContents().get(8);
		private final Keyword cAmpersandKeyword_0_9 = (Keyword)cAlternatives_0.eContents().get(9);
		private final Keyword cAmpersandCircumflexAccentKeyword_0_10 = (Keyword)cAlternatives_0.eContents().get(10);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		////assign_op = [ add_op | mul_op ] "=" .
		//assign_op:
		//	('+' | '-' | '|' | '^' | '*' | '/' | '%' | '<<' | '>>' | '&' | '&^')? '=';
		@Override public ParserRule getRule() { return rule; }
		
		//('+' | '-' | '|' | '^' | '*' | '/' | '%' | '<<' | '>>' | '&' | '&^')? '='
		public Group getGroup() { return cGroup; }
		
		//('+' | '-' | '|' | '^' | '*' | '/' | '%' | '<<' | '>>' | '&' | '&^')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_0_2() { return cVerticalLineKeyword_0_2; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_0_3() { return cCircumflexAccentKeyword_0_3; }
		
		//'*'
		public Keyword getAsteriskKeyword_0_4() { return cAsteriskKeyword_0_4; }
		
		//'/'
		public Keyword getSolidusKeyword_0_5() { return cSolidusKeyword_0_5; }
		
		//'%'
		public Keyword getPercentSignKeyword_0_6() { return cPercentSignKeyword_0_6; }
		
		//'<<'
		public Keyword getLessThanSignLessThanSignKeyword_0_7() { return cLessThanSignLessThanSignKeyword_0_7; }
		
		//'>>'
		public Keyword getGreaterThanSignGreaterThanSignKeyword_0_8() { return cGreaterThanSignGreaterThanSignKeyword_0_8; }
		
		//'&'
		public Keyword getAmpersandKeyword_0_9() { return cAmpersandKeyword_0_9; }
		
		//'&^'
		public Keyword getAmpersandCircumflexAccentKeyword_0_10() { return cAmpersandCircumflexAccentKeyword_0_10; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
	}
	public class ShortVarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.shortVarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierListParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpressionListParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		////ShortVarDecl = IdentifierList ":=" ExpressionList .
		//shortVarDecl:
		//	identifierList ':=' expressionList;
		@Override public ParserRule getRule() { return rule; }
		
		//identifierList ':=' expressionList
		public Group getGroup() { return cGroup; }
		
		//identifierList
		public RuleCall getIdentifierListParserRuleCall_0() { return cIdentifierListParserRuleCall_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//expressionList
		public RuleCall getExpressionListParserRuleCall_2() { return cExpressionListParserRuleCall_2; }
	}
	public class EmptyStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.emptyStmt");
		private final RuleCall cWSTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//emptyStmt:
		//	WS;
		@Override public ParserRule getRule() { return rule; }
		
		//WS
		public RuleCall getWSTerminalRuleCall() { return cWSTerminalRuleCall; }
	}
	public class LabeledStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.labeledStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		////LabeledStmt = Label ":" Statement .
		////Label       = identifier .
		//labeledStmt:
		//	IDENTIFIER ':' statement;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER ':' statement
		public Group getGroup() { return cGroup; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//statement
		public RuleCall getStatementParserRuleCall_2() { return cStatementParserRuleCall_2; }
	}
	public class ReturnStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.returnStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionListParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////ReturnStmt = "return" [ ExpressionList ] .
		//returnStmt:
		//	'return' expressionList?;
		@Override public ParserRule getRule() { return rule; }
		
		//'return' expressionList?
		public Group getGroup() { return cGroup; }
		
		//'return'
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//expressionList?
		public RuleCall getExpressionListParserRuleCall_1() { return cExpressionListParserRuleCall_1; }
	}
	public class BreakStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.breakStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBreakKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////BreakStmt = "break" [ Label ] .
		//breakStmt:
		//	'break' IDENTIFIER?;
		@Override public ParserRule getRule() { return rule; }
		
		//'break' IDENTIFIER?
		public Group getGroup() { return cGroup; }
		
		//'break'
		public Keyword getBreakKeyword_0() { return cBreakKeyword_0; }
		
		//IDENTIFIER?
		public RuleCall getIDENTIFIERTerminalRuleCall_1() { return cIDENTIFIERTerminalRuleCall_1; }
	}
	public class ContinueStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.continueStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContinueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////ContinueStmt = "continue" [ Label ] .
		//continueStmt:
		//	'continue' IDENTIFIER?;
		@Override public ParserRule getRule() { return rule; }
		
		//'continue' IDENTIFIER?
		public Group getGroup() { return cGroup; }
		
		//'continue'
		public Keyword getContinueKeyword_0() { return cContinueKeyword_0; }
		
		//IDENTIFIER?
		public RuleCall getIDENTIFIERTerminalRuleCall_1() { return cIDENTIFIERTerminalRuleCall_1; }
	}
	public class GotoStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.gotoStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGotoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////GotoStmt = "goto" Label .
		//gotoStmt:
		//	'goto' IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//'goto' IDENTIFIER
		public Group getGroup() { return cGroup; }
		
		//'goto'
		public Keyword getGotoKeyword_0() { return cGotoKeyword_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1() { return cIDENTIFIERTerminalRuleCall_1; }
	}
	public class FallthroughStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.fallthroughStmt");
		private final Keyword cFallthroughKeyword = (Keyword)rule.eContents().get(1);
		
		////FallthroughStmt = "fallthrough" .
		//fallthroughStmt:
		//	'fallthrough';
		@Override public ParserRule getRule() { return rule; }
		
		//'fallthrough'
		public Keyword getFallthroughKeyword() { return cFallthroughKeyword; }
	}
	public class DeferStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.deferStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeferKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////DeferStmt = "defer" Expression .
		//deferStmt:
		//	'defer' expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'defer' expression
		public Group getGroup() { return cGroup; }
		
		//'defer'
		public Keyword getDeferKeyword_0() { return cDeferKeyword_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}
	public class IfStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.ifStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSimpleStmtParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cBlockParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final RuleCall cIfStmtParserRuleCall_4_1_0 = (RuleCall)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cBlockParserRuleCall_4_1_1 = (RuleCall)cAlternatives_4_1.eContents().get(1);
		
		////IfStmt = "if" [ SimpleStmt ";" ] Expression Block [ "else" ( IfStmt | Block ) ] .
		//ifStmt:
		//	'if' (simpleStmt ';')? expression block ('else' (ifStmt | block))?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' (simpleStmt ';')? expression block ('else' (ifStmt | block))?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//(simpleStmt ';')?
		public Group getGroup_1() { return cGroup_1; }
		
		//simpleStmt
		public RuleCall getSimpleStmtParserRuleCall_1_0() { return cSimpleStmtParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }
		
		//block
		public RuleCall getBlockParserRuleCall_3() { return cBlockParserRuleCall_3; }
		
		//('else' (ifStmt | block))?
		public Group getGroup_4() { return cGroup_4; }
		
		//'else'
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }
		
		//ifStmt | block
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//ifStmt
		public RuleCall getIfStmtParserRuleCall_4_1_0() { return cIfStmtParserRuleCall_4_1_0; }
		
		//block
		public RuleCall getBlockParserRuleCall_4_1_1() { return cBlockParserRuleCall_4_1_1; }
	}
	public class SwitchStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.switchStmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExprSwitchStmtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeSwitchStmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////SwitchStmt = ExprSwitchStmt | TypeSwitchStmt .
		//switchStmt:
		//	exprSwitchStmt | typeSwitchStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//exprSwitchStmt | typeSwitchStmt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//exprSwitchStmt
		public RuleCall getExprSwitchStmtParserRuleCall_0() { return cExprSwitchStmtParserRuleCall_0; }
		
		//typeSwitchStmt
		public RuleCall getTypeSwitchStmtParserRuleCall_1() { return cTypeSwitchStmtParserRuleCall_1; }
	}
	public class ExprSwitchStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.exprSwitchStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSimpleStmtParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cExprCaseClauseParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////ExprSwitchStmt = "switch" [ SimpleStmt ";" ] [ Expression ] "{" { ExprCaseClause } "}" .
		////ExprCaseClause = ExprSwitchCase ":" StatementList .
		////ExprSwitchCase = "case" ExpressionList | "default" .
		//exprSwitchStmt:
		//	'switch' (simpleStmt ';')? expression? '{' exprCaseClause* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'switch' (simpleStmt ';')? expression? '{' exprCaseClause* '}'
		public Group getGroup() { return cGroup; }
		
		//'switch'
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }
		
		//(simpleStmt ';')?
		public Group getGroup_1() { return cGroup_1; }
		
		//simpleStmt
		public RuleCall getSimpleStmtParserRuleCall_1_0() { return cSimpleStmtParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//expression?
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//exprCaseClause*
		public RuleCall getExprCaseClauseParserRuleCall_4() { return cExprCaseClauseParserRuleCall_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ExprCaseClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.exprCaseClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprSwitchCaseParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cStatementListParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//exprCaseClause:
		//	exprSwitchCase ':' statementList;
		@Override public ParserRule getRule() { return rule; }
		
		//exprSwitchCase ':' statementList
		public Group getGroup() { return cGroup; }
		
		//exprSwitchCase
		public RuleCall getExprSwitchCaseParserRuleCall_0() { return cExprSwitchCaseParserRuleCall_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//statementList
		public RuleCall getStatementListParserRuleCall_2() { return cStatementListParserRuleCall_2; }
	}
	public class ExprSwitchCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.exprSwitchCase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCaseKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionListParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cDefaultKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//exprSwitchCase:
		//	'case' expressionList | 'default';
		@Override public ParserRule getRule() { return rule; }
		
		//'case' expressionList | 'default'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'case' expressionList
		public Group getGroup_0() { return cGroup_0; }
		
		//'case'
		public Keyword getCaseKeyword_0_0() { return cCaseKeyword_0_0; }
		
		//expressionList
		public RuleCall getExpressionListParserRuleCall_0_1() { return cExpressionListParserRuleCall_0_1; }
		
		//'default'
		public Keyword getDefaultKeyword_1() { return cDefaultKeyword_1; }
	}
	public class TypeSwitchStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.typeSwitchStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSimpleStmtParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cTypeSwitchGuardParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cTypeCaseClauseParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////TypeSwitchStmt  = "switch" [ SimpleStmt ";" ] TypeSwitchGuard "{" { TypeCaseClause } "}" .
		////TypeSwitchGuard = [ identifier ":=" ] PrimaryExpr "." "(" "type" ")" .
		////TypeCaseClause  = TypeSwitchCase ":" StatementList .
		////TypeSwitchCase  = "case" TypeList | "default" .
		////TypeList        = Type { "," Type } .
		//typeSwitchStmt:
		//	'switch' (simpleStmt ';')? typeSwitchGuard '{' typeCaseClause* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'switch' (simpleStmt ';')? typeSwitchGuard '{' typeCaseClause* '}'
		public Group getGroup() { return cGroup; }
		
		//'switch'
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }
		
		//(simpleStmt ';')?
		public Group getGroup_1() { return cGroup_1; }
		
		//simpleStmt
		public RuleCall getSimpleStmtParserRuleCall_1_0() { return cSimpleStmtParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//typeSwitchGuard
		public RuleCall getTypeSwitchGuardParserRuleCall_2() { return cTypeSwitchGuardParserRuleCall_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//typeCaseClause*
		public RuleCall getTypeCaseClauseParserRuleCall_4() { return cTypeCaseClauseParserRuleCall_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class TypeSwitchGuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.typeSwitchGuard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cPrimaryExprParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cTypeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//typeSwitchGuard:
		//	(IDENTIFIER ':=')? primaryExpr '.' '(' 'type' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//(IDENTIFIER ':=')? primaryExpr '.' '(' 'type' ')'
		public Group getGroup() { return cGroup; }
		
		//(IDENTIFIER ':=')?
		public Group getGroup_0() { return cGroup_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0_0() { return cIDENTIFIERTerminalRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_0_1() { return cColonEqualsSignKeyword_0_1; }
		
		//primaryExpr
		public RuleCall getPrimaryExprParserRuleCall_1() { return cPrimaryExprParserRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//'type'
		public Keyword getTypeKeyword_4() { return cTypeKeyword_4; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class TypeCaseClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.typeCaseClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypeSwitchCaseParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cStatementListParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//typeCaseClause:
		//	typeSwitchCase ':' statementList;
		@Override public ParserRule getRule() { return rule; }
		
		//typeSwitchCase ':' statementList
		public Group getGroup() { return cGroup; }
		
		//typeSwitchCase
		public RuleCall getTypeSwitchCaseParserRuleCall_0() { return cTypeSwitchCaseParserRuleCall_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//statementList
		public RuleCall getStatementListParserRuleCall_2() { return cStatementListParserRuleCall_2; }
	}
	public class TypeSwitchCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.typeSwitchCase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCaseKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cTypeListParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cDefaultKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//typeSwitchCase:
		//	'case' typeList | 'default';
		@Override public ParserRule getRule() { return rule; }
		
		//'case' typeList | 'default'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'case' typeList
		public Group getGroup_0() { return cGroup_0; }
		
		//'case'
		public Keyword getCaseKeyword_0_0() { return cCaseKeyword_0_0; }
		
		//typeList
		public RuleCall getTypeListParserRuleCall_0_1() { return cTypeListParserRuleCall_0_1; }
		
		//'default'
		public Keyword getDefaultKeyword_1() { return cDefaultKeyword_1; }
	}
	public class TypeListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.typeList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//typeList:
		//	type (',' type)*;
		@Override public ParserRule getRule() { return rule; }
		
		//type (',' type)*
		public Group getGroup() { return cGroup; }
		
		//type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }
		
		//(',' type)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//type
		public RuleCall getTypeParserRuleCall_1_1() { return cTypeParserRuleCall_1_1; }
	}
	public class SelectStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.selectStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cCommClauseParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////SelectStmt = "select" "{" { CommClause } "}" .
		////CommClause = CommCase ":" StatementList .
		////CommCase   = "case" ( SendStmt | RecvStmt ) | "default" .
		////RecvStmt   = [ ExpressionList "=" | IdentifierList ":=" ] RecvExpr .
		////RecvExpr   = Expression .
		//selectStmt:
		//	'select' '{' commClause* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'select' '{' commClause* '}'
		public Group getGroup() { return cGroup; }
		
		//'select'
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//commClause*
		public RuleCall getCommClauseParserRuleCall_2() { return cCommClauseParserRuleCall_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class CommClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.commClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCommCaseParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cStatementListParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//commClause:
		//	commCase ':' statementList;
		@Override public ParserRule getRule() { return rule; }
		
		//commCase ':' statementList
		public Group getGroup() { return cGroup; }
		
		//commCase
		public RuleCall getCommCaseParserRuleCall_0() { return cCommCaseParserRuleCall_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//statementList
		public RuleCall getStatementListParserRuleCall_2() { return cStatementListParserRuleCall_2; }
	}
	public class CommCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.commCase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCaseKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final RuleCall cSendStmtParserRuleCall_0_1_0 = (RuleCall)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cRecvStmtParserRuleCall_0_1_1 = (RuleCall)cAlternatives_0_1.eContents().get(1);
		private final Keyword cDefaultKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//commCase:
		//	'case' (sendStmt | recvStmt) | 'default';
		@Override public ParserRule getRule() { return rule; }
		
		//'case' (sendStmt | recvStmt) | 'default'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'case' (sendStmt | recvStmt)
		public Group getGroup_0() { return cGroup_0; }
		
		//'case'
		public Keyword getCaseKeyword_0_0() { return cCaseKeyword_0_0; }
		
		//sendStmt | recvStmt
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//sendStmt
		public RuleCall getSendStmtParserRuleCall_0_1_0() { return cSendStmtParserRuleCall_0_1_0; }
		
		//recvStmt
		public RuleCall getRecvStmtParserRuleCall_0_1_1() { return cRecvStmtParserRuleCall_0_1_1; }
		
		//'default'
		public Keyword getDefaultKeyword_1() { return cDefaultKeyword_1; }
	}
	public class RecvStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.recvStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cExpressionListParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final RuleCall cIdentifierListParserRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//recvStmt:
		//	(expressionList '=' | identifierList ':=')? expression;
		@Override public ParserRule getRule() { return rule; }
		
		//(expressionList '=' | identifierList ':=')? expression
		public Group getGroup() { return cGroup; }
		
		//(expressionList '=' | identifierList ':=')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//expressionList '='
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//expressionList
		public RuleCall getExpressionListParserRuleCall_0_0_0() { return cExpressionListParserRuleCall_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_0_1() { return cEqualsSignKeyword_0_0_1; }
		
		//identifierList ':='
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//identifierList
		public RuleCall getIdentifierListParserRuleCall_0_1_0() { return cIdentifierListParserRuleCall_0_1_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_0_1_1() { return cColonEqualsSignKeyword_0_1_1; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}
	public class ForStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.forStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cForClauseParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cRangeClauseParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final RuleCall cBlockParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		////ForStmt = "for" [ Condition | ForClause | RangeClause ] Block .
		////Condition = Expression .
		//forStmt:
		//	'for' (expression | forClause | rangeClause)? block;
		@Override public ParserRule getRule() { return rule; }
		
		//'for' (expression | forClause | rangeClause)? block
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//(expression | forClause | rangeClause)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_1_0() { return cExpressionParserRuleCall_1_0; }
		
		//forClause
		public RuleCall getForClauseParserRuleCall_1_1() { return cForClauseParserRuleCall_1_1; }
		
		//rangeClause
		public RuleCall getRangeClauseParserRuleCall_1_2() { return cRangeClauseParserRuleCall_1_2; }
		
		//block
		public RuleCall getBlockParserRuleCall_2() { return cBlockParserRuleCall_2; }
	}
	public class ForClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.forClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSimpleStmtParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cSimpleStmtParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		////ForClause = [ InitStmt ] ";" [ Condition ] ";" [ PostStmt ] .
		////InitStmt = SimpleStmt .
		////PostStmt = SimpleStmt .
		//forClause:
		//	simpleStmt? ';' expression? ';' simpleStmt?;
		@Override public ParserRule getRule() { return rule; }
		
		//simpleStmt? ';' expression? ';' simpleStmt?
		public Group getGroup() { return cGroup; }
		
		//simpleStmt?
		public RuleCall getSimpleStmtParserRuleCall_0() { return cSimpleStmtParserRuleCall_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
		
		//expression?
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//simpleStmt?
		public RuleCall getSimpleStmtParserRuleCall_4() { return cSimpleStmtParserRuleCall_4; }
	}
	public class RangeClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.rangeClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cExpressionListParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final RuleCall cIdentifierListParserRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Keyword cRangeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		////RangeClause = [ ExpressionList "=" | IdentifierList ":=" ] "range" Expression .
		//rangeClause:
		//	(expressionList '=' | identifierList ':=')? 'range' expression;
		@Override public ParserRule getRule() { return rule; }
		
		//(expressionList '=' | identifierList ':=')? 'range' expression
		public Group getGroup() { return cGroup; }
		
		//(expressionList '=' | identifierList ':=')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//expressionList '='
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//expressionList
		public RuleCall getExpressionListParserRuleCall_0_0_0() { return cExpressionListParserRuleCall_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_0_1() { return cEqualsSignKeyword_0_0_1; }
		
		//identifierList ':='
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//identifierList
		public RuleCall getIdentifierListParserRuleCall_0_1_0() { return cIdentifierListParserRuleCall_0_1_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_0_1_1() { return cColonEqualsSignKeyword_0_1_1; }
		
		//'range'
		public Keyword getRangeKeyword_1() { return cRangeKeyword_1; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }
	}
	public class GoStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.goStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////GoStmt = "go" Expression .
		//goStmt:
		//	'go' expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'go' expression
		public Group getGroup() { return cGroup; }
		
		//'go'
		public Keyword getGoKeyword_0() { return cGoKeyword_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeLitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		////Type      = TypeName | TypeLit | "(" Type ")" .
		//type:
		//	typeName
		//	| typeLit
		//	| '(' type ')';
		@Override public ParserRule getRule() { return rule; }
		
		//typeName | typeLit | '(' type ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//typeName
		public RuleCall getTypeNameParserRuleCall_0() { return cTypeNameParserRuleCall_0; }
		
		//typeLit
		public RuleCall getTypeLitParserRuleCall_1() { return cTypeLitParserRuleCall_1; }
		
		//'(' type ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//type
		public RuleCall getTypeParserRuleCall_2_1() { return cTypeParserRuleCall_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class TypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.typeName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQualifiedIdentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////TypeName  = identifier | QualifiedIdent .
		//typeName:
		//	IDENTIFIER
		//	| qualifiedIdent;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER | qualifiedIdent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }
		
		//qualifiedIdent
		public RuleCall getQualifiedIdentParserRuleCall_1() { return cQualifiedIdentParserRuleCall_1; }
	}
	public class TypeLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.typeLit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArrayTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStructTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPointerTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFunctionTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cInterfaceTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSliceTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cMapTypeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cChannelTypeParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		////TypeLit   = ArrayType | StructType | PointerType | FunctionType | InterfaceType |
		////	    SliceType | MapType | ChannelType .
		//typeLit:
		//	arrayType
		//	| structType
		//	| pointerType
		//	| functionType
		//	| interfaceType
		//	| sliceType
		//	| mapType
		//	| channelType;
		@Override public ParserRule getRule() { return rule; }
		
		//arrayType | structType | pointerType | functionType | interfaceType | sliceType | mapType | channelType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//arrayType
		public RuleCall getArrayTypeParserRuleCall_0() { return cArrayTypeParserRuleCall_0; }
		
		//structType
		public RuleCall getStructTypeParserRuleCall_1() { return cStructTypeParserRuleCall_1; }
		
		//pointerType
		public RuleCall getPointerTypeParserRuleCall_2() { return cPointerTypeParserRuleCall_2; }
		
		//functionType
		public RuleCall getFunctionTypeParserRuleCall_3() { return cFunctionTypeParserRuleCall_3; }
		
		//interfaceType
		public RuleCall getInterfaceTypeParserRuleCall_4() { return cInterfaceTypeParserRuleCall_4; }
		
		//sliceType
		public RuleCall getSliceTypeParserRuleCall_5() { return cSliceTypeParserRuleCall_5; }
		
		//mapType
		public RuleCall getMapTypeParserRuleCall_6() { return cMapTypeParserRuleCall_6; }
		
		//channelType
		public RuleCall getChannelTypeParserRuleCall_7() { return cChannelTypeParserRuleCall_7; }
	}
	public class ArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.arrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cArrayLengthParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cElementTypeParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//arrayType:
		//	'[' arrayLength ']' elementType;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' arrayLength ']' elementType
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//arrayLength
		public RuleCall getArrayLengthParserRuleCall_1() { return cArrayLengthParserRuleCall_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
		
		//elementType
		public RuleCall getElementTypeParserRuleCall_3() { return cElementTypeParserRuleCall_3; }
	}
	public class ArrayLengthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.arrayLength");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//arrayLength:
		//	expression;
		@Override public ParserRule getRule() { return rule; }
		
		//expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	public class ElementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.elementType");
		private final RuleCall cTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//elementType:
		//	type;
		@Override public ParserRule getRule() { return rule; }
		
		//type
		public RuleCall getTypeParserRuleCall() { return cTypeParserRuleCall; }
	}
	public class PointerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.pointerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////PointerType = "*" BaseType .
		////BaseType    = Type .
		//pointerType:
		//	'*' type;
		@Override public ParserRule getRule() { return rule; }
		
		//'*' type
		public Group getGroup() { return cGroup; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }
	}
	public class InterfaceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.interfaceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cMethodSpecParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////InterfaceType      = "interface" "{" { MethodSpec ";" } "}" .
		////MethodSpec         = MethodName Signature | InterfaceTypeName .
		////MethodName         = identifier .
		////InterfaceTypeName  = TypeName .
		//interfaceType:
		//	'interface' '{' (methodSpec ';')* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'interface' '{' (methodSpec ';')* '}'
		public Group getGroup() { return cGroup; }
		
		//'interface'
		public Keyword getInterfaceKeyword_0() { return cInterfaceKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(methodSpec ';')*
		public Group getGroup_2() { return cGroup_2; }
		
		//methodSpec
		public RuleCall getMethodSpecParserRuleCall_2_0() { return cMethodSpecParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class SliceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.sliceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cElementTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		////SliceType = "[" "]" ElementType .
		//sliceType:
		//	'[' ']' elementType;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' ']' elementType
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1() { return cRightSquareBracketKeyword_1; }
		
		//elementType
		public RuleCall getElementTypeParserRuleCall_2() { return cElementTypeParserRuleCall_2; }
	}
	public class MapTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.mapType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cElementTypeParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		////MapType     = "map" "[" KeyType "]" ElementType .
		////KeyType     = Type .
		//mapType:
		//	'map' '[' type ']' elementType;
		@Override public ParserRule getRule() { return rule; }
		
		//'map' '[' type ']' elementType
		public Group getGroup() { return cGroup; }
		
		//'map'
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//elementType
		public RuleCall getElementTypeParserRuleCall_4() { return cElementTypeParserRuleCall_4; }
	}
	public class ChannelTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.channelType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cChanKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cChanKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Keyword cLessThanSignHyphenMinusKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Keyword cChanKeyword_0_2_1 = (Keyword)cGroup_0_2.eContents().get(1);
		private final RuleCall cElementTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////ChannelType = ( "chan" | "chan" "<-" | "<-" "chan" ) ElementType .
		//channelType:
		//	('chan' | 'chan' '<-' | '<-' 'chan') elementType;
		@Override public ParserRule getRule() { return rule; }
		
		//('chan' | 'chan' '<-' | '<-' 'chan') elementType
		public Group getGroup() { return cGroup; }
		
		//'chan' | 'chan' '<-' | '<-' 'chan'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'chan'
		public Keyword getChanKeyword_0_0() { return cChanKeyword_0_0; }
		
		//'chan' '<-'
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'chan'
		public Keyword getChanKeyword_0_1_0() { return cChanKeyword_0_1_0; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_0_1_1() { return cLessThanSignHyphenMinusKeyword_0_1_1; }
		
		//'<-' 'chan'
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_0_2_0() { return cLessThanSignHyphenMinusKeyword_0_2_0; }
		
		//'chan'
		public Keyword getChanKeyword_0_2_1() { return cChanKeyword_0_2_1; }
		
		//elementType
		public RuleCall getElementTypeParserRuleCall_1() { return cElementTypeParserRuleCall_1; }
	}
	public class MethodSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.methodSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cSignatureParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cTypeNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//methodSpec:
		//	IDENTIFIER signature | typeName;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER signature | typeName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IDENTIFIER signature
		public Group getGroup_0() { return cGroup_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0_0() { return cIDENTIFIERTerminalRuleCall_0_0; }
		
		//signature
		public RuleCall getSignatureParserRuleCall_0_1() { return cSignatureParserRuleCall_0_1; }
		
		//typeName
		public RuleCall getTypeNameParserRuleCall_1() { return cTypeNameParserRuleCall_1; }
	}
	public class FunctionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.functionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSignatureParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////FunctionType   = "func" Signature .
		////Signature      = Parameters [ Result ] .
		////Result         = Parameters | Type .
		////Parameters     = "(" [ ParameterList [ "," ] ] ")" .
		////ParameterList  = ParameterDecl { "," ParameterDecl } .
		////ParameterDecl  = [ IdentifierList ] [ "..." ] Type .
		//functionType:
		//	'func' signature;
		@Override public ParserRule getRule() { return rule; }
		
		//'func' signature
		public Group getGroup() { return cGroup; }
		
		//'func'
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//signature
		public RuleCall getSignatureParserRuleCall_1() { return cSignatureParserRuleCall_1; }
	}
	public class SignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.signature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParametersParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cResultParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//signature:
		//	parameters result?;
		@Override public ParserRule getRule() { return rule; }
		
		//parameters result?
		public Group getGroup() { return cGroup; }
		
		//parameters
		public RuleCall getParametersParserRuleCall_0() { return cParametersParserRuleCall_0; }
		
		//result?
		public RuleCall getResultParserRuleCall_1() { return cResultParserRuleCall_1; }
	}
	public class ResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.result");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParametersParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//result:
		//	parameters | type;
		@Override public ParserRule getRule() { return rule; }
		
		//parameters | type
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//parameters
		public RuleCall getParametersParserRuleCall_0() { return cParametersParserRuleCall_0; }
		
		//type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }
	}
	public class ParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.parameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cParameterListParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//parameters:
		//	'(' (parameterList ','?)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' (parameterList ','?)? ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(parameterList ','?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//parameterList
		public RuleCall getParameterListParserRuleCall_1_0() { return cParameterListParserRuleCall_1_0; }
		
		//','?
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.parameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParameterDeclParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cParameterDeclParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//parameterList:
		//	parameterDecl (',' parameterDecl)*;
		@Override public ParserRule getRule() { return rule; }
		
		//parameterDecl (',' parameterDecl)*
		public Group getGroup() { return cGroup; }
		
		//parameterDecl
		public RuleCall getParameterDeclParserRuleCall_0() { return cParameterDeclParserRuleCall_0; }
		
		//(',' parameterDecl)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//parameterDecl
		public RuleCall getParameterDeclParserRuleCall_1_1() { return cParameterDeclParserRuleCall_1_1; }
	}
	public class ParameterDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.parameterDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierListParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//parameterDecl:
		//	identifierList? '...'? type;
		@Override public ParserRule getRule() { return rule; }
		
		//identifierList? '...'? type
		public Group getGroup() { return cGroup; }
		
		//identifierList?
		public RuleCall getIdentifierListParserRuleCall_0() { return cIdentifierListParserRuleCall_0; }
		
		//'...'?
		public Keyword getFullStopFullStopFullStopKeyword_1() { return cFullStopFullStopFullStopKeyword_1; }
		
		//type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }
	}
	public class OperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.operand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperandNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMethodExprParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//// Operands
		////Operand     = Literal | OperandName | MethodExpr | "(" Expression ")" .
		////Literal     = BasicLit | CompositeLit | FunctionLit .
		////BasicLit    = int_lit | float_lit | imaginary_lit | rune_lit | string_lit .
		////OperandName = identifier | QualifiedIdent.
		//operand:
		//	literal | operandName | methodExpr |
		//	'(' expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//literal | operandName | methodExpr | '(' expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }
		
		//operandName
		public RuleCall getOperandNameParserRuleCall_1() { return cOperandNameParserRuleCall_1; }
		
		//methodExpr
		public RuleCall getMethodExprParserRuleCall_2() { return cMethodExprParserRuleCall_2; }
		
		//'(' expression ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_3_1() { return cExpressionParserRuleCall_3_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicLitParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompositeLitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionLitParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//literal:
		//	basicLit | compositeLit | functionLit;
		@Override public ParserRule getRule() { return rule; }
		
		//basicLit | compositeLit | functionLit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//basicLit
		public RuleCall getBasicLitParserRuleCall_0() { return cBasicLitParserRuleCall_0; }
		
		//compositeLit
		public RuleCall getCompositeLitParserRuleCall_1() { return cCompositeLitParserRuleCall_1; }
		
		//functionLit
		public RuleCall getFunctionLitParserRuleCall_2() { return cFunctionLitParserRuleCall_2; }
	}
	public class BasicLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.basicLit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINT_LITTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFLOAT_LITTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIMAGINARY_LITTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRUNE_LITTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSTRING_LITTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//basicLit:
		//	INT_LIT | FLOAT_LIT | IMAGINARY_LIT | RUNE_LIT | STRING_LIT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT_LIT | FLOAT_LIT | IMAGINARY_LIT | RUNE_LIT | STRING_LIT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT_LIT
		public RuleCall getINT_LITTerminalRuleCall_0() { return cINT_LITTerminalRuleCall_0; }
		
		//FLOAT_LIT
		public RuleCall getFLOAT_LITTerminalRuleCall_1() { return cFLOAT_LITTerminalRuleCall_1; }
		
		//IMAGINARY_LIT
		public RuleCall getIMAGINARY_LITTerminalRuleCall_2() { return cIMAGINARY_LITTerminalRuleCall_2; }
		
		//RUNE_LIT
		public RuleCall getRUNE_LITTerminalRuleCall_3() { return cRUNE_LITTerminalRuleCall_3; }
		
		//STRING_LIT
		public RuleCall getSTRING_LITTerminalRuleCall_4() { return cSTRING_LITTerminalRuleCall_4; }
	}
	public class OperandNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.operandName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQualifiedIdentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//operandName:
		//	IDENTIFIER | qualifiedIdent;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER | qualifiedIdent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }
		
		//qualifiedIdent
		public RuleCall getQualifiedIdentParserRuleCall_1() { return cQualifiedIdentParserRuleCall_1; }
	}
	public class QualifiedIdentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.qualifiedIdent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		////QualifiedIdent = PackageName "." identifier .
		//qualifiedIdent:
		//	IDENTIFIER '.' IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER '.' IDENTIFIER
		public Group getGroup() { return cGroup; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_2() { return cIDENTIFIERTerminalRuleCall_2; }
	}
	public class CompositeLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.compositeLit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLiteralTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cLiteralValueParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////CompositeLit  = LiteralType LiteralValue .
		////LiteralType   = StructType | ArrayType | "[" "..." "]" ElementType |
		////                SliceType | MapType | TypeName .
		////LiteralValue  = "{" [ ElementList [ "," ] ] "}" .
		////ElementList   = KeyedElement { "," KeyedElement } .
		////KeyedElement  = [ Key ":" ] Element .
		////Key           = FieldName | Expression | LiteralValue .
		////FieldName     = identifier .
		////Element       = Expression | LiteralValue .
		//compositeLit:
		//	literalType literalValue;
		@Override public ParserRule getRule() { return rule; }
		
		//literalType literalValue
		public Group getGroup() { return cGroup; }
		
		//literalType
		public RuleCall getLiteralTypeParserRuleCall_0() { return cLiteralTypeParserRuleCall_0; }
		
		//literalValue
		public RuleCall getLiteralValueParserRuleCall_1() { return cLiteralValueParserRuleCall_1; }
	}
	public class LiteralTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.literalType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStructTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final RuleCall cElementTypeParserRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		private final RuleCall cSliceTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMapTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTypeNameParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//literalType:
		//	structType
		//	| arrayType
		//	| '[' '...' ']' elementType
		//	| sliceType
		//	| mapType
		//	| typeName;
		@Override public ParserRule getRule() { return rule; }
		
		//structType | arrayType | '[' '...' ']' elementType | sliceType | mapType | typeName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//structType
		public RuleCall getStructTypeParserRuleCall_0() { return cStructTypeParserRuleCall_0; }
		
		//arrayType
		public RuleCall getArrayTypeParserRuleCall_1() { return cArrayTypeParserRuleCall_1; }
		
		//'[' '...' ']' elementType
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//'...'
		public Keyword getFullStopFullStopFullStopKeyword_2_1() { return cFullStopFullStopFullStopKeyword_2_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//elementType
		public RuleCall getElementTypeParserRuleCall_2_3() { return cElementTypeParserRuleCall_2_3; }
		
		//sliceType
		public RuleCall getSliceTypeParserRuleCall_3() { return cSliceTypeParserRuleCall_3; }
		
		//mapType
		public RuleCall getMapTypeParserRuleCall_4() { return cMapTypeParserRuleCall_4; }
		
		//typeName
		public RuleCall getTypeNameParserRuleCall_5() { return cTypeNameParserRuleCall_5; }
	}
	public class LiteralValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.literalValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cElementListParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//literalValue:
		//	'{' (elementList ','?)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' (elementList ','?)? '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//(elementList ','?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//elementList
		public RuleCall getElementListParserRuleCall_1_0() { return cElementListParserRuleCall_1_0; }
		
		//','?
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class ElementListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.elementList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cKeyedElementParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cKeyedElementParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//elementList:
		//	keyedElement (',' keyedElement)*;
		@Override public ParserRule getRule() { return rule; }
		
		//keyedElement (',' keyedElement)*
		public Group getGroup() { return cGroup; }
		
		//keyedElement
		public RuleCall getKeyedElementParserRuleCall_0() { return cKeyedElementParserRuleCall_0; }
		
		//(',' keyedElement)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//keyedElement
		public RuleCall getKeyedElementParserRuleCall_1_1() { return cKeyedElementParserRuleCall_1_1; }
	}
	public class KeyedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.keyedElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cKeyParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cElementParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//keyedElement:
		//	(key ':')? element;
		@Override public ParserRule getRule() { return rule; }
		
		//(key ':')? element
		public Group getGroup() { return cGroup; }
		
		//(key ':')?
		public Group getGroup_0() { return cGroup_0; }
		
		//key
		public RuleCall getKeyParserRuleCall_0_0() { return cKeyParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//element
		public RuleCall getElementParserRuleCall_1() { return cElementParserRuleCall_1; }
	}
	public class KeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.key");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//key:
		//	IDENTIFIER | expression | literalValue;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER | expression | literalValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
		
		//literalValue
		public RuleCall getLiteralValueParserRuleCall_2() { return cLiteralValueParserRuleCall_2; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//element:
		//	expression | literalValue;
		@Override public ParserRule getRule() { return rule; }
		
		//expression | literalValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//literalValue
		public RuleCall getLiteralValueParserRuleCall_1() { return cLiteralValueParserRuleCall_1; }
	}
	public class StructTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.structType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cFieldDeclParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////StructType     = "struct" "{" { FieldDecl ";" } "}" .
		////FieldDecl      = (IdentifierList Type | AnonymousField) [ Tag ] .
		////AnonymousField = [ "*" ] TypeName .
		////Tag            = string_lit .
		//structType:
		//	'struct' '{' (fieldDecl ';')* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'struct' '{' (fieldDecl ';')* '}'
		public Group getGroup() { return cGroup; }
		
		//'struct'
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(fieldDecl ';')*
		public Group getGroup_2() { return cGroup_2; }
		
		//fieldDecl
		public RuleCall getFieldDeclParserRuleCall_2_0() { return cFieldDeclParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class FieldDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.fieldDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cIdentifierListParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final RuleCall cAnonymousFieldParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cSTRING_LITTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//fieldDecl:
		//	(identifierList type | anonymousField) STRING_LIT?;
		@Override public ParserRule getRule() { return rule; }
		
		//(identifierList type | anonymousField) STRING_LIT?
		public Group getGroup() { return cGroup; }
		
		//identifierList type | anonymousField
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//identifierList type
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//identifierList
		public RuleCall getIdentifierListParserRuleCall_0_0_0() { return cIdentifierListParserRuleCall_0_0_0; }
		
		//type
		public RuleCall getTypeParserRuleCall_0_0_1() { return cTypeParserRuleCall_0_0_1; }
		
		//anonymousField
		public RuleCall getAnonymousFieldParserRuleCall_0_1() { return cAnonymousFieldParserRuleCall_0_1; }
		
		//STRING_LIT?
		public RuleCall getSTRING_LITTerminalRuleCall_1() { return cSTRING_LITTerminalRuleCall_1; }
	}
	public class AnonymousFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.anonymousField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTypeNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//anonymousField:
		//	'*'? typeName;
		@Override public ParserRule getRule() { return rule; }
		
		//'*'? typeName
		public Group getGroup() { return cGroup; }
		
		//'*'?
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//typeName
		public RuleCall getTypeNameParserRuleCall_1() { return cTypeNameParserRuleCall_1; }
	}
	public class FunctionLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.functionLit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cFunctionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////FunctionLit = "func" Function .
		//functionLit:
		//	'func' function;
		@Override public ParserRule getRule() { return rule; }
		
		//'func' function
		public Group getGroup() { return cGroup; }
		
		//'func'
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//function
		public RuleCall getFunctionParserRuleCall_1() { return cFunctionParserRuleCall_1; }
	}
	public class PrimaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.primaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final RuleCall cOperandParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cConversionParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cPrimaryExprSelectorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPrimaryExprIndexParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPrimaryExprSliceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPrimaryExprTypeAssertionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPrimaryExprArgumentsParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		////PrimaryExpr =
		////	Operand |
		////	Conversion |
		////	PrimaryExpr Selector |
		////	PrimaryExpr Index |
		////	PrimaryExpr Slice |
		////	PrimaryExpr TypeAssertion |
		////	PrimaryExpr Arguments .
		////
		////Selector       = "." identifier .
		////Index          = "[" Expression "]" .
		////Slice          = "[" ( [ Expression ] ":" [ Expression ] ) |
		////                     ( [ Expression ] ":" Expression ":" Expression )
		////                 "]" .
		////TypeAssertion  = "." "(" Type ")" .
		////Arguments      = "(" [ ( ExpressionList | Type [ "," ExpressionList ] ) [ "..." ] [ "," ] ] ")" .
		//primaryExpr:
		//	(operand | conversion) | primaryExprSelector | primaryExprIndex | primaryExprSlice | primaryExprTypeAssertion |
		//	primaryExprArguments;
		@Override public ParserRule getRule() { return rule; }
		
		//(operand | conversion) | primaryExprSelector | primaryExprIndex | primaryExprSlice | primaryExprTypeAssertion |
		//primaryExprArguments
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(operand | conversion)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//operand
		public RuleCall getOperandParserRuleCall_0_0() { return cOperandParserRuleCall_0_0; }
		
		//conversion
		public RuleCall getConversionParserRuleCall_0_1() { return cConversionParserRuleCall_0_1; }
		
		//primaryExprSelector
		public RuleCall getPrimaryExprSelectorParserRuleCall_1() { return cPrimaryExprSelectorParserRuleCall_1; }
		
		//primaryExprIndex
		public RuleCall getPrimaryExprIndexParserRuleCall_2() { return cPrimaryExprIndexParserRuleCall_2; }
		
		//primaryExprSlice
		public RuleCall getPrimaryExprSliceParserRuleCall_3() { return cPrimaryExprSliceParserRuleCall_3; }
		
		//primaryExprTypeAssertion
		public RuleCall getPrimaryExprTypeAssertionParserRuleCall_4() { return cPrimaryExprTypeAssertionParserRuleCall_4; }
		
		//primaryExprArguments
		public RuleCall getPrimaryExprArgumentsParserRuleCall_5() { return cPrimaryExprArgumentsParserRuleCall_5; }
	}
	public class PrimaryExprStuffElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.primaryExprStuff");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSelectorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIndexParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSliceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTypeAssertionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cArgumentsParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//primaryExprStuff:
		//	selector | index | slice | typeAssertion | arguments;
		@Override public ParserRule getRule() { return rule; }
		
		//selector | index | slice | typeAssertion | arguments
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//selector
		public RuleCall getSelectorParserRuleCall_0() { return cSelectorParserRuleCall_0; }
		
		//index
		public RuleCall getIndexParserRuleCall_1() { return cIndexParserRuleCall_1; }
		
		//slice
		public RuleCall getSliceParserRuleCall_2() { return cSliceParserRuleCall_2; }
		
		//typeAssertion
		public RuleCall getTypeAssertionParserRuleCall_3() { return cTypeAssertionParserRuleCall_3; }
		
		//arguments
		public RuleCall getArgumentsParserRuleCall_4() { return cArgumentsParserRuleCall_4; }
	}
	public class PrimaryExprSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.primaryExprSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExprStuffParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPrimaryExprSelectorParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//////Left Rec removal for primaryExpr
		//primaryExprSelector:
		//	(primaryExprStuff primaryExprSelector)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(primaryExprStuff primaryExprSelector)?
		public Group getGroup() { return cGroup; }
		
		//primaryExprStuff
		public RuleCall getPrimaryExprStuffParserRuleCall_0() { return cPrimaryExprStuffParserRuleCall_0; }
		
		//primaryExprSelector
		public RuleCall getPrimaryExprSelectorParserRuleCall_1() { return cPrimaryExprSelectorParserRuleCall_1; }
	}
	public class PrimaryExprIndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.primaryExprIndex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExprStuffParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPrimaryExprIndexParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//primaryExprIndex:
		//	(primaryExprStuff primaryExprIndex)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(primaryExprStuff primaryExprIndex)?
		public Group getGroup() { return cGroup; }
		
		//primaryExprStuff
		public RuleCall getPrimaryExprStuffParserRuleCall_0() { return cPrimaryExprStuffParserRuleCall_0; }
		
		//primaryExprIndex
		public RuleCall getPrimaryExprIndexParserRuleCall_1() { return cPrimaryExprIndexParserRuleCall_1; }
	}
	public class PrimaryExprSliceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.primaryExprSlice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExprStuffParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPrimaryExprSliceParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//primaryExprSlice:
		//	(primaryExprStuff primaryExprSlice)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(primaryExprStuff primaryExprSlice)?
		public Group getGroup() { return cGroup; }
		
		//primaryExprStuff
		public RuleCall getPrimaryExprStuffParserRuleCall_0() { return cPrimaryExprStuffParserRuleCall_0; }
		
		//primaryExprSlice
		public RuleCall getPrimaryExprSliceParserRuleCall_1() { return cPrimaryExprSliceParserRuleCall_1; }
	}
	public class PrimaryExprTypeAssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.primaryExprTypeAssertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExprStuffParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPrimaryExprTypeAssertionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//primaryExprTypeAssertion:
		//	(primaryExprStuff primaryExprTypeAssertion)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(primaryExprStuff primaryExprTypeAssertion)?
		public Group getGroup() { return cGroup; }
		
		//primaryExprStuff
		public RuleCall getPrimaryExprStuffParserRuleCall_0() { return cPrimaryExprStuffParserRuleCall_0; }
		
		//primaryExprTypeAssertion
		public RuleCall getPrimaryExprTypeAssertionParserRuleCall_1() { return cPrimaryExprTypeAssertionParserRuleCall_1; }
	}
	public class PrimaryExprArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.primaryExprArguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExprStuffParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPrimaryExprArgumentsParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//primaryExprArguments:
		//	(primaryExprStuff primaryExprArguments)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(primaryExprStuff primaryExprArguments)?
		public Group getGroup() { return cGroup; }
		
		//primaryExprStuff
		public RuleCall getPrimaryExprStuffParserRuleCall_0() { return cPrimaryExprStuffParserRuleCall_0; }
		
		//primaryExprArguments
		public RuleCall getPrimaryExprArgumentsParserRuleCall_1() { return cPrimaryExprArgumentsParserRuleCall_1; }
	}
	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.selector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//////
		//selector:
		//	'.' IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//'.' IDENTIFIER
		public Group getGroup() { return cGroup; }
		
		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1() { return cIDENTIFIERTerminalRuleCall_1; }
	}
	public class IndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.index");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//index:
		//	'[' expression ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' expression ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class SliceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.slice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_1_0_2 = (RuleCall)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		private final Keyword cColonKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final RuleCall cExpressionParserRuleCall_1_1_4 = (RuleCall)cGroup_1_1.eContents().get(4);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//slice:
		//	'[' (expression? ':' expression? | expression? ':' expression ':' expression) ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' (expression? ':' expression? | expression? ':' expression ':' expression) ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//expression? ':' expression? | expression? ':' expression ':' expression
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//expression? ':' expression?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//expression?
		public RuleCall getExpressionParserRuleCall_1_0_0() { return cExpressionParserRuleCall_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_0_1() { return cColonKeyword_1_0_1; }
		
		//expression?
		public RuleCall getExpressionParserRuleCall_1_0_2() { return cExpressionParserRuleCall_1_0_2; }
		
		//expression? ':' expression ':' expression
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//expression?
		public RuleCall getExpressionParserRuleCall_1_1_0() { return cExpressionParserRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_1_1() { return cColonKeyword_1_1_1; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_1_1_2() { return cExpressionParserRuleCall_1_1_2; }
		
		//':'
		public Keyword getColonKeyword_1_1_3() { return cColonKeyword_1_1_3; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_1_1_4() { return cExpressionParserRuleCall_1_1_4; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class TypeAssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.typeAssertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//typeAssertion:
		//	'.' '(' type ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'.' '(' type ')'
		public Group getGroup() { return cGroup; }
		
		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.arguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionListParserRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_1_0_1_0 = (RuleCall)cGroup_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_1_1 = (Group)cGroup_1_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_1_1_0 = (Keyword)cGroup_1_0_1_1.eContents().get(0);
		private final RuleCall cExpressionListParserRuleCall_1_0_1_1_1 = (RuleCall)cGroup_1_0_1_1.eContents().get(1);
		private final Keyword cFullStopFullStopFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//arguments:
		//	'(' ((expressionList | type (',' expressionList)?) '...'? ','?)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' ((expressionList | type (',' expressionList)?) '...'? ','?)? ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//((expressionList | type (',' expressionList)?) '...'? ','?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//expressionList | type (',' expressionList)?
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//expressionList
		public RuleCall getExpressionListParserRuleCall_1_0_0() { return cExpressionListParserRuleCall_1_0_0; }
		
		//type (',' expressionList)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//type
		public RuleCall getTypeParserRuleCall_1_0_1_0() { return cTypeParserRuleCall_1_0_1_0; }
		
		//(',' expressionList)?
		public Group getGroup_1_0_1_1() { return cGroup_1_0_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_0_1_1_0() { return cCommaKeyword_1_0_1_1_0; }
		
		//expressionList
		public RuleCall getExpressionListParserRuleCall_1_0_1_1_1() { return cExpressionListParserRuleCall_1_0_1_1_1; }
		
		//'...'?
		public Keyword getFullStopFullStopFullStopKeyword_1_1() { return cFullStopFullStopFullStopKeyword_1_1; }
		
		//','?
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class MethodExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.methodExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cReceiverTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		////MethodExpr    = ReceiverType "." MethodName .
		////ReceiverType  = TypeName | "(" "*" TypeName ")" | "(" ReceiverType ")" .
		//methodExpr:
		//	receiverType '.' IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//receiverType '.' IDENTIFIER
		public Group getGroup() { return cGroup; }
		
		//receiverType
		public RuleCall getReceiverTypeParserRuleCall_0() { return cReceiverTypeParserRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_2() { return cIDENTIFIERTerminalRuleCall_2; }
	}
	public class ReceiverTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.receiverType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cTypeNameParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cReceiverTypeParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//receiverType:
		//	typeName
		//	| '(' '*' typeName ')'
		//	| '(' receiverType ')';
		@Override public ParserRule getRule() { return rule; }
		
		//typeName | '(' '*' typeName ')' | '(' receiverType ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//typeName
		public RuleCall getTypeNameParserRuleCall_0() { return cTypeNameParserRuleCall_0; }
		
		//'(' '*' typeName ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
		
		//typeName
		public RuleCall getTypeNameParserRuleCall_1_2() { return cTypeNameParserRuleCall_1_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//'(' receiverType ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//receiverType
		public RuleCall getReceiverTypeParserRuleCall_2_1() { return cReceiverTypeParserRuleCall_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cExpressionMatchedParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////Expression = UnaryExpr | Expression binary_op Expression .
		////UnaryExpr  = PrimaryExpr | unary_op UnaryExpr .
		//expression:
		//	unaryExpr
		//	//  | expression BINARY_OP expression
		//	expressionMatched;
		@Override public ParserRule getRule() { return rule; }
		
		//unaryExpr //  | expression BINARY_OP expression
		//expressionMatched
		public Group getGroup() { return cGroup; }
		
		//unaryExpr
		public RuleCall getUnaryExprParserRuleCall_0() { return cUnaryExprParserRuleCall_0; }
		
		////  | expression BINARY_OP expression
		//expressionMatched
		public RuleCall getExpressionMatchedParserRuleCall_1() { return cExpressionMatchedParserRuleCall_1; }
	}
	public class ExpressionMatchedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.expressionMatched");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBINARY_OPTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////// attempt to remove left recursion of rule expression
		//expressionMatched:
		//	(BINARY_OP expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(BINARY_OP expression)?
		public Group getGroup() { return cGroup; }
		
		//BINARY_OP
		public RuleCall getBINARY_OPTerminalRuleCall_0() { return cBINARY_OPTerminalRuleCall_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}
	public class UnaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.unaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1_0_2 = (Keyword)cAlternatives_1_0.eContents().get(2);
		private final Keyword cCircumflexAccentKeyword_1_0_3 = (Keyword)cAlternatives_1_0.eContents().get(3);
		private final Keyword cAsteriskKeyword_1_0_4 = (Keyword)cAlternatives_1_0.eContents().get(4);
		private final Keyword cAmpersandKeyword_1_0_5 = (Keyword)cAlternatives_1_0.eContents().get(5);
		private final Keyword cLessThanSignHyphenMinusKeyword_1_0_6 = (Keyword)cAlternatives_1_0.eContents().get(6);
		private final RuleCall cUnaryExprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//////
		//unaryExpr:
		//	primaryExpr | ('+' | '-' | '!' | '^' | '*' | '&' | '<-') unaryExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//primaryExpr | ('+' | '-' | '!' | '^' | '*' | '&' | '<-') unaryExpr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//primaryExpr
		public RuleCall getPrimaryExprParserRuleCall_0() { return cPrimaryExprParserRuleCall_0; }
		
		//('+' | '-' | '!' | '^' | '*' | '&' | '<-') unaryExpr
		public Group getGroup_1() { return cGroup_1; }
		
		//'+' | '-' | '!' | '^' | '*' | '&' | '<-'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0() { return cPlusSignKeyword_1_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1() { return cHyphenMinusKeyword_1_0_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1_0_2() { return cExclamationMarkKeyword_1_0_2; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_1_0_3() { return cCircumflexAccentKeyword_1_0_3; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_4() { return cAsteriskKeyword_1_0_4; }
		
		//'&'
		public Keyword getAmpersandKeyword_1_0_5() { return cAmpersandKeyword_1_0_5; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_1_0_6() { return cLessThanSignHyphenMinusKeyword_1_0_6; }
		
		//unaryExpr
		public RuleCall getUnaryExprParserRuleCall_1_1() { return cUnaryExprParserRuleCall_1_1; }
	}
	public class ConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.conversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////Conversion = Type "(" Expression [ "," ] ")" .
		//conversion:
		//	type '(' expression ','? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//type '(' expression ','? ')'
		public Group getGroup() { return cGroup; }
		
		//type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }
		
		//','?
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	
	
	private final ModelElements pModel;
	private final SourceFileElements pSourceFile;
	private final PackageClauseElements pPackageClause;
	private final ImportDeclElements pImportDecl;
	private final ImportSpecElements pImportSpec;
	private final ImportPathElements pImportPath;
	private final TopLevelDeclElements pTopLevelDecl;
	private final DeclarationElements pDeclaration;
	private final ConstDeclElements pConstDecl;
	private final ConstSpecElements pConstSpec;
	private final IdentifierListElements pIdentifierList;
	private final ExpressionListElements pExpressionList;
	private final TypeDeclElements pTypeDecl;
	private final TypeSpecElements pTypeSpec;
	private final FunctionDeclElements pFunctionDecl;
	private final FunctionElements pFunction;
	private final MethodDeclElements pMethodDecl;
	private final ReceiverElements pReceiver;
	private final VarDeclElements pVarDecl;
	private final VarSpecElements pVarSpec;
	private final BlockElements pBlock;
	private final StatementListElements pStatementList;
	private final StatementElements pStatement;
	private final SimpleStmtElements pSimpleStmt;
	private final ExpressionStmtElements pExpressionStmt;
	private final SendStmtElements pSendStmt;
	private final IncDecStmtElements pIncDecStmt;
	private final AssignmentElements pAssignment;
	private final Assign_opElements pAssign_op;
	private final ShortVarDeclElements pShortVarDecl;
	private final EmptyStmtElements pEmptyStmt;
	private final LabeledStmtElements pLabeledStmt;
	private final ReturnStmtElements pReturnStmt;
	private final BreakStmtElements pBreakStmt;
	private final ContinueStmtElements pContinueStmt;
	private final GotoStmtElements pGotoStmt;
	private final FallthroughStmtElements pFallthroughStmt;
	private final DeferStmtElements pDeferStmt;
	private final IfStmtElements pIfStmt;
	private final SwitchStmtElements pSwitchStmt;
	private final ExprSwitchStmtElements pExprSwitchStmt;
	private final ExprCaseClauseElements pExprCaseClause;
	private final ExprSwitchCaseElements pExprSwitchCase;
	private final TypeSwitchStmtElements pTypeSwitchStmt;
	private final TypeSwitchGuardElements pTypeSwitchGuard;
	private final TypeCaseClauseElements pTypeCaseClause;
	private final TypeSwitchCaseElements pTypeSwitchCase;
	private final TypeListElements pTypeList;
	private final SelectStmtElements pSelectStmt;
	private final CommClauseElements pCommClause;
	private final CommCaseElements pCommCase;
	private final RecvStmtElements pRecvStmt;
	private final ForStmtElements pForStmt;
	private final ForClauseElements pForClause;
	private final RangeClauseElements pRangeClause;
	private final GoStmtElements pGoStmt;
	private final TypeElements pType;
	private final TypeNameElements pTypeName;
	private final TypeLitElements pTypeLit;
	private final ArrayTypeElements pArrayType;
	private final ArrayLengthElements pArrayLength;
	private final ElementTypeElements pElementType;
	private final PointerTypeElements pPointerType;
	private final InterfaceTypeElements pInterfaceType;
	private final SliceTypeElements pSliceType;
	private final MapTypeElements pMapType;
	private final ChannelTypeElements pChannelType;
	private final MethodSpecElements pMethodSpec;
	private final FunctionTypeElements pFunctionType;
	private final SignatureElements pSignature;
	private final ResultElements pResult;
	private final ParametersElements pParameters;
	private final ParameterListElements pParameterList;
	private final ParameterDeclElements pParameterDecl;
	private final OperandElements pOperand;
	private final LiteralElements pLiteral;
	private final BasicLitElements pBasicLit;
	private final OperandNameElements pOperandName;
	private final QualifiedIdentElements pQualifiedIdent;
	private final CompositeLitElements pCompositeLit;
	private final LiteralTypeElements pLiteralType;
	private final LiteralValueElements pLiteralValue;
	private final ElementListElements pElementList;
	private final KeyedElementElements pKeyedElement;
	private final KeyElements pKey;
	private final ElementElements pElement;
	private final StructTypeElements pStructType;
	private final FieldDeclElements pFieldDecl;
	private final AnonymousFieldElements pAnonymousField;
	private final FunctionLitElements pFunctionLit;
	private final PrimaryExprElements pPrimaryExpr;
	private final PrimaryExprStuffElements pPrimaryExprStuff;
	private final PrimaryExprSelectorElements pPrimaryExprSelector;
	private final PrimaryExprIndexElements pPrimaryExprIndex;
	private final PrimaryExprSliceElements pPrimaryExprSlice;
	private final PrimaryExprTypeAssertionElements pPrimaryExprTypeAssertion;
	private final PrimaryExprArgumentsElements pPrimaryExprArguments;
	private final SelectorElements pSelector;
	private final IndexElements pIndex;
	private final SliceElements pSlice;
	private final TypeAssertionElements pTypeAssertion;
	private final ArgumentsElements pArguments;
	private final MethodExprElements pMethodExpr;
	private final ReceiverTypeElements pReceiverType;
	private final ExpressionElements pExpression;
	private final ExpressionMatchedElements pExpressionMatched;
	private final UnaryExprElements pUnaryExpr;
	private final ConversionElements pConversion;
	private final TerminalRule tIDENTIFIER;
	private final TerminalRule tBINARY_OP;
	private final TerminalRule tREL_OP;
	private final TerminalRule tADD_OP;
	private final TerminalRule tMUL_OP;
	private final TerminalRule tUNARY_OP;
	private final TerminalRule tINT_LIT;
	private final TerminalRule tDECIMAL_LIT;
	private final TerminalRule tOCTAL_LIT;
	private final TerminalRule tHEX_LIT;
	private final TerminalRule tFLOAT_LIT;
	private final TerminalRule tDECIMALS;
	private final TerminalRule tEXPONENT;
	private final TerminalRule tIMAGINARY_LIT;
	private final TerminalRule tRUNE_LIT;
	private final TerminalRule tUNICODE_VALUE;
	private final TerminalRule tBYTE_VALUE;
	private final TerminalRule tOCTAL_BYTE_VALUE;
	private final TerminalRule tHEX_BYTE_VALUE;
	private final TerminalRule tLITTLE_U_VALUE;
	private final TerminalRule tBIG_U_VALUE;
	private final TerminalRule tESCAPED_CHAR;
	private final TerminalRule tSTRING_LIT;
	private final TerminalRule tRAW_STRING_LIT;
	private final TerminalRule tINTERPRETED_STRING_LIT;
	private final TerminalRule tLETTER;
	private final TerminalRule tDECIMAL_DIGIT;
	private final TerminalRule tOCTAL_DIGIT;
	private final TerminalRule tHEX_DIGIT;
	private final TerminalRule tNEWLINE;
	private final TerminalRule tUNICODE_CHAR;
	private final TerminalRule tUNICODE_DIGIT;
	private final TerminalRule tUNICODE_LETTER;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GoGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pSourceFile = new SourceFileElements();
		this.pPackageClause = new PackageClauseElements();
		this.pImportDecl = new ImportDeclElements();
		this.pImportSpec = new ImportSpecElements();
		this.pImportPath = new ImportPathElements();
		this.pTopLevelDecl = new TopLevelDeclElements();
		this.pDeclaration = new DeclarationElements();
		this.pConstDecl = new ConstDeclElements();
		this.pConstSpec = new ConstSpecElements();
		this.pIdentifierList = new IdentifierListElements();
		this.pExpressionList = new ExpressionListElements();
		this.pTypeDecl = new TypeDeclElements();
		this.pTypeSpec = new TypeSpecElements();
		this.pFunctionDecl = new FunctionDeclElements();
		this.pFunction = new FunctionElements();
		this.pMethodDecl = new MethodDeclElements();
		this.pReceiver = new ReceiverElements();
		this.pVarDecl = new VarDeclElements();
		this.pVarSpec = new VarSpecElements();
		this.pBlock = new BlockElements();
		this.pStatementList = new StatementListElements();
		this.pStatement = new StatementElements();
		this.pSimpleStmt = new SimpleStmtElements();
		this.pExpressionStmt = new ExpressionStmtElements();
		this.pSendStmt = new SendStmtElements();
		this.pIncDecStmt = new IncDecStmtElements();
		this.pAssignment = new AssignmentElements();
		this.pAssign_op = new Assign_opElements();
		this.pShortVarDecl = new ShortVarDeclElements();
		this.pEmptyStmt = new EmptyStmtElements();
		this.pLabeledStmt = new LabeledStmtElements();
		this.pReturnStmt = new ReturnStmtElements();
		this.pBreakStmt = new BreakStmtElements();
		this.pContinueStmt = new ContinueStmtElements();
		this.pGotoStmt = new GotoStmtElements();
		this.pFallthroughStmt = new FallthroughStmtElements();
		this.pDeferStmt = new DeferStmtElements();
		this.pIfStmt = new IfStmtElements();
		this.pSwitchStmt = new SwitchStmtElements();
		this.pExprSwitchStmt = new ExprSwitchStmtElements();
		this.pExprCaseClause = new ExprCaseClauseElements();
		this.pExprSwitchCase = new ExprSwitchCaseElements();
		this.pTypeSwitchStmt = new TypeSwitchStmtElements();
		this.pTypeSwitchGuard = new TypeSwitchGuardElements();
		this.pTypeCaseClause = new TypeCaseClauseElements();
		this.pTypeSwitchCase = new TypeSwitchCaseElements();
		this.pTypeList = new TypeListElements();
		this.pSelectStmt = new SelectStmtElements();
		this.pCommClause = new CommClauseElements();
		this.pCommCase = new CommCaseElements();
		this.pRecvStmt = new RecvStmtElements();
		this.pForStmt = new ForStmtElements();
		this.pForClause = new ForClauseElements();
		this.pRangeClause = new RangeClauseElements();
		this.pGoStmt = new GoStmtElements();
		this.pType = new TypeElements();
		this.pTypeName = new TypeNameElements();
		this.pTypeLit = new TypeLitElements();
		this.pArrayType = new ArrayTypeElements();
		this.pArrayLength = new ArrayLengthElements();
		this.pElementType = new ElementTypeElements();
		this.pPointerType = new PointerTypeElements();
		this.pInterfaceType = new InterfaceTypeElements();
		this.pSliceType = new SliceTypeElements();
		this.pMapType = new MapTypeElements();
		this.pChannelType = new ChannelTypeElements();
		this.pMethodSpec = new MethodSpecElements();
		this.pFunctionType = new FunctionTypeElements();
		this.pSignature = new SignatureElements();
		this.pResult = new ResultElements();
		this.pParameters = new ParametersElements();
		this.pParameterList = new ParameterListElements();
		this.pParameterDecl = new ParameterDeclElements();
		this.pOperand = new OperandElements();
		this.pLiteral = new LiteralElements();
		this.pBasicLit = new BasicLitElements();
		this.pOperandName = new OperandNameElements();
		this.pQualifiedIdent = new QualifiedIdentElements();
		this.pCompositeLit = new CompositeLitElements();
		this.pLiteralType = new LiteralTypeElements();
		this.pLiteralValue = new LiteralValueElements();
		this.pElementList = new ElementListElements();
		this.pKeyedElement = new KeyedElementElements();
		this.pKey = new KeyElements();
		this.pElement = new ElementElements();
		this.pStructType = new StructTypeElements();
		this.pFieldDecl = new FieldDeclElements();
		this.pAnonymousField = new AnonymousFieldElements();
		this.pFunctionLit = new FunctionLitElements();
		this.pPrimaryExpr = new PrimaryExprElements();
		this.pPrimaryExprStuff = new PrimaryExprStuffElements();
		this.pPrimaryExprSelector = new PrimaryExprSelectorElements();
		this.pPrimaryExprIndex = new PrimaryExprIndexElements();
		this.pPrimaryExprSlice = new PrimaryExprSliceElements();
		this.pPrimaryExprTypeAssertion = new PrimaryExprTypeAssertionElements();
		this.pPrimaryExprArguments = new PrimaryExprArgumentsElements();
		this.pSelector = new SelectorElements();
		this.pIndex = new IndexElements();
		this.pSlice = new SliceElements();
		this.pTypeAssertion = new TypeAssertionElements();
		this.pArguments = new ArgumentsElements();
		this.pMethodExpr = new MethodExprElements();
		this.pReceiverType = new ReceiverTypeElements();
		this.pExpression = new ExpressionElements();
		this.pExpressionMatched = new ExpressionMatchedElements();
		this.pUnaryExpr = new UnaryExprElements();
		this.pConversion = new ConversionElements();
		this.tIDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.IDENTIFIER");
		this.tBINARY_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.BINARY_OP");
		this.tREL_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.REL_OP");
		this.tADD_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.ADD_OP");
		this.tMUL_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.MUL_OP");
		this.tUNARY_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.UNARY_OP");
		this.tINT_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.INT_LIT");
		this.tDECIMAL_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.DECIMAL_LIT");
		this.tOCTAL_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.OCTAL_LIT");
		this.tHEX_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.HEX_LIT");
		this.tFLOAT_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.FLOAT_LIT");
		this.tDECIMALS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.DECIMALS");
		this.tEXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.EXPONENT");
		this.tIMAGINARY_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.IMAGINARY_LIT");
		this.tRUNE_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.RUNE_LIT");
		this.tUNICODE_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.UNICODE_VALUE");
		this.tBYTE_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.BYTE_VALUE");
		this.tOCTAL_BYTE_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.OCTAL_BYTE_VALUE");
		this.tHEX_BYTE_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.HEX_BYTE_VALUE");
		this.tLITTLE_U_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.LITTLE_U_VALUE");
		this.tBIG_U_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.BIG_U_VALUE");
		this.tESCAPED_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.ESCAPED_CHAR");
		this.tSTRING_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.STRING_LIT");
		this.tRAW_STRING_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.RAW_STRING_LIT");
		this.tINTERPRETED_STRING_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.INTERPRETED_STRING_LIT");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.LETTER");
		this.tDECIMAL_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.DECIMAL_DIGIT");
		this.tOCTAL_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.OCTAL_DIGIT");
		this.tHEX_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.HEX_DIGIT");
		this.tNEWLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.NEWLINE");
		this.tUNICODE_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.UNICODE_CHAR");
		this.tUNICODE_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.UNICODE_DIGIT");
		this.tUNICODE_LETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Go.UNICODE_LETTER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.Go".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	greetings+=sourceFile;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	////SourceFile       = PackageClause ";" { ImportDecl ";" } { TopLevelDecl ";" } .
	//sourceFile:
	//	packageClause=packageClause (importDecl ';')* (topLevelDecl ';')*;
	public SourceFileElements getSourceFileAccess() {
		return pSourceFile;
	}
	
	public ParserRule getSourceFileRule() {
		return getSourceFileAccess().getRule();
	}
	
	////PackageClause  = "package" PackageName .
	////PackageName    = identifier .
	//packageClause:
	//	'package' IDENTIFIER;
	public PackageClauseElements getPackageClauseAccess() {
		return pPackageClause;
	}
	
	public ParserRule getPackageClauseRule() {
		return getPackageClauseAccess().getRule();
	}
	
	//importDecl:
	//	'import' (importSpec | '(' importSpec //';'
	//* ')');
	public ImportDeclElements getImportDeclAccess() {
		return pImportDecl;
	}
	
	public ParserRule getImportDeclRule() {
		return getImportDeclAccess().getRule();
	}
	
	//importSpec:
	//	('.' | IDENTIFIER)? importPath;
	public ImportSpecElements getImportSpecAccess() {
		return pImportSpec;
	}
	
	public ParserRule getImportSpecRule() {
		return getImportSpecAccess().getRule();
	}
	
	//importPath:
	//	STRING_LIT;
	public ImportPathElements getImportPathAccess() {
		return pImportPath;
	}
	
	public ParserRule getImportPathRule() {
		return getImportPathAccess().getRule();
	}
	
	////TopLevelDecl  = Declaration | FunctionDecl | MethodDecl .
	//topLevelDecl:
	//	declaration
	//	| functionDecl
	//	| methodDecl;
	public TopLevelDeclElements getTopLevelDeclAccess() {
		return pTopLevelDecl;
	}
	
	public ParserRule getTopLevelDeclRule() {
		return getTopLevelDeclAccess().getRule();
	}
	
	////Declaration   = ConstDecl | TypeDecl | VarDecl .
	//declaration:
	//	constDecl
	//	| typeDecl
	//	| varDecl;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	////ConstDecl      = "const" ( ConstSpec | "(" { ConstSpec ";" } ")" ) .
	//constDecl:
	//	'const' (constSpec | '(' (constSpec ';')* ')');
	public ConstDeclElements getConstDeclAccess() {
		return pConstDecl;
	}
	
	public ParserRule getConstDeclRule() {
		return getConstDeclAccess().getRule();
	}
	
	////ConstSpec      = IdentifierList [ [ Type ] "=" ExpressionList ] .
	//constSpec:
	//	identifierList (type? '=' expressionList)?;
	public ConstSpecElements getConstSpecAccess() {
		return pConstSpec;
	}
	
	public ParserRule getConstSpecRule() {
		return getConstSpecAccess().getRule();
	}
	
	////
	////IdentifierList = identifier { "," identifier } .
	//identifierList:
	//	IDENTIFIER (',' IDENTIFIER)*;
	public IdentifierListElements getIdentifierListAccess() {
		return pIdentifierList;
	}
	
	public ParserRule getIdentifierListRule() {
		return getIdentifierListAccess().getRule();
	}
	
	////ExpressionList = Expression { "," Expression } .
	//expressionList:
	//	expression (',' expression)*;
	public ExpressionListElements getExpressionListAccess() {
		return pExpressionList;
	}
	
	public ParserRule getExpressionListRule() {
		return getExpressionListAccess().getRule();
	}
	
	////TypeDecl     = "type" ( TypeSpec | "(" { TypeSpec ";" } ")" ) .
	//typeDecl:
	//	'type' (typeSpec | '(' (typeSpec ';')* ')');
	public TypeDeclElements getTypeDeclAccess() {
		return pTypeDecl;
	}
	
	public ParserRule getTypeDeclRule() {
		return getTypeDeclAccess().getRule();
	}
	
	////TypeSpec     = identifier Type .
	//typeSpec:
	//	IDENTIFIER type;
	public TypeSpecElements getTypeSpecAccess() {
		return pTypeSpec;
	}
	
	public ParserRule getTypeSpecRule() {
		return getTypeSpecAccess().getRule();
	}
	
	//// Function declarations
	////FunctionDecl = "func" FunctionName ( Function | Signature ) .
	////FunctionName = identifier .
	////Function     = Signature FunctionBody .
	////FunctionBody = Block .
	//functionDecl:
	//	'func' IDENTIFIER (function | signature);
	public FunctionDeclElements getFunctionDeclAccess() {
		return pFunctionDecl;
	}
	
	public ParserRule getFunctionDeclRule() {
		return getFunctionDeclAccess().getRule();
	}
	
	//function:
	//	signature block;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	////MethodDecl   = "func" Receiver MethodName ( Function | Signature ) .
	////Receiver     = Parameters .
	//methodDecl:
	//	'func' receiver IDENTIFIER (function | signature);
	public MethodDeclElements getMethodDeclAccess() {
		return pMethodDecl;
	}
	
	public ParserRule getMethodDeclRule() {
		return getMethodDeclAccess().getRule();
	}
	
	//receiver:
	//	parameters;
	public ReceiverElements getReceiverAccess() {
		return pReceiver;
	}
	
	public ParserRule getReceiverRule() {
		return getReceiverAccess().getRule();
	}
	
	////VarDecl     = "var" ( VarSpec | "(" { VarSpec ";" } ")" ) .
	////VarSpec     = IdentifierList ( Type [ "=" ExpressionList ] | "=" ExpressionList ) .
	//varDecl:
	//	'var' (varSpec | '(' (varSpec ';')* ')');
	public VarDeclElements getVarDeclAccess() {
		return pVarDecl;
	}
	
	public ParserRule getVarDeclRule() {
		return getVarDeclAccess().getRule();
	}
	
	//varSpec:
	//	identifierList (type ('=' expressionList)? | '=' expressionList);
	public VarSpecElements getVarSpecAccess() {
		return pVarSpec;
	}
	
	public ParserRule getVarSpecRule() {
		return getVarSpecAccess().getRule();
	}
	
	////Block = "{" StatementList "}" .
	//block:
	//	'{' statementList '}';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	////StatementList = { Statement ";" } .
	//statementList:
	//	(statement ';')*;
	public StatementListElements getStatementListAccess() {
		return pStatementList;
	}
	
	public ParserRule getStatementListRule() {
		return getStatementListAccess().getRule();
	}
	
	//statement:
	//	declaration
	//	| labeledStmt
	//	| simpleStmt
	//	| goStmt
	//	| returnStmt
	//	| breakStmt
	//	| continueStmt
	//	| gotoStmt
	//	| fallthroughStmt
	//	| block
	//	| ifStmt
	//	| switchStmt
	//	| selectStmt
	//	| forStmt
	//	| deferStmt;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	////SimpleStmt = EmptyStmt | ExpressionStmt | SendStmt | IncDecStmt | Assignment | ShortVarDecl .
	//simpleStmt:
	//	sendStmt
	//	| expressionStmt
	//	| incDecStmt
	//	| assignment
	//	| shortVarDecl
	//	| emptyStmt;
	public SimpleStmtElements getSimpleStmtAccess() {
		return pSimpleStmt;
	}
	
	public ParserRule getSimpleStmtRule() {
		return getSimpleStmtAccess().getRule();
	}
	
	////ExpressionStmt = Expression .
	//expressionStmt:
	//	expression;
	public ExpressionStmtElements getExpressionStmtAccess() {
		return pExpressionStmt;
	}
	
	public ParserRule getExpressionStmtRule() {
		return getExpressionStmtAccess().getRule();
	}
	
	////SendStmt = Channel "<-" Expression .
	////Channel  = Expression .
	//sendStmt:
	//	expression '<-' expression;
	public SendStmtElements getSendStmtAccess() {
		return pSendStmt;
	}
	
	public ParserRule getSendStmtRule() {
		return getSendStmtAccess().getRule();
	}
	
	////IncDecStmt = Expression ( "++" | "--" ) .
	//incDecStmt:
	//	expression ('++' | '--');
	public IncDecStmtElements getIncDecStmtAccess() {
		return pIncDecStmt;
	}
	
	public ParserRule getIncDecStmtRule() {
		return getIncDecStmtAccess().getRule();
	}
	
	////Assignment = ExpressionList assign_op ExpressionList .
	//assignment:
	//	expressionList assign_op expressionList;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	////assign_op = [ add_op | mul_op ] "=" .
	//assign_op:
	//	('+' | '-' | '|' | '^' | '*' | '/' | '%' | '<<' | '>>' | '&' | '&^')? '=';
	public Assign_opElements getAssign_opAccess() {
		return pAssign_op;
	}
	
	public ParserRule getAssign_opRule() {
		return getAssign_opAccess().getRule();
	}
	
	////ShortVarDecl = IdentifierList ":=" ExpressionList .
	//shortVarDecl:
	//	identifierList ':=' expressionList;
	public ShortVarDeclElements getShortVarDeclAccess() {
		return pShortVarDecl;
	}
	
	public ParserRule getShortVarDeclRule() {
		return getShortVarDeclAccess().getRule();
	}
	
	//emptyStmt:
	//	WS;
	public EmptyStmtElements getEmptyStmtAccess() {
		return pEmptyStmt;
	}
	
	public ParserRule getEmptyStmtRule() {
		return getEmptyStmtAccess().getRule();
	}
	
	////LabeledStmt = Label ":" Statement .
	////Label       = identifier .
	//labeledStmt:
	//	IDENTIFIER ':' statement;
	public LabeledStmtElements getLabeledStmtAccess() {
		return pLabeledStmt;
	}
	
	public ParserRule getLabeledStmtRule() {
		return getLabeledStmtAccess().getRule();
	}
	
	////ReturnStmt = "return" [ ExpressionList ] .
	//returnStmt:
	//	'return' expressionList?;
	public ReturnStmtElements getReturnStmtAccess() {
		return pReturnStmt;
	}
	
	public ParserRule getReturnStmtRule() {
		return getReturnStmtAccess().getRule();
	}
	
	////BreakStmt = "break" [ Label ] .
	//breakStmt:
	//	'break' IDENTIFIER?;
	public BreakStmtElements getBreakStmtAccess() {
		return pBreakStmt;
	}
	
	public ParserRule getBreakStmtRule() {
		return getBreakStmtAccess().getRule();
	}
	
	////ContinueStmt = "continue" [ Label ] .
	//continueStmt:
	//	'continue' IDENTIFIER?;
	public ContinueStmtElements getContinueStmtAccess() {
		return pContinueStmt;
	}
	
	public ParserRule getContinueStmtRule() {
		return getContinueStmtAccess().getRule();
	}
	
	////GotoStmt = "goto" Label .
	//gotoStmt:
	//	'goto' IDENTIFIER;
	public GotoStmtElements getGotoStmtAccess() {
		return pGotoStmt;
	}
	
	public ParserRule getGotoStmtRule() {
		return getGotoStmtAccess().getRule();
	}
	
	////FallthroughStmt = "fallthrough" .
	//fallthroughStmt:
	//	'fallthrough';
	public FallthroughStmtElements getFallthroughStmtAccess() {
		return pFallthroughStmt;
	}
	
	public ParserRule getFallthroughStmtRule() {
		return getFallthroughStmtAccess().getRule();
	}
	
	////DeferStmt = "defer" Expression .
	//deferStmt:
	//	'defer' expression;
	public DeferStmtElements getDeferStmtAccess() {
		return pDeferStmt;
	}
	
	public ParserRule getDeferStmtRule() {
		return getDeferStmtAccess().getRule();
	}
	
	////IfStmt = "if" [ SimpleStmt ";" ] Expression Block [ "else" ( IfStmt | Block ) ] .
	//ifStmt:
	//	'if' (simpleStmt ';')? expression block ('else' (ifStmt | block))?;
	public IfStmtElements getIfStmtAccess() {
		return pIfStmt;
	}
	
	public ParserRule getIfStmtRule() {
		return getIfStmtAccess().getRule();
	}
	
	////SwitchStmt = ExprSwitchStmt | TypeSwitchStmt .
	//switchStmt:
	//	exprSwitchStmt | typeSwitchStmt;
	public SwitchStmtElements getSwitchStmtAccess() {
		return pSwitchStmt;
	}
	
	public ParserRule getSwitchStmtRule() {
		return getSwitchStmtAccess().getRule();
	}
	
	////ExprSwitchStmt = "switch" [ SimpleStmt ";" ] [ Expression ] "{" { ExprCaseClause } "}" .
	////ExprCaseClause = ExprSwitchCase ":" StatementList .
	////ExprSwitchCase = "case" ExpressionList | "default" .
	//exprSwitchStmt:
	//	'switch' (simpleStmt ';')? expression? '{' exprCaseClause* '}';
	public ExprSwitchStmtElements getExprSwitchStmtAccess() {
		return pExprSwitchStmt;
	}
	
	public ParserRule getExprSwitchStmtRule() {
		return getExprSwitchStmtAccess().getRule();
	}
	
	//exprCaseClause:
	//	exprSwitchCase ':' statementList;
	public ExprCaseClauseElements getExprCaseClauseAccess() {
		return pExprCaseClause;
	}
	
	public ParserRule getExprCaseClauseRule() {
		return getExprCaseClauseAccess().getRule();
	}
	
	//exprSwitchCase:
	//	'case' expressionList | 'default';
	public ExprSwitchCaseElements getExprSwitchCaseAccess() {
		return pExprSwitchCase;
	}
	
	public ParserRule getExprSwitchCaseRule() {
		return getExprSwitchCaseAccess().getRule();
	}
	
	////TypeSwitchStmt  = "switch" [ SimpleStmt ";" ] TypeSwitchGuard "{" { TypeCaseClause } "}" .
	////TypeSwitchGuard = [ identifier ":=" ] PrimaryExpr "." "(" "type" ")" .
	////TypeCaseClause  = TypeSwitchCase ":" StatementList .
	////TypeSwitchCase  = "case" TypeList | "default" .
	////TypeList        = Type { "," Type } .
	//typeSwitchStmt:
	//	'switch' (simpleStmt ';')? typeSwitchGuard '{' typeCaseClause* '}';
	public TypeSwitchStmtElements getTypeSwitchStmtAccess() {
		return pTypeSwitchStmt;
	}
	
	public ParserRule getTypeSwitchStmtRule() {
		return getTypeSwitchStmtAccess().getRule();
	}
	
	//typeSwitchGuard:
	//	(IDENTIFIER ':=')? primaryExpr '.' '(' 'type' ')';
	public TypeSwitchGuardElements getTypeSwitchGuardAccess() {
		return pTypeSwitchGuard;
	}
	
	public ParserRule getTypeSwitchGuardRule() {
		return getTypeSwitchGuardAccess().getRule();
	}
	
	//typeCaseClause:
	//	typeSwitchCase ':' statementList;
	public TypeCaseClauseElements getTypeCaseClauseAccess() {
		return pTypeCaseClause;
	}
	
	public ParserRule getTypeCaseClauseRule() {
		return getTypeCaseClauseAccess().getRule();
	}
	
	//typeSwitchCase:
	//	'case' typeList | 'default';
	public TypeSwitchCaseElements getTypeSwitchCaseAccess() {
		return pTypeSwitchCase;
	}
	
	public ParserRule getTypeSwitchCaseRule() {
		return getTypeSwitchCaseAccess().getRule();
	}
	
	//typeList:
	//	type (',' type)*;
	public TypeListElements getTypeListAccess() {
		return pTypeList;
	}
	
	public ParserRule getTypeListRule() {
		return getTypeListAccess().getRule();
	}
	
	////SelectStmt = "select" "{" { CommClause } "}" .
	////CommClause = CommCase ":" StatementList .
	////CommCase   = "case" ( SendStmt | RecvStmt ) | "default" .
	////RecvStmt   = [ ExpressionList "=" | IdentifierList ":=" ] RecvExpr .
	////RecvExpr   = Expression .
	//selectStmt:
	//	'select' '{' commClause* '}';
	public SelectStmtElements getSelectStmtAccess() {
		return pSelectStmt;
	}
	
	public ParserRule getSelectStmtRule() {
		return getSelectStmtAccess().getRule();
	}
	
	//commClause:
	//	commCase ':' statementList;
	public CommClauseElements getCommClauseAccess() {
		return pCommClause;
	}
	
	public ParserRule getCommClauseRule() {
		return getCommClauseAccess().getRule();
	}
	
	//commCase:
	//	'case' (sendStmt | recvStmt) | 'default';
	public CommCaseElements getCommCaseAccess() {
		return pCommCase;
	}
	
	public ParserRule getCommCaseRule() {
		return getCommCaseAccess().getRule();
	}
	
	//recvStmt:
	//	(expressionList '=' | identifierList ':=')? expression;
	public RecvStmtElements getRecvStmtAccess() {
		return pRecvStmt;
	}
	
	public ParserRule getRecvStmtRule() {
		return getRecvStmtAccess().getRule();
	}
	
	////ForStmt = "for" [ Condition | ForClause | RangeClause ] Block .
	////Condition = Expression .
	//forStmt:
	//	'for' (expression | forClause | rangeClause)? block;
	public ForStmtElements getForStmtAccess() {
		return pForStmt;
	}
	
	public ParserRule getForStmtRule() {
		return getForStmtAccess().getRule();
	}
	
	////ForClause = [ InitStmt ] ";" [ Condition ] ";" [ PostStmt ] .
	////InitStmt = SimpleStmt .
	////PostStmt = SimpleStmt .
	//forClause:
	//	simpleStmt? ';' expression? ';' simpleStmt?;
	public ForClauseElements getForClauseAccess() {
		return pForClause;
	}
	
	public ParserRule getForClauseRule() {
		return getForClauseAccess().getRule();
	}
	
	////RangeClause = [ ExpressionList "=" | IdentifierList ":=" ] "range" Expression .
	//rangeClause:
	//	(expressionList '=' | identifierList ':=')? 'range' expression;
	public RangeClauseElements getRangeClauseAccess() {
		return pRangeClause;
	}
	
	public ParserRule getRangeClauseRule() {
		return getRangeClauseAccess().getRule();
	}
	
	////GoStmt = "go" Expression .
	//goStmt:
	//	'go' expression;
	public GoStmtElements getGoStmtAccess() {
		return pGoStmt;
	}
	
	public ParserRule getGoStmtRule() {
		return getGoStmtAccess().getRule();
	}
	
	////Type      = TypeName | TypeLit | "(" Type ")" .
	//type:
	//	typeName
	//	| typeLit
	//	| '(' type ')';
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	////TypeName  = identifier | QualifiedIdent .
	//typeName:
	//	IDENTIFIER
	//	| qualifiedIdent;
	public TypeNameElements getTypeNameAccess() {
		return pTypeName;
	}
	
	public ParserRule getTypeNameRule() {
		return getTypeNameAccess().getRule();
	}
	
	////TypeLit   = ArrayType | StructType | PointerType | FunctionType | InterfaceType |
	////	    SliceType | MapType | ChannelType .
	//typeLit:
	//	arrayType
	//	| structType
	//	| pointerType
	//	| functionType
	//	| interfaceType
	//	| sliceType
	//	| mapType
	//	| channelType;
	public TypeLitElements getTypeLitAccess() {
		return pTypeLit;
	}
	
	public ParserRule getTypeLitRule() {
		return getTypeLitAccess().getRule();
	}
	
	//arrayType:
	//	'[' arrayLength ']' elementType;
	public ArrayTypeElements getArrayTypeAccess() {
		return pArrayType;
	}
	
	public ParserRule getArrayTypeRule() {
		return getArrayTypeAccess().getRule();
	}
	
	//arrayLength:
	//	expression;
	public ArrayLengthElements getArrayLengthAccess() {
		return pArrayLength;
	}
	
	public ParserRule getArrayLengthRule() {
		return getArrayLengthAccess().getRule();
	}
	
	//elementType:
	//	type;
	public ElementTypeElements getElementTypeAccess() {
		return pElementType;
	}
	
	public ParserRule getElementTypeRule() {
		return getElementTypeAccess().getRule();
	}
	
	////PointerType = "*" BaseType .
	////BaseType    = Type .
	//pointerType:
	//	'*' type;
	public PointerTypeElements getPointerTypeAccess() {
		return pPointerType;
	}
	
	public ParserRule getPointerTypeRule() {
		return getPointerTypeAccess().getRule();
	}
	
	////InterfaceType      = "interface" "{" { MethodSpec ";" } "}" .
	////MethodSpec         = MethodName Signature | InterfaceTypeName .
	////MethodName         = identifier .
	////InterfaceTypeName  = TypeName .
	//interfaceType:
	//	'interface' '{' (methodSpec ';')* '}';
	public InterfaceTypeElements getInterfaceTypeAccess() {
		return pInterfaceType;
	}
	
	public ParserRule getInterfaceTypeRule() {
		return getInterfaceTypeAccess().getRule();
	}
	
	////SliceType = "[" "]" ElementType .
	//sliceType:
	//	'[' ']' elementType;
	public SliceTypeElements getSliceTypeAccess() {
		return pSliceType;
	}
	
	public ParserRule getSliceTypeRule() {
		return getSliceTypeAccess().getRule();
	}
	
	////MapType     = "map" "[" KeyType "]" ElementType .
	////KeyType     = Type .
	//mapType:
	//	'map' '[' type ']' elementType;
	public MapTypeElements getMapTypeAccess() {
		return pMapType;
	}
	
	public ParserRule getMapTypeRule() {
		return getMapTypeAccess().getRule();
	}
	
	////ChannelType = ( "chan" | "chan" "<-" | "<-" "chan" ) ElementType .
	//channelType:
	//	('chan' | 'chan' '<-' | '<-' 'chan') elementType;
	public ChannelTypeElements getChannelTypeAccess() {
		return pChannelType;
	}
	
	public ParserRule getChannelTypeRule() {
		return getChannelTypeAccess().getRule();
	}
	
	//methodSpec:
	//	IDENTIFIER signature | typeName;
	public MethodSpecElements getMethodSpecAccess() {
		return pMethodSpec;
	}
	
	public ParserRule getMethodSpecRule() {
		return getMethodSpecAccess().getRule();
	}
	
	////FunctionType   = "func" Signature .
	////Signature      = Parameters [ Result ] .
	////Result         = Parameters | Type .
	////Parameters     = "(" [ ParameterList [ "," ] ] ")" .
	////ParameterList  = ParameterDecl { "," ParameterDecl } .
	////ParameterDecl  = [ IdentifierList ] [ "..." ] Type .
	//functionType:
	//	'func' signature;
	public FunctionTypeElements getFunctionTypeAccess() {
		return pFunctionType;
	}
	
	public ParserRule getFunctionTypeRule() {
		return getFunctionTypeAccess().getRule();
	}
	
	//signature:
	//	parameters result?;
	public SignatureElements getSignatureAccess() {
		return pSignature;
	}
	
	public ParserRule getSignatureRule() {
		return getSignatureAccess().getRule();
	}
	
	//result:
	//	parameters | type;
	public ResultElements getResultAccess() {
		return pResult;
	}
	
	public ParserRule getResultRule() {
		return getResultAccess().getRule();
	}
	
	//parameters:
	//	'(' (parameterList ','?)? ')';
	public ParametersElements getParametersAccess() {
		return pParameters;
	}
	
	public ParserRule getParametersRule() {
		return getParametersAccess().getRule();
	}
	
	//parameterList:
	//	parameterDecl (',' parameterDecl)*;
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//parameterDecl:
	//	identifierList? '...'? type;
	public ParameterDeclElements getParameterDeclAccess() {
		return pParameterDecl;
	}
	
	public ParserRule getParameterDeclRule() {
		return getParameterDeclAccess().getRule();
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//// Operands
	////Operand     = Literal | OperandName | MethodExpr | "(" Expression ")" .
	////Literal     = BasicLit | CompositeLit | FunctionLit .
	////BasicLit    = int_lit | float_lit | imaginary_lit | rune_lit | string_lit .
	////OperandName = identifier | QualifiedIdent.
	//operand:
	//	literal | operandName | methodExpr |
	//	'(' expression ')';
	public OperandElements getOperandAccess() {
		return pOperand;
	}
	
	public ParserRule getOperandRule() {
		return getOperandAccess().getRule();
	}
	
	//literal:
	//	basicLit | compositeLit | functionLit;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//basicLit:
	//	INT_LIT | FLOAT_LIT | IMAGINARY_LIT | RUNE_LIT | STRING_LIT;
	public BasicLitElements getBasicLitAccess() {
		return pBasicLit;
	}
	
	public ParserRule getBasicLitRule() {
		return getBasicLitAccess().getRule();
	}
	
	//operandName:
	//	IDENTIFIER | qualifiedIdent;
	public OperandNameElements getOperandNameAccess() {
		return pOperandName;
	}
	
	public ParserRule getOperandNameRule() {
		return getOperandNameAccess().getRule();
	}
	
	////QualifiedIdent = PackageName "." identifier .
	//qualifiedIdent:
	//	IDENTIFIER '.' IDENTIFIER;
	public QualifiedIdentElements getQualifiedIdentAccess() {
		return pQualifiedIdent;
	}
	
	public ParserRule getQualifiedIdentRule() {
		return getQualifiedIdentAccess().getRule();
	}
	
	////CompositeLit  = LiteralType LiteralValue .
	////LiteralType   = StructType | ArrayType | "[" "..." "]" ElementType |
	////                SliceType | MapType | TypeName .
	////LiteralValue  = "{" [ ElementList [ "," ] ] "}" .
	////ElementList   = KeyedElement { "," KeyedElement } .
	////KeyedElement  = [ Key ":" ] Element .
	////Key           = FieldName | Expression | LiteralValue .
	////FieldName     = identifier .
	////Element       = Expression | LiteralValue .
	//compositeLit:
	//	literalType literalValue;
	public CompositeLitElements getCompositeLitAccess() {
		return pCompositeLit;
	}
	
	public ParserRule getCompositeLitRule() {
		return getCompositeLitAccess().getRule();
	}
	
	//literalType:
	//	structType
	//	| arrayType
	//	| '[' '...' ']' elementType
	//	| sliceType
	//	| mapType
	//	| typeName;
	public LiteralTypeElements getLiteralTypeAccess() {
		return pLiteralType;
	}
	
	public ParserRule getLiteralTypeRule() {
		return getLiteralTypeAccess().getRule();
	}
	
	//literalValue:
	//	'{' (elementList ','?)? '}';
	public LiteralValueElements getLiteralValueAccess() {
		return pLiteralValue;
	}
	
	public ParserRule getLiteralValueRule() {
		return getLiteralValueAccess().getRule();
	}
	
	//elementList:
	//	keyedElement (',' keyedElement)*;
	public ElementListElements getElementListAccess() {
		return pElementList;
	}
	
	public ParserRule getElementListRule() {
		return getElementListAccess().getRule();
	}
	
	//keyedElement:
	//	(key ':')? element;
	public KeyedElementElements getKeyedElementAccess() {
		return pKeyedElement;
	}
	
	public ParserRule getKeyedElementRule() {
		return getKeyedElementAccess().getRule();
	}
	
	//key:
	//	IDENTIFIER | expression | literalValue;
	public KeyElements getKeyAccess() {
		return pKey;
	}
	
	public ParserRule getKeyRule() {
		return getKeyAccess().getRule();
	}
	
	//element:
	//	expression | literalValue;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	////StructType     = "struct" "{" { FieldDecl ";" } "}" .
	////FieldDecl      = (IdentifierList Type | AnonymousField) [ Tag ] .
	////AnonymousField = [ "*" ] TypeName .
	////Tag            = string_lit .
	//structType:
	//	'struct' '{' (fieldDecl ';')* '}';
	public StructTypeElements getStructTypeAccess() {
		return pStructType;
	}
	
	public ParserRule getStructTypeRule() {
		return getStructTypeAccess().getRule();
	}
	
	//fieldDecl:
	//	(identifierList type | anonymousField) STRING_LIT?;
	public FieldDeclElements getFieldDeclAccess() {
		return pFieldDecl;
	}
	
	public ParserRule getFieldDeclRule() {
		return getFieldDeclAccess().getRule();
	}
	
	//anonymousField:
	//	'*'? typeName;
	public AnonymousFieldElements getAnonymousFieldAccess() {
		return pAnonymousField;
	}
	
	public ParserRule getAnonymousFieldRule() {
		return getAnonymousFieldAccess().getRule();
	}
	
	////FunctionLit = "func" Function .
	//functionLit:
	//	'func' function;
	public FunctionLitElements getFunctionLitAccess() {
		return pFunctionLit;
	}
	
	public ParserRule getFunctionLitRule() {
		return getFunctionLitAccess().getRule();
	}
	
	////PrimaryExpr =
	////	Operand |
	////	Conversion |
	////	PrimaryExpr Selector |
	////	PrimaryExpr Index |
	////	PrimaryExpr Slice |
	////	PrimaryExpr TypeAssertion |
	////	PrimaryExpr Arguments .
	////
	////Selector       = "." identifier .
	////Index          = "[" Expression "]" .
	////Slice          = "[" ( [ Expression ] ":" [ Expression ] ) |
	////                     ( [ Expression ] ":" Expression ":" Expression )
	////                 "]" .
	////TypeAssertion  = "." "(" Type ")" .
	////Arguments      = "(" [ ( ExpressionList | Type [ "," ExpressionList ] ) [ "..." ] [ "," ] ] ")" .
	//primaryExpr:
	//	(operand | conversion) | primaryExprSelector | primaryExprIndex | primaryExprSlice | primaryExprTypeAssertion |
	//	primaryExprArguments;
	public PrimaryExprElements getPrimaryExprAccess() {
		return pPrimaryExpr;
	}
	
	public ParserRule getPrimaryExprRule() {
		return getPrimaryExprAccess().getRule();
	}
	
	//primaryExprStuff:
	//	selector | index | slice | typeAssertion | arguments;
	public PrimaryExprStuffElements getPrimaryExprStuffAccess() {
		return pPrimaryExprStuff;
	}
	
	public ParserRule getPrimaryExprStuffRule() {
		return getPrimaryExprStuffAccess().getRule();
	}
	
	//////Left Rec removal for primaryExpr
	//primaryExprSelector:
	//	(primaryExprStuff primaryExprSelector)?;
	public PrimaryExprSelectorElements getPrimaryExprSelectorAccess() {
		return pPrimaryExprSelector;
	}
	
	public ParserRule getPrimaryExprSelectorRule() {
		return getPrimaryExprSelectorAccess().getRule();
	}
	
	//primaryExprIndex:
	//	(primaryExprStuff primaryExprIndex)?;
	public PrimaryExprIndexElements getPrimaryExprIndexAccess() {
		return pPrimaryExprIndex;
	}
	
	public ParserRule getPrimaryExprIndexRule() {
		return getPrimaryExprIndexAccess().getRule();
	}
	
	//primaryExprSlice:
	//	(primaryExprStuff primaryExprSlice)?;
	public PrimaryExprSliceElements getPrimaryExprSliceAccess() {
		return pPrimaryExprSlice;
	}
	
	public ParserRule getPrimaryExprSliceRule() {
		return getPrimaryExprSliceAccess().getRule();
	}
	
	//primaryExprTypeAssertion:
	//	(primaryExprStuff primaryExprTypeAssertion)?;
	public PrimaryExprTypeAssertionElements getPrimaryExprTypeAssertionAccess() {
		return pPrimaryExprTypeAssertion;
	}
	
	public ParserRule getPrimaryExprTypeAssertionRule() {
		return getPrimaryExprTypeAssertionAccess().getRule();
	}
	
	//primaryExprArguments:
	//	(primaryExprStuff primaryExprArguments)?;
	public PrimaryExprArgumentsElements getPrimaryExprArgumentsAccess() {
		return pPrimaryExprArguments;
	}
	
	public ParserRule getPrimaryExprArgumentsRule() {
		return getPrimaryExprArgumentsAccess().getRule();
	}
	
	//////
	//selector:
	//	'.' IDENTIFIER;
	public SelectorElements getSelectorAccess() {
		return pSelector;
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}
	
	//index:
	//	'[' expression ']';
	public IndexElements getIndexAccess() {
		return pIndex;
	}
	
	public ParserRule getIndexRule() {
		return getIndexAccess().getRule();
	}
	
	//slice:
	//	'[' (expression? ':' expression? | expression? ':' expression ':' expression) ']';
	public SliceElements getSliceAccess() {
		return pSlice;
	}
	
	public ParserRule getSliceRule() {
		return getSliceAccess().getRule();
	}
	
	//typeAssertion:
	//	'.' '(' type ')';
	public TypeAssertionElements getTypeAssertionAccess() {
		return pTypeAssertion;
	}
	
	public ParserRule getTypeAssertionRule() {
		return getTypeAssertionAccess().getRule();
	}
	
	//arguments:
	//	'(' ((expressionList | type (',' expressionList)?) '...'? ','?)? ')';
	public ArgumentsElements getArgumentsAccess() {
		return pArguments;
	}
	
	public ParserRule getArgumentsRule() {
		return getArgumentsAccess().getRule();
	}
	
	////MethodExpr    = ReceiverType "." MethodName .
	////ReceiverType  = TypeName | "(" "*" TypeName ")" | "(" ReceiverType ")" .
	//methodExpr:
	//	receiverType '.' IDENTIFIER;
	public MethodExprElements getMethodExprAccess() {
		return pMethodExpr;
	}
	
	public ParserRule getMethodExprRule() {
		return getMethodExprAccess().getRule();
	}
	
	//receiverType:
	//	typeName
	//	| '(' '*' typeName ')'
	//	| '(' receiverType ')';
	public ReceiverTypeElements getReceiverTypeAccess() {
		return pReceiverType;
	}
	
	public ParserRule getReceiverTypeRule() {
		return getReceiverTypeAccess().getRule();
	}
	
	////Expression = UnaryExpr | Expression binary_op Expression .
	////UnaryExpr  = PrimaryExpr | unary_op UnaryExpr .
	//expression:
	//	unaryExpr
	//	//  | expression BINARY_OP expression
	//	expressionMatched;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	////// attempt to remove left recursion of rule expression
	//expressionMatched:
	//	(BINARY_OP expression)?;
	public ExpressionMatchedElements getExpressionMatchedAccess() {
		return pExpressionMatched;
	}
	
	public ParserRule getExpressionMatchedRule() {
		return getExpressionMatchedAccess().getRule();
	}
	
	//////
	//unaryExpr:
	//	primaryExpr | ('+' | '-' | '!' | '^' | '*' | '&' | '<-') unaryExpr;
	public UnaryExprElements getUnaryExprAccess() {
		return pUnaryExpr;
	}
	
	public ParserRule getUnaryExprRule() {
		return getUnaryExprAccess().getRule();
	}
	
	////Conversion = Type "(" Expression [ "," ] ")" .
	//conversion:
	//	type '(' expression ','? ')';
	public ConversionElements getConversionAccess() {
		return pConversion;
	}
	
	public ParserRule getConversionRule() {
		return getConversionAccess().getRule();
	}
	
	//terminal IDENTIFIER:
	//	LETTER (LETTER | UNICODE_DIGIT)*;
	public TerminalRule getIDENTIFIERRule() {
		return tIDENTIFIER;
	}
	
	//terminal BINARY_OP:
	//	'||' | '&&' | REL_OP | ADD_OP | MUL_OP;
	public TerminalRule getBINARY_OPRule() {
		return tBINARY_OP;
	}
	
	//terminal fragment REL_OP:
	//	'==' | '!=' | '<' | '<=' | '>' | '>=';
	public TerminalRule getREL_OPRule() {
		return tREL_OP;
	}
	
	//terminal fragment ADD_OP:
	//	'+' | '-' | '|' | '^';
	public TerminalRule getADD_OPRule() {
		return tADD_OP;
	}
	
	//terminal fragment MUL_OP:
	//	'*' | '/' | '%' | '<<' | '>>' | '&' | '&^';
	public TerminalRule getMUL_OPRule() {
		return tMUL_OP;
	}
	
	//terminal fragment UNARY_OP:
	//	'+' | '-' | '!' | '^' | '*' | '&' | '<-';
	public TerminalRule getUNARY_OPRule() {
		return tUNARY_OP;
	}
	
	//terminal INT_LIT:
	//	DECIMAL_LIT | OCTAL_LIT | HEX_LIT;
	public TerminalRule getINT_LITRule() {
		return tINT_LIT;
	}
	
	//terminal fragment DECIMAL_LIT:
	//	'1'..'9' DECIMAL_DIGIT*;
	public TerminalRule getDECIMAL_LITRule() {
		return tDECIMAL_LIT;
	}
	
	//terminal fragment OCTAL_LIT:
	//	'0' OCTAL_DIGIT*;
	public TerminalRule getOCTAL_LITRule() {
		return tOCTAL_LIT;
	}
	
	//terminal fragment HEX_LIT:
	//	'0' ('X' | 'x') HEX_DIGIT+;
	public TerminalRule getHEX_LITRule() {
		return tHEX_LIT;
	}
	
	//terminal FLOAT_LIT:
	//	DECIMALS '.' DECIMALS? EXPONENT?
	//	| DECIMALS EXPONENT
	//	| '.' DECIMALS EXPONENT?;
	public TerminalRule getFLOAT_LITRule() {
		return tFLOAT_LIT;
	}
	
	//terminal fragment DECIMALS:
	//	DECIMAL_DIGIT+;
	public TerminalRule getDECIMALSRule() {
		return tDECIMALS;
	}
	
	//terminal fragment EXPONENT:
	//	('e' | 'E') ('+' | '-')? DECIMALS;
	public TerminalRule getEXPONENTRule() {
		return tEXPONENT;
	}
	
	//terminal IMAGINARY_LIT:
	//	(DECIMALS | FLOAT_LIT) 'i';
	public TerminalRule getIMAGINARY_LITRule() {
		return tIMAGINARY_LIT;
	}
	
	//terminal RUNE_LIT:
	//	"\'" (UNICODE_VALUE | BYTE_VALUE) "\'";
	public TerminalRule getRUNE_LITRule() {
		return tRUNE_LIT;
	}
	
	//terminal fragment UNICODE_VALUE:
	//	UNICODE_CHAR | LITTLE_U_VALUE | BIG_U_VALUE | ESCAPED_CHAR;
	public TerminalRule getUNICODE_VALUERule() {
		return tUNICODE_VALUE;
	}
	
	//terminal fragment BYTE_VALUE:
	//	OCTAL_BYTE_VALUE | HEX_BYTE_VALUE;
	public TerminalRule getBYTE_VALUERule() {
		return tBYTE_VALUE;
	}
	
	//terminal fragment OCTAL_BYTE_VALUE:
	//	'\\' OCTAL_DIGIT OCTAL_DIGIT OCTAL_DIGIT;
	public TerminalRule getOCTAL_BYTE_VALUERule() {
		return tOCTAL_BYTE_VALUE;
	}
	
	//terminal fragment HEX_BYTE_VALUE:
	//	'\\x' HEX_DIGIT HEX_DIGIT;
	public TerminalRule getHEX_BYTE_VALUERule() {
		return tHEX_BYTE_VALUE;
	}
	
	//terminal LITTLE_U_VALUE:
	//	'\\\u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
	public TerminalRule getLITTLE_U_VALUERule() {
		return tLITTLE_U_VALUE;
	}
	
	//terminal BIG_U_VALUE:
	//	'\\U' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
	public TerminalRule getBIG_U_VALUERule() {
		return tBIG_U_VALUE;
	}
	
	//terminal fragment ESCAPED_CHAR:
	//	'\\' ('a' | 'b' | 'f' | 'n' | 'r' | 't' | 'v' | '\\' | "\'" | '"');
	public TerminalRule getESCAPED_CHARRule() {
		return tESCAPED_CHAR;
	}
	
	//terminal STRING_LIT:
	//	RAW_STRING_LIT | INTERPRETED_STRING_LIT;
	public TerminalRule getSTRING_LITRule() {
		return tSTRING_LIT;
	}
	
	//terminal fragment RAW_STRING_LIT:
	//	"'" (UNICODE_CHAR | NEWLINE)* "'";
	public TerminalRule getRAW_STRING_LITRule() {
		return tRAW_STRING_LIT;
	}
	
	//terminal fragment INTERPRETED_STRING_LIT:
	//	'"' (UNICODE_VALUE | BYTE_VALUE)* '"';
	public TerminalRule getINTERPRETED_STRING_LITRule() {
		return tINTERPRETED_STRING_LIT;
	}
	
	//terminal fragment LETTER:
	//	UNICODE_LETTER | '_';
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//terminal fragment DECIMAL_DIGIT:
	//	'0'..'9';
	public TerminalRule getDECIMAL_DIGITRule() {
		return tDECIMAL_DIGIT;
	}
	
	//terminal fragment OCTAL_DIGIT:
	//	'0'..'7';
	public TerminalRule getOCTAL_DIGITRule() {
		return tOCTAL_DIGIT;
	}
	
	//terminal fragment HEX_DIGIT:
	//	'0'..'9' | 'A'..'F' | 'a'..'f';
	public TerminalRule getHEX_DIGITRule() {
		return tHEX_DIGIT;
	}
	
	//terminal fragment NEWLINE:
	//	'\\u000A';
	public TerminalRule getNEWLINERule() {
		return tNEWLINE;
	}
	
	//terminal fragment UNICODE_CHAR:
	//	'A'..'Z' | 'a'..'z';
	public TerminalRule getUNICODE_CHARRule() {
		return tUNICODE_CHAR;
	}
	
	//terminal fragment UNICODE_DIGIT:
	//	'\\u0030..\\u0039'
	//	| '\\u0660..\\u0669'
	//	| '\\u06F0..\\u06F9'
	//	| '\\u0966..\\u096F'
	//	| '\\u09E6..\\u09EF'
	//	| '\\u0A66..\\u0A6F'
	//	| '\\u0AE6..\\u0AEF'
	//	| '\\u0B66..\\u0B6F'
	//	| '\\u0BE7..\\u0BEF'
	//	| '\\u0C66..\\u0C6F'
	//	| '\\u0CE6..\\u0CEF'
	//	| '\\u0D66..\\u0D6F'
	//	| '\\u0E50..\\u0E59'
	//	| '\\u0ED0..\\u0ED9'
	//	| '\\u0F20..\\u0F29'
	//	| '\\u1040..\\u1049'
	//	| '\\u1369..\\u1371'
	//	| '\\u17E0..\\u17E9'
	//	| '\\u1810..\\u1819'
	//	| '\\uFF10..\\uFF19';
	public TerminalRule getUNICODE_DIGITRule() {
		return tUNICODE_DIGIT;
	}
	
	//terminal fragment UNICODE_LETTER:
	//	'A'..'Z' | 'a'..'z';
	public TerminalRule getUNICODE_LETTERRule() {
		return tUNICODE_LETTER;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
