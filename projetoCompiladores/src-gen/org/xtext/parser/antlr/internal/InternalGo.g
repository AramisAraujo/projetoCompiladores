/*
 * generated by Xtext 2.13.0
 */
grammar InternalGo;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.GoGrammarAccess;

}

@parser::members {

 	private GoGrammarAccess grammarAccess;

    public InternalGoParser(TokenStream input, GoGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected GoGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getGreetingsProgramParserRuleCall_0());
			}
			lv_greetings_0_0=ruleprogram
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"greetings",
					lv_greetings_0_0,
					"org.xtext.Go.program");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleprogram
entryRuleprogram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleprogram=ruleprogram
	{ $current=$iv_ruleprogram.current; }
	EOF;

// Rule program
ruleprogram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getProgramAccess().getImport_declParserRuleCall_0());
		}
		ruleImport_decl
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getProgramAccess().getPackage_clauseParserRuleCall_1());
		}
		rulePackage_clause
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getProgramAccess().getFunction_declParserRuleCall_2());
		}
		this_Function_decl_2=ruleFunction_decl
		{
			$current = $this_Function_decl_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;


// Rule OPERATORS
ruleOPERATORS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_BINARY_OP_0=RULE_BINARY_OP
		{
			$current.merge(this_BINARY_OP_0);
		}
		{
			newLeafNode(this_BINARY_OP_0, grammarAccess.getOPERATORSAccess().getBINARY_OPTerminalRuleCall_0());
		}
		    |
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOPERATORSAccess().getLeftParenthesisKeyword_1());
		}
		    |
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOPERATORSAccess().getRightParenthesisKeyword_2());
		}
		    |
		kw='['
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOPERATORSAccess().getLeftSquareBracketKeyword_3());
		}
		    |
		kw=']'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOPERATORSAccess().getRightSquareBracketKeyword_4());
		}
		    |
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOPERATORSAccess().getLeftCurlyBracketKeyword_5());
		}
		    |
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOPERATORSAccess().getRightCurlyBracketKeyword_6());
		}
		    |
		kw='++'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOPERATORSAccess().getPlusSignPlusSignKeyword_7());
		}
		    |
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOPERATORSAccess().getEqualsSignKeyword_8());
		}
		    |
		kw=':='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOPERATORSAccess().getColonEqualsSignKeyword_9());
		}
		    |
		kw=','
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOPERATORSAccess().getCommaKeyword_10());
		}
		    |
		this_SEMICOLON_11=RULE_SEMICOLON
		{
			$current.merge(this_SEMICOLON_11);
		}
		{
			newLeafNode(this_SEMICOLON_11, grammarAccess.getOPERATORSAccess().getSEMICOLONTerminalRuleCall_11());
		}
		    |
		kw='--'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOPERATORSAccess().getHyphenMinusHyphenMinusKeyword_12());
		}
		    |
		kw='...'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOPERATORSAccess().getFullStopFullStopFullStopKeyword_13());
		}
		    |
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOPERATORSAccess().getFullStopKeyword_14());
		}
		    |
		kw=':'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOPERATORSAccess().getColonKeyword_15());
		}
		    |
		this_ASSIGN_OP_16=RULE_ASSIGN_OP
		{
			$current.merge(this_ASSIGN_OP_16);
		}
		{
			newLeafNode(this_ASSIGN_OP_16, grammarAccess.getOPERATORSAccess().getASSIGN_OPTerminalRuleCall_16());
		}
	)
;

// Entry rule entryRuleInt_lit
entryRuleInt_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getInt_litRule()); }
	iv_ruleInt_lit=ruleInt_lit
	{ $current=$iv_ruleInt_lit.current.getText(); }
	EOF;

// Rule Int_lit
ruleInt_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getInt_litAccess().getINTTerminalRuleCall_0());
		}
		    |
		this_OCTAL_LIT_1=RULE_OCTAL_LIT
		{
			$current.merge(this_OCTAL_LIT_1);
		}
		{
			newLeafNode(this_OCTAL_LIT_1, grammarAccess.getInt_litAccess().getOCTAL_LITTerminalRuleCall_1());
		}
		    |
		this_HEX_LIT_2=RULE_HEX_LIT
		{
			$current.merge(this_HEX_LIT_2);
		}
		{
			newLeafNode(this_HEX_LIT_2, grammarAccess.getInt_litAccess().getHEX_LITTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleFloat_lit
entryRuleFloat_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFloat_litRule()); }
	iv_ruleFloat_lit=ruleFloat_lit
	{ $current=$iv_ruleFloat_lit.current.getText(); }
	EOF;

// Rule Float_lit
ruleFloat_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getFloat_litAccess().getINTTerminalRuleCall_0());
		}
		(
			(
				kw='.'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getFloat_litAccess().getFullStopKeyword_1_0_0());
				}
				(
					this_INT_2=RULE_INT
					{
						$current.merge(this_INT_2);
					}
					{
						newLeafNode(this_INT_2, grammarAccess.getFloat_litAccess().getINTTerminalRuleCall_1_0_1());
					}
				)?
				(
					{
						newCompositeNode(grammarAccess.getFloat_litAccess().getExponentParserRuleCall_1_0_2());
					}
					this_Exponent_3=ruleExponent
					{
						$current.merge(this_Exponent_3);
					}
					{
						afterParserOrEnumRuleCall();
					}
				)?
			)
			    |
			{
				newCompositeNode(grammarAccess.getFloat_litAccess().getExponentParserRuleCall_1_1());
			}
			this_Exponent_4=ruleExponent
			{
				$current.merge(this_Exponent_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFloat_litAccess().getFullStopKeyword_2());
		}
		this_INT_6=RULE_INT
		{
			$current.merge(this_INT_6);
		}
		{
			newLeafNode(this_INT_6, grammarAccess.getFloat_litAccess().getINTTerminalRuleCall_3());
		}
		(
			{
				newCompositeNode(grammarAccess.getFloat_litAccess().getExponentParserRuleCall_4());
			}
			this_Exponent_7=ruleExponent
			{
				$current.merge(this_Exponent_7);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleExponent
entryRuleExponent returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExponentRule()); }
	iv_ruleExponent=ruleExponent
	{ $current=$iv_ruleExponent.current.getText(); }
	EOF;

// Rule Exponent
ruleExponent returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='E'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExponentAccess().getEKeyword_0_0());
			}
			    |
			kw='e'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExponentAccess().getEKeyword_0_1());
			}
		)
		(
			kw='+'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExponentAccess().getPlusSignKeyword_1_0());
			}
			    |
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExponentAccess().getHyphenMinusKeyword_1_1());
			}
		)?
		this_INT_4=RULE_INT
		{
			$current.merge(this_INT_4);
		}
		{
			newLeafNode(this_INT_4, grammarAccess.getExponentAccess().getINTTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleImaginary_lit
entryRuleImaginary_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getImaginary_litRule()); }
	iv_ruleImaginary_lit=ruleImaginary_lit
	{ $current=$iv_ruleImaginary_lit.current.getText(); }
	EOF;

// Rule Imaginary_lit
ruleImaginary_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_INT_0=RULE_INT
			{
				$current.merge(this_INT_0);
			}
			{
				newLeafNode(this_INT_0, grammarAccess.getImaginary_litAccess().getINTTerminalRuleCall_0_0());
			}
			    |
			{
				newCompositeNode(grammarAccess.getImaginary_litAccess().getFloat_litParserRuleCall_0_1());
			}
			this_Float_lit_1=ruleFloat_lit
			{
				$current.merge(this_Float_lit_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		kw='i'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getImaginary_litAccess().getIKeyword_1());
		}
	)
;

// Entry rule entryRuleRune_lit
entryRuleRune_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRune_litRule()); }
	iv_ruleRune_lit=ruleRune_lit
	{ $current=$iv_ruleRune_lit.current.getText(); }
	EOF;

// Rule Rune_lit
ruleRune_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='\''
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRune_litAccess().getApostropheKeyword_0());
		}
		(
			this_UNICODE_VALUE_1=RULE_UNICODE_VALUE
			{
				$current.merge(this_UNICODE_VALUE_1);
			}
			{
				newLeafNode(this_UNICODE_VALUE_1, grammarAccess.getRune_litAccess().getUNICODE_VALUETerminalRuleCall_1_0());
			}
			    |
			{
				newCompositeNode(grammarAccess.getRune_litAccess().getByte_valueParserRuleCall_1_1());
			}
			this_Byte_value_2=ruleByte_value
			{
				$current.merge(this_Byte_value_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		kw='\''
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRune_litAccess().getApostropheKeyword_2());
		}
	)
;

// Entry rule entryRuleByte_value
entryRuleByte_value returns [String current=null]:
	{ newCompositeNode(grammarAccess.getByte_valueRule()); }
	iv_ruleByte_value=ruleByte_value
	{ $current=$iv_ruleByte_value.current.getText(); }
	EOF;

// Rule Byte_value
ruleByte_value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_OCTAL_BYTE_VALUE_0=RULE_OCTAL_BYTE_VALUE
		{
			$current.merge(this_OCTAL_BYTE_VALUE_0);
		}
		{
			newLeafNode(this_OCTAL_BYTE_VALUE_0, grammarAccess.getByte_valueAccess().getOCTAL_BYTE_VALUETerminalRuleCall_0());
		}
		    |
		this_HEX_BYTE_VALUE_1=RULE_HEX_BYTE_VALUE
		{
			$current.merge(this_HEX_BYTE_VALUE_1);
		}
		{
			newLeafNode(this_HEX_BYTE_VALUE_1, grammarAccess.getByte_valueAccess().getHEX_BYTE_VALUETerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleString_lit
entryRuleString_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getString_litRule()); }
	iv_ruleString_lit=ruleString_lit
	{ $current=$iv_ruleString_lit.current.getText(); }
	EOF;

// Rule String_lit
ruleString_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_RAW_STRING_LIT_0=RULE_RAW_STRING_LIT
		{
			$current.merge(this_RAW_STRING_LIT_0);
		}
		{
			newLeafNode(this_RAW_STRING_LIT_0, grammarAccess.getString_litAccess().getRAW_STRING_LITTerminalRuleCall_0());
		}
		    |
		{
			newCompositeNode(grammarAccess.getString_litAccess().getInterpreted_string_litParserRuleCall_1());
		}
		this_Interpreted_string_lit_1=ruleInterpreted_string_lit
		{
			$current.merge(this_Interpreted_string_lit_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleInterpreted_string_lit
entryRuleInterpreted_string_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getInterpreted_string_litRule()); }
	iv_ruleInterpreted_string_lit=ruleInterpreted_string_lit
	{ $current=$iv_ruleInterpreted_string_lit.current.getText(); }
	EOF;

// Rule Interpreted_string_lit
ruleInterpreted_string_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='"'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInterpreted_string_litAccess().getQuotationMarkKeyword_0());
		}
		(
			this_UNICODE_VALUE_1=RULE_UNICODE_VALUE
			{
				$current.merge(this_UNICODE_VALUE_1);
			}
			{
				newLeafNode(this_UNICODE_VALUE_1, grammarAccess.getInterpreted_string_litAccess().getUNICODE_VALUETerminalRuleCall_1_0());
			}
			    |
			{
				newCompositeNode(grammarAccess.getInterpreted_string_litAccess().getByte_valueParserRuleCall_1_1());
			}
			this_Byte_value_2=ruleByte_value
			{
				$current.merge(this_Byte_value_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
		kw='"'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInterpreted_string_litAccess().getQuotationMarkKeyword_2());
		}
	)
;

// Entry rule entryRuleLiterals
entryRuleLiterals returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLiteralsRule()); }
	iv_ruleLiterals=ruleLiterals
	{ $current=$iv_ruleLiterals.current.getText(); }
	EOF;

// Rule Literals
ruleLiterals returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLiteralsAccess().getInt_litParserRuleCall_0());
		}
		this_Int_lit_0=ruleInt_lit
		{
			$current.merge(this_Int_lit_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralsAccess().getFloat_litParserRuleCall_1());
		}
		this_Float_lit_1=ruleFloat_lit
		{
			$current.merge(this_Float_lit_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralsAccess().getImaginary_litParserRuleCall_2());
		}
		this_Imaginary_lit_2=ruleImaginary_lit
		{
			$current.merge(this_Imaginary_lit_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralsAccess().getRune_litParserRuleCall_3());
		}
		this_Rune_lit_3=ruleRune_lit
		{
			$current.merge(this_Rune_lit_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralsAccess().getString_litParserRuleCall_4());
		}
		this_String_lit_4=ruleString_lit
		{
			$current.merge(this_String_lit_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleType
entryRuleType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current.getText(); }
	EOF;

// Rule Type
ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeAccess().getType_nameParserRuleCall_0());
		}
		this_Type_name_0=ruleType_name
		{
			$current.merge(this_Type_name_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getType_litParserRuleCall_1());
		}
		this_Type_lit_1=ruleType_lit
		{
			$current.merge(this_Type_lit_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTypeAccess().getLeftParenthesisKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getTypeAccess().getTypeParserRuleCall_2_1());
			}
			this_Type_3=ruleType
			{
				$current.merge(this_Type_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTypeAccess().getRightParenthesisKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRuleType_name
entryRuleType_name returns [String current=null]:
	{ newCompositeNode(grammarAccess.getType_nameRule()); }
	iv_ruleType_name=ruleType_name
	{ $current=$iv_ruleType_name.current.getText(); }
	EOF;

// Rule Type_name
ruleType_name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENTIFIER_0=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_0);
		}
		{
			newLeafNode(this_IDENTIFIER_0, grammarAccess.getType_nameAccess().getIDENTIFIERTerminalRuleCall_0());
		}
		    |
		{
			newCompositeNode(grammarAccess.getType_nameAccess().getQualified_identParserRuleCall_1());
		}
		this_Qualified_ident_1=ruleQualified_ident
		{
			$current.merge(this_Qualified_ident_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleType_lit
entryRuleType_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getType_litRule()); }
	iv_ruleType_lit=ruleType_lit
	{ $current=$iv_ruleType_lit.current.getText(); }
	EOF;

// Rule Type_lit
ruleType_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getType_litAccess().getArray_typeParserRuleCall_0());
		}
		this_Array_type_0=ruleArray_type
		{
			$current.merge(this_Array_type_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getType_litAccess().getStruct_typeParserRuleCall_1());
		}
		this_Struct_type_1=ruleStruct_type
		{
			$current.merge(this_Struct_type_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getType_litAccess().getPointer_typeParserRuleCall_2());
		}
		this_Pointer_type_2=rulePointer_type
		{
			$current.merge(this_Pointer_type_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getType_litAccess().getFunction_typeParserRuleCall_3());
		}
		this_Function_type_3=ruleFunction_type
		{
			$current.merge(this_Function_type_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getType_litAccess().getSlice_typeParserRuleCall_4());
		}
		this_Slice_type_4=ruleSlice_type
		{
			$current.merge(this_Slice_type_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getType_litAccess().getMap_typeParserRuleCall_5());
		}
		this_Map_type_5=ruleMap_type
		{
			$current.merge(this_Map_type_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getType_litAccess().getInterface_typeParserRuleCall_6());
		}
		this_Interface_type_6=ruleInterface_type
		{
			$current.merge(this_Interface_type_6);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getType_litAccess().getChannel_typeParserRuleCall_7());
		}
		this_Channel_type_7=ruleChannel_type
		{
			$current.merge(this_Channel_type_7);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleArray_type
entryRuleArray_type returns [String current=null]:
	{ newCompositeNode(grammarAccess.getArray_typeRule()); }
	iv_ruleArray_type=ruleArray_type
	{ $current=$iv_ruleArray_type.current.getText(); }
	EOF;

// Rule Array_type
ruleArray_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='['
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArray_typeAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(ruleIdentifier_list
			)=>
			{
				newCompositeNode(grammarAccess.getArray_typeAccess().getParameter_listParserRuleCall_1());
			}
			this_Parameter_list_1=ruleParameter_list
			{
				$current.merge(this_Parameter_list_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		kw=']'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArray_typeAccess().getRightSquareBracketKeyword_2());
		}
		{
			newCompositeNode(grammarAccess.getArray_typeAccess().getTypeParserRuleCall_3());
		}
		this_Type_3=ruleType
		{
			$current.merge(this_Type_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStruct_type
entryRuleStruct_type returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStruct_typeRule()); }
	iv_ruleStruct_type=ruleStruct_type
	{ $current=$iv_ruleStruct_type.current.getText(); }
	EOF;

// Rule Struct_type
ruleStruct_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='struct'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStruct_typeAccess().getStructKeyword_0());
		}
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStruct_typeAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			{
				newCompositeNode(grammarAccess.getStruct_typeAccess().getField_declParserRuleCall_2_0());
			}
			this_Field_decl_2=ruleField_decl
			{
				$current.merge(this_Field_decl_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			this_SEMICOLON_3=RULE_SEMICOLON
			{
				$current.merge(this_SEMICOLON_3);
			}
			{
				newLeafNode(this_SEMICOLON_3, grammarAccess.getStruct_typeAccess().getSEMICOLONTerminalRuleCall_2_1());
			}
		)*
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStruct_typeAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleField_decl
entryRuleField_decl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getField_declRule()); }
	iv_ruleField_decl=ruleField_decl
	{ $current=$iv_ruleField_decl.current.getText(); }
	EOF;

// Rule Field_decl
ruleField_decl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getField_declAccess().getIdentifier_listParserRuleCall_0_0_0());
				}
				this_Identifier_list_0=ruleIdentifier_list
				{
					$current.merge(this_Identifier_list_0);
				}
				{
					afterParserOrEnumRuleCall();
				}
				{
					newCompositeNode(grammarAccess.getField_declAccess().getTypeParserRuleCall_0_0_1());
				}
				this_Type_1=ruleType
				{
					$current.merge(this_Type_1);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
			    |
			{
				newCompositeNode(grammarAccess.getField_declAccess().getEmbedded_fieldParserRuleCall_0_1());
			}
			this_Embedded_field_2=ruleEmbedded_field
			{
				$current.merge(this_Embedded_field_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		(
			{
				newCompositeNode(grammarAccess.getField_declAccess().getString_litParserRuleCall_1());
			}
			this_String_lit_3=ruleString_lit
			{
				$current.merge(this_String_lit_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleEmbedded_field
entryRuleEmbedded_field returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEmbedded_fieldRule()); }
	iv_ruleEmbedded_field=ruleEmbedded_field
	{ $current=$iv_ruleEmbedded_field.current.getText(); }
	EOF;

// Rule Embedded_field
ruleEmbedded_field returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEmbedded_fieldAccess().getAsteriskKeyword_0());
			}
		)+
		{
			newCompositeNode(grammarAccess.getEmbedded_fieldAccess().getType_nameParserRuleCall_1());
		}
		this_Type_name_1=ruleType_name
		{
			$current.merge(this_Type_name_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePointer_type
entryRulePointer_type returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPointer_typeRule()); }
	iv_rulePointer_type=rulePointer_type
	{ $current=$iv_rulePointer_type.current.getText(); }
	EOF;

// Rule Pointer_type
rulePointer_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPointer_typeAccess().getAsteriskKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getPointer_typeAccess().getTypeParserRuleCall_1());
		}
		this_Type_1=ruleType
		{
			$current.merge(this_Type_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFunction_type
entryRuleFunction_type returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFunction_typeRule()); }
	iv_ruleFunction_type=ruleFunction_type
	{ $current=$iv_ruleFunction_type.current.getText(); }
	EOF;

// Rule Function_type
ruleFunction_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='func'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFunction_typeAccess().getFuncKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getFunction_typeAccess().getSignatureParserRuleCall_1());
		}
		this_Signature_1=ruleSignature
		{
			$current.merge(this_Signature_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSignature
entryRuleSignature returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSignatureRule()); }
	iv_ruleSignature=ruleSignature
	{ $current=$iv_ruleSignature.current.getText(); }
	EOF;

// Rule Signature
ruleSignature returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSignatureAccess().getParametersParserRuleCall_0());
		}
		this_Parameters_0=ruleParameters
		{
			$current.merge(this_Parameters_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			(ruleResult)=>
			{
				newCompositeNode(grammarAccess.getSignatureAccess().getResultParserRuleCall_1());
			}
			this_Result_1=ruleResult
			{
				$current.merge(this_Result_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)+
	)
;

// Entry rule entryRuleResult
entryRuleResult returns [String current=null]:
	{ newCompositeNode(grammarAccess.getResultRule()); }
	iv_ruleResult=ruleResult
	{ $current=$iv_ruleResult.current.getText(); }
	EOF;

// Rule Result
ruleResult returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getResultAccess().getParametersParserRuleCall_0());
		}
		this_Parameters_0=ruleParameters
		{
			$current.merge(this_Parameters_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(ruleType)=>
			{
				newCompositeNode(grammarAccess.getResultAccess().getTypeParserRuleCall_1());
			}
			this_Type_1=ruleType
			{
				$current.merge(this_Type_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleParameters
entryRuleParameters returns [String current=null]:
	{ newCompositeNode(grammarAccess.getParametersRule()); }
	iv_ruleParameters=ruleParameters
	{ $current=$iv_ruleParameters.current.getText(); }
	EOF;

// Rule Parameters
ruleParameters returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getParametersAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				(ruleIdentifier_list
				)=>
				{
					newCompositeNode(grammarAccess.getParametersAccess().getParameter_listParserRuleCall_1_0());
				}
				this_Parameter_list_1=ruleParameter_list
				{
					$current.merge(this_Parameter_list_1);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
			(
				kw=','
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getParametersAccess().getCommaKeyword_1_1());
				}
			)+
		)+
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getParametersAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleParameter_list
entryRuleParameter_list returns [String current=null]:
	{ newCompositeNode(grammarAccess.getParameter_listRule()); }
	iv_ruleParameter_list=ruleParameter_list
	{ $current=$iv_ruleParameter_list.current.getText(); }
	EOF;

// Rule Parameter_list
ruleParameter_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleIdentifier_list
			)=>
			{
				newCompositeNode(grammarAccess.getParameter_listAccess().getParameter_declParserRuleCall_0());
			}
			this_Parameter_decl_0=ruleParameter_decl
			{
				$current.merge(this_Parameter_decl_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		(
			((
				','
				(
					(ruleIdentifier_list
					)=>
					ruleParameter_decl
				)
			)
			)=>
			(
				kw=','
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getParameter_listAccess().getCommaKeyword_1_0_0());
				}
				(
					(ruleIdentifier_list
					)=>
					{
						newCompositeNode(grammarAccess.getParameter_listAccess().getParameter_declParserRuleCall_1_0_1());
					}
					this_Parameter_decl_2=ruleParameter_decl
					{
						$current.merge(this_Parameter_decl_2);
					}
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleParameter_decl
entryRuleParameter_decl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getParameter_declRule()); }
	iv_ruleParameter_decl=ruleParameter_decl
	{ $current=$iv_ruleParameter_decl.current.getText(); }
	EOF;

// Rule Parameter_decl
ruleParameter_decl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleIdentifier_list
			)=>
			{
				newCompositeNode(grammarAccess.getParameter_declAccess().getIdentifier_listParserRuleCall_0_0());
			}
			this_Identifier_list_0=ruleIdentifier_list
			{
				$current.merge(this_Identifier_list_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		(
			kw='...'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getParameter_declAccess().getFullStopFullStopFullStopKeyword_1());
			}
		)?
		{
			newCompositeNode(grammarAccess.getParameter_declAccess().getTypeParserRuleCall_2());
		}
		this_Type_2=ruleType
		{
			$current.merge(this_Type_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIdentifier_list
entryRuleIdentifier_list returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIdentifier_listRule()); }
	iv_ruleIdentifier_list=ruleIdentifier_list
	{ $current=$iv_ruleIdentifier_list.current.getText(); }
	EOF;

// Rule Identifier_list
ruleIdentifier_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENTIFIER_0=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_0);
		}
		{
			newLeafNode(this_IDENTIFIER_0, grammarAccess.getIdentifier_listAccess().getIDENTIFIERTerminalRuleCall_0());
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIdentifier_listAccess().getCommaKeyword_1_0());
			}
			this_IDENTIFIER_2=RULE_IDENTIFIER
			{
				$current.merge(this_IDENTIFIER_2);
			}
			{
				newLeafNode(this_IDENTIFIER_2, grammarAccess.getIdentifier_listAccess().getIDENTIFIERTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleInterface_type
entryRuleInterface_type returns [String current=null]:
	{ newCompositeNode(grammarAccess.getInterface_typeRule()); }
	iv_ruleInterface_type=ruleInterface_type
	{ $current=$iv_ruleInterface_type.current.getText(); }
	EOF;

// Rule Interface_type
ruleInterface_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='interface'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInterface_typeAccess().getInterfaceKeyword_0());
		}
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInterface_typeAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			{
				newCompositeNode(grammarAccess.getInterface_typeAccess().getMethod_specParserRuleCall_2_0());
			}
			this_Method_spec_2=ruleMethod_spec
			{
				$current.merge(this_Method_spec_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			this_SEMICOLON_3=RULE_SEMICOLON
			{
				$current.merge(this_SEMICOLON_3);
			}
			{
				newLeafNode(this_SEMICOLON_3, grammarAccess.getInterface_typeAccess().getSEMICOLONTerminalRuleCall_2_1());
			}
		)*
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInterface_typeAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleMethod_spec
entryRuleMethod_spec returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMethod_specRule()); }
	iv_ruleMethod_spec=ruleMethod_spec
	{ $current=$iv_ruleMethod_spec.current.getText(); }
	EOF;

// Rule Method_spec
ruleMethod_spec returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_IDENTIFIER_0=RULE_IDENTIFIER
			{
				$current.merge(this_IDENTIFIER_0);
			}
			{
				newLeafNode(this_IDENTIFIER_0, grammarAccess.getMethod_specAccess().getIDENTIFIERTerminalRuleCall_0_0());
			}
			{
				newCompositeNode(grammarAccess.getMethod_specAccess().getSignatureParserRuleCall_0_1());
			}
			this_Signature_1=ruleSignature
			{
				$current.merge(this_Signature_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getMethod_specAccess().getType_nameParserRuleCall_1());
		}
		this_Type_name_2=ruleType_name
		{
			$current.merge(this_Type_name_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSlice_type
entryRuleSlice_type returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSlice_typeRule()); }
	iv_ruleSlice_type=ruleSlice_type
	{ $current=$iv_ruleSlice_type.current.getText(); }
	EOF;

// Rule Slice_type
ruleSlice_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='['
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSlice_typeAccess().getLeftSquareBracketKeyword_0());
		}
		kw=']'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSlice_typeAccess().getRightSquareBracketKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getSlice_typeAccess().getTypeParserRuleCall_2());
		}
		this_Type_2=ruleType
		{
			$current.merge(this_Type_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMap_type
entryRuleMap_type returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMap_typeRule()); }
	iv_ruleMap_type=ruleMap_type
	{ $current=$iv_ruleMap_type.current.getText(); }
	EOF;

// Rule Map_type
ruleMap_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='map'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMap_typeAccess().getMapKeyword_0());
		}
		kw='['
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMap_typeAccess().getLeftSquareBracketKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getMap_typeAccess().getTypeParserRuleCall_2());
		}
		this_Type_2=ruleType
		{
			$current.merge(this_Type_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=']'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMap_typeAccess().getRightSquareBracketKeyword_3());
		}
		{
			newCompositeNode(grammarAccess.getMap_typeAccess().getTypeParserRuleCall_4());
		}
		this_Type_4=ruleType
		{
			$current.merge(this_Type_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleChannel_type
entryRuleChannel_type returns [String current=null]:
	{ newCompositeNode(grammarAccess.getChannel_typeRule()); }
	iv_ruleChannel_type=ruleChannel_type
	{ $current=$iv_ruleChannel_type.current.getText(); }
	EOF;

// Rule Channel_type
ruleChannel_type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='chan'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getChannel_typeAccess().getChanKeyword_0_0());
			}
			    |
			kw='chan<-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getChannel_typeAccess().getChanKeyword_0_1());
			}
			    |
			kw='<-chan'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getChannel_typeAccess().getChanKeyword_0_2());
			}
		)
		{
			newCompositeNode(grammarAccess.getChannel_typeAccess().getTypeParserRuleCall_1());
		}
		this_Type_3=ruleType
		{
			$current.merge(this_Type_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleBlock=ruleBlock
	{ $current=$iv_ruleBlock.current; }
	EOF;

// Rule Block
ruleBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getBlockAccess().getStatement_listParserRuleCall_1());
		}
		this_Statement_list_1=ruleStatement_list
		{
			$current = $this_Statement_list_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2='}'
		{
			newLeafNode(otherlv_2, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleStatement_list
entryRuleStatement_list returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatement_listRule()); }
	iv_ruleStatement_list=ruleStatement_list
	{ $current=$iv_ruleStatement_list.current; }
	EOF;

// Rule Statement_list
ruleStatement_list returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStatement_listAccess().getStatementStatementParserRuleCall_0_0());
				}
				lv_Statement_0_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatement_listRule());
					}
					set(
						$current,
						"Statement",
						lv_Statement_0_0,
						"org.xtext.Go.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_SEMICOLON_1=RULE_SEMICOLON
		{
			newLeafNode(this_SEMICOLON_1, grammarAccess.getStatement_listAccess().getSEMICOLONTerminalRuleCall_1());
		}
	)*
;

// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	iv_ruleDeclaration=ruleDeclaration
	{ $current=$iv_ruleDeclaration.current; }
	EOF;

// Rule Declaration
ruleDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getConst_declParserRuleCall_0());
		}
		this_Const_decl_0=ruleConst_decl
		{
			$current = $this_Const_decl_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getType_declParserRuleCall_1());
		}
		ruleType_decl
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getVar_declParserRuleCall_2());
		}
		this_Var_decl_2=ruleVar_decl
		{
			$current = $this_Var_decl_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleConst_decl
entryRuleConst_decl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConst_declRule()); }
	iv_ruleConst_decl=ruleConst_decl
	{ $current=$iv_ruleConst_decl.current; }
	EOF;

// Rule Const_decl
ruleConst_decl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='const'
			{
				newLeafNode(otherlv_0, grammarAccess.getConst_declAccess().getConstKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getConst_declAccess().getConst_specParserRuleCall_0_1());
			}
			this_Const_spec_1=ruleConst_spec
			{
				$current = $this_Const_spec_1.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getConst_declAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getConst_declAccess().getConst_specConst_specParserRuleCall_1_1_0_0());
						}
						lv_Const_spec_3_0=ruleConst_spec
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getConst_declRule());
							}
							set(
								$current,
								"Const_spec",
								lv_Const_spec_3_0,
								"org.xtext.Go.Const_spec");
							afterParserOrEnumRuleCall();
						}
					)
				)
				this_SEMICOLON_4=RULE_SEMICOLON
				{
					newLeafNode(this_SEMICOLON_4, grammarAccess.getConst_declAccess().getSEMICOLONTerminalRuleCall_1_1_1());
				}
			)*
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getConst_declAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRuleConst_spec
entryRuleConst_spec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConst_specRule()); }
	iv_ruleConst_spec=ruleConst_spec
	{ $current=$iv_ruleConst_spec.current; }
	EOF;

// Rule Const_spec
ruleConst_spec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConst_specAccess().getIdentifier_listParserRuleCall_0());
		}
		ruleIdentifier_list
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConst_specAccess().getTypeParserRuleCall_1_0());
				}
				ruleType
				{
					afterParserOrEnumRuleCall();
				}
			)?
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getConst_specAccess().getEqualsSignKeyword_1_1());
			}
			{
				newCompositeNode(grammarAccess.getConst_specAccess().getExpression_listParserRuleCall_1_2());
			}
			this_Expression_list_3=ruleExpression_list
			{
				$current = $this_Expression_list_3.current;
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleExpression_list
entryRuleExpression_list returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpression_listRule()); }
	iv_ruleExpression_list=ruleExpression_list
	{ $current=$iv_ruleExpression_list.current; }
	EOF;

// Rule Expression_list
ruleExpression_list returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpression_listAccess().getExpressionExpressionParserRuleCall_0_0());
				}
				lv_Expression_0_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpression_listRule());
					}
					set(
						$current,
						"Expression",
						lv_Expression_0_0,
						"org.xtext.Go.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getExpression_listAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpression_listAccess().getExpressionExpressionParserRuleCall_1_1_0());
					}
					lv_Expression_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpression_listRule());
						}
						set(
							$current,
							"Expression",
							lv_Expression_2_0,
							"org.xtext.Go.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleType_decl
entryRuleType_decl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getType_declRule()); }
	iv_ruleType_decl=ruleType_decl
	{ $current=$iv_ruleType_decl.current.getText(); }
	EOF;

// Rule Type_decl
ruleType_decl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='type'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getType_declAccess().getTypeKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getType_declAccess().getType_specParserRuleCall_1_0());
			}
			this_Type_spec_1=ruleType_spec
			{
				$current.merge(this_Type_spec_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			(
				kw='('
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getType_declAccess().getLeftParenthesisKeyword_1_1_0());
				}
				(
					{
						newCompositeNode(grammarAccess.getType_declAccess().getType_specParserRuleCall_1_1_1_0());
					}
					this_Type_spec_3=ruleType_spec
					{
						$current.merge(this_Type_spec_3);
					}
					{
						afterParserOrEnumRuleCall();
					}
					this_SEMICOLON_4=RULE_SEMICOLON
					{
						$current.merge(this_SEMICOLON_4);
					}
					{
						newLeafNode(this_SEMICOLON_4, grammarAccess.getType_declAccess().getSEMICOLONTerminalRuleCall_1_1_1_1());
					}
				)*
				kw=')'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getType_declAccess().getRightParenthesisKeyword_1_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuleType_spec
entryRuleType_spec returns [String current=null]:
	{ newCompositeNode(grammarAccess.getType_specRule()); }
	iv_ruleType_spec=ruleType_spec
	{ $current=$iv_ruleType_spec.current.getText(); }
	EOF;

// Rule Type_spec
ruleType_spec returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getType_specAccess().getAlias_declParserRuleCall_0());
		}
		this_Alias_decl_0=ruleAlias_decl
		{
			$current.merge(this_Alias_decl_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getType_specAccess().getType_defParserRuleCall_1());
		}
		this_Type_def_1=ruleType_def
		{
			$current.merge(this_Type_def_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAlias_decl
entryRuleAlias_decl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAlias_declRule()); }
	iv_ruleAlias_decl=ruleAlias_decl
	{ $current=$iv_ruleAlias_decl.current.getText(); }
	EOF;

// Rule Alias_decl
ruleAlias_decl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENTIFIER_0=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_0);
		}
		{
			newLeafNode(this_IDENTIFIER_0, grammarAccess.getAlias_declAccess().getIDENTIFIERTerminalRuleCall_0());
		}
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAlias_declAccess().getEqualsSignKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getAlias_declAccess().getTypeParserRuleCall_2());
		}
		this_Type_2=ruleType
		{
			$current.merge(this_Type_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleType_def
entryRuleType_def returns [String current=null]:
	{ newCompositeNode(grammarAccess.getType_defRule()); }
	iv_ruleType_def=ruleType_def
	{ $current=$iv_ruleType_def.current.getText(); }
	EOF;

// Rule Type_def
ruleType_def returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENTIFIER_0=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_0);
		}
		{
			newLeafNode(this_IDENTIFIER_0, grammarAccess.getType_defAccess().getIDENTIFIERTerminalRuleCall_0());
		}
		{
			newCompositeNode(grammarAccess.getType_defAccess().getTypeParserRuleCall_1());
		}
		this_Type_1=ruleType
		{
			$current.merge(this_Type_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVar_decl
entryRuleVar_decl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVar_declRule()); }
	iv_ruleVar_decl=ruleVar_decl
	{ $current=$iv_ruleVar_decl.current; }
	EOF;

// Rule Var_decl
ruleVar_decl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getVar_declAccess().getVarKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getVar_declAccess().getVar_specVar_specParserRuleCall_1_0_0());
					}
					lv_Var_spec_1_0=ruleVar_spec
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVar_declRule());
						}
						set(
							$current,
							"Var_spec",
							lv_Var_spec_1_0,
							"org.xtext.Go.Var_spec");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				otherlv_2='('
				{
					newLeafNode(otherlv_2, grammarAccess.getVar_declAccess().getLeftParenthesisKeyword_1_1_0());
				}
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getVar_declAccess().getVar_specVar_specParserRuleCall_1_1_1_0_0());
							}
							lv_Var_spec_3_0=ruleVar_spec
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getVar_declRule());
								}
								set(
									$current,
									"Var_spec",
									lv_Var_spec_3_0,
									"org.xtext.Go.Var_spec");
								afterParserOrEnumRuleCall();
							}
						)
					)
					this_SEMICOLON_4=RULE_SEMICOLON
					{
						newLeafNode(this_SEMICOLON_4, grammarAccess.getVar_declAccess().getSEMICOLONTerminalRuleCall_1_1_1_1());
					}
				)*
				otherlv_5=')'
				{
					newLeafNode(otherlv_5, grammarAccess.getVar_declAccess().getRightParenthesisKeyword_1_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuleVar_spec
entryRuleVar_spec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVar_specRule()); }
	iv_ruleVar_spec=ruleVar_spec
	{ $current=$iv_ruleVar_spec.current; }
	EOF;

// Rule Var_spec
ruleVar_spec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVar_specAccess().getIdentifier_listParserRuleCall_0());
		}
		ruleIdentifier_list
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVar_specAccess().getTypeParserRuleCall_1_0_0());
				}
				ruleType
				{
					afterParserOrEnumRuleCall();
				}
				(
					otherlv_2='='
					{
						newLeafNode(otherlv_2, grammarAccess.getVar_specAccess().getEqualsSignKeyword_1_0_1_0());
					}
					{
						newCompositeNode(grammarAccess.getVar_specAccess().getExpression_listParserRuleCall_1_0_1_1());
					}
					this_Expression_list_3=ruleExpression_list
					{
						$current = $this_Expression_list_3.current;
						afterParserOrEnumRuleCall();
					}
				)?
			)
			    |
			(
				otherlv_4='='
				{
					newLeafNode(otherlv_4, grammarAccess.getVar_specAccess().getEqualsSignKeyword_1_1_0());
				}
				{
					newCompositeNode(grammarAccess.getVar_specAccess().getExpression_listParserRuleCall_1_1_1());
				}
				this_Expression_list_5=ruleExpression_list
				{
					$current = $this_Expression_list_5.current;
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleShort_var_decl
entryRuleShort_var_decl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShort_var_declRule()); }
	iv_ruleShort_var_decl=ruleShort_var_decl
	{ $current=$iv_ruleShort_var_decl.current; }
	EOF;

// Rule Short_var_decl
ruleShort_var_decl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getShort_var_declAccess().getIdentifier_listParserRuleCall_0());
		}
		ruleIdentifier_list
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_1=':='
		{
			newLeafNode(otherlv_1, grammarAccess.getShort_var_declAccess().getColonEqualsSignKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getShort_var_declAccess().getExpression_listParserRuleCall_2());
		}
		this_Expression_list_2=ruleExpression_list
		{
			$current = $this_Expression_list_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFunction_decl
entryRuleFunction_decl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunction_declRule()); }
	iv_ruleFunction_decl=ruleFunction_decl
	{ $current=$iv_ruleFunction_decl.current; }
	EOF;

// Rule Function_decl
ruleFunction_decl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='func'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunction_declAccess().getFuncKeyword_0());
		}
		this_IDENTIFIER_1=RULE_IDENTIFIER
		{
			newLeafNode(this_IDENTIFIER_1, grammarAccess.getFunction_declAccess().getIDENTIFIERTerminalRuleCall_1());
		}
		{
			newCompositeNode(grammarAccess.getFunction_declAccess().getSignatureParserRuleCall_2());
		}
		ruleSignature
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getFunction_declAccess().getFunction_bodyParserRuleCall_3());
			}
			this_Function_body_3=ruleFunction_body
			{
				$current = $this_Function_body_3.current;
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleFunction_body
entryRuleFunction_body returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunction_bodyRule()); }
	iv_ruleFunction_body=ruleFunction_body
	{ $current=$iv_ruleFunction_body.current; }
	EOF;

// Rule Function_body
ruleFunction_body returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getFunction_bodyAccess().getBlockParserRuleCall());
	}
	this_Block_0=ruleBlock
	{
		$current = $this_Block_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleOperand
entryRuleOperand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperandRule()); }
	iv_ruleOperand=ruleOperand
	{ $current=$iv_ruleOperand.current; }
	EOF;

// Rule Operand
ruleOperand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOperandAccess().getLiteralsParserRuleCall_0());
		}
		ruleLiterals
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperandAccess().getOperand_nameParserRuleCall_1());
		}
		ruleOperand_name
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getOperandAccess().getLeftParenthesisKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getOperandAccess().getExpressionParserRuleCall_2_1());
			}
			this_Expression_3=ruleExpression
			{
				$current = $this_Expression_3.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getOperandAccess().getRightParenthesisKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRuleOperand_name
entryRuleOperand_name returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOperand_nameRule()); }
	iv_ruleOperand_name=ruleOperand_name
	{ $current=$iv_ruleOperand_name.current.getText(); }
	EOF;

// Rule Operand_name
ruleOperand_name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENTIFIER_0=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_0);
		}
		{
			newLeafNode(this_IDENTIFIER_0, grammarAccess.getOperand_nameAccess().getIDENTIFIERTerminalRuleCall_0());
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperand_nameAccess().getQualified_identParserRuleCall_1());
		}
		this_Qualified_ident_1=ruleQualified_ident
		{
			$current.merge(this_Qualified_ident_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleQualified_ident
entryRuleQualified_ident returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualified_identRule()); }
	iv_ruleQualified_ident=ruleQualified_ident
	{ $current=$iv_ruleQualified_ident.current.getText(); }
	EOF;

// Rule Qualified_ident
ruleQualified_ident returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENTIFIER_0=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_0);
		}
		{
			newLeafNode(this_IDENTIFIER_0, grammarAccess.getQualified_identAccess().getIDENTIFIERTerminalRuleCall_0());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQualified_identAccess().getFullStopKeyword_1());
		}
		this_IDENTIFIER_2=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_2);
		}
		{
			newLeafNode(this_IDENTIFIER_2, grammarAccess.getQualified_identAccess().getIDENTIFIERTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRulePrimary_expr
entryRulePrimary_expr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimary_exprRule()); }
	iv_rulePrimary_expr=rulePrimary_expr
	{ $current=$iv_rulePrimary_expr.current; }
	EOF;

// Rule Primary_expr
rulePrimary_expr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getPrimary_exprAccess().getOperandParserRuleCall());
	}
	this_Operand_0=ruleOperand
	{
		$current = $this_Operand_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getUnary_exprUnary_exprParserRuleCall_0_0());
				}
				lv_Unary_expr_0_0=ruleUnary_expr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"Unary_expr",
						lv_Unary_expr_0_0,
						"org.xtext.Go.Unary_expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getExpression_lineExpression_lineParserRuleCall_1_0());
				}
				lv_Expression_line_1_0=ruleExpression_line
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"Expression_line",
						lv_Expression_line_1_0,
						"org.xtext.Go.Expression_line");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpression_line
entryRuleExpression_line returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpression_lineRule()); }
	iv_ruleExpression_line=ruleExpression_line
	{ $current=$iv_ruleExpression_line.current; }
	EOF;

// Rule Expression_line
ruleExpression_line returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_binary_op_0_0=RULE_BINARY_OP
					{
						newLeafNode(lv_binary_op_0_0, grammarAccess.getExpression_lineAccess().getBinary_opBINARY_OPTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExpression_lineRule());
						}
						setWithLastConsumed(
							$current,
							"binary_op",
							lv_binary_op_0_0,
							"org.xtext.Go.BINARY_OP");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpression_lineAccess().getExpressionExpressionParserRuleCall_0_1_0());
					}
					lv_Expression_1_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpression_lineRule());
						}
						set(
							$current,
							"Expression",
							lv_Expression_1_0,
							"org.xtext.Go.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpression_lineAccess().getExpression_lineExpression_lineParserRuleCall_0_2_0());
					}
					lv_Expression_line_2_0=ruleExpression_line
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpression_lineRule());
						}
						set(
							$current,
							"Expression_line",
							lv_Expression_line_2_0,
							"org.xtext.Go.Expression_line");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getExpression_lineAccess().getExpression_lineAction_1_0(),
						$current);
				}
			)
			this_ANY_OTHER_4=RULE_ANY_OTHER
			{
				newLeafNode(this_ANY_OTHER_4, grammarAccess.getExpression_lineAccess().getANY_OTHERTerminalRuleCall_1_1());
			}
		)
	)
;

// Entry rule entryRuleUnary_expr
entryRuleUnary_expr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnary_exprRule()); }
	iv_ruleUnary_expr=ruleUnary_expr
	{ $current=$iv_ruleUnary_expr.current; }
	EOF;

// Rule Unary_expr
ruleUnary_expr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUnary_exprAccess().getPrimary_exprPrimary_exprParserRuleCall_0_0());
				}
				lv_Primary_expr_0_0=rulePrimary_expr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnary_exprRule());
					}
					set(
						$current,
						"Primary_expr",
						lv_Primary_expr_0_0,
						"org.xtext.Go.Primary_expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				(
					lv_unary_op_1_0=RULE_UNARY_OP
					{
						newLeafNode(lv_unary_op_1_0, grammarAccess.getUnary_exprAccess().getUnary_opUNARY_OPTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getUnary_exprRule());
						}
						setWithLastConsumed(
							$current,
							"unary_op",
							lv_unary_op_1_0,
							"org.xtext.Go.UNARY_OP");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getUnary_exprAccess().getUnary_exprUnary_exprParserRuleCall_1_1_0());
					}
					lv_Unary_expr_2_0=ruleUnary_expr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnary_exprRule());
						}
						set(
							$current,
							"Unary_expr",
							lv_Unary_expr_2_0,
							"org.xtext.Go.Unary_expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getDeclarationParserRuleCall_0());
		}
		this_Declaration_0=ruleDeclaration
		{
			$current = $this_Declaration_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getLabeled_stmtParserRuleCall_1());
		}
		this_Labeled_stmt_1=ruleLabeled_stmt
		{
			$current = $this_Labeled_stmt_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getGo_stmtParserRuleCall_2());
		}
		this_Go_stmt_2=ruleGo_stmt
		{
			$current = $this_Go_stmt_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getReturn_stmtParserRuleCall_3());
		}
		this_Return_stmt_3=ruleReturn_stmt
		{
			$current = $this_Return_stmt_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getBreak_stmtParserRuleCall_4());
		}
		ruleBreak_stmt
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getContinue_stmtParserRuleCall_5());
		}
		ruleContinue_stmt
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getGoto_stmtParserRuleCall_6());
		}
		ruleGoto_stmt
		{
			afterParserOrEnumRuleCall();
		}
		    |
		otherlv_7='fallthrough'
		{
			newLeafNode(otherlv_7, grammarAccess.getStatementAccess().getFallthroughKeyword_7());
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getBlockParserRuleCall_8());
		}
		this_Block_8=ruleBlock
		{
			$current = $this_Block_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIf_stmtParserRuleCall_9());
		}
		this_If_stmt_9=ruleIf_stmt
		{
			$current = $this_If_stmt_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getDefer_stmtParserRuleCall_10());
		}
		this_Defer_stmt_10=ruleDefer_stmt
		{
			$current = $this_Defer_stmt_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSimple_stmtParserRuleCall_11());
		}
		this_Simple_stmt_11=ruleSimple_stmt
		{
			$current = $this_Simple_stmt_11.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSimple_stmt
entryRuleSimple_stmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimple_stmtRule()); }
	iv_ruleSimple_stmt=ruleSimple_stmt
	{ $current=$iv_ruleSimple_stmt.current; }
	EOF;

// Rule Simple_stmt
ruleSimple_stmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSimple_stmtAccess().getEmpty_stmtParserRuleCall_0());
		}
		ruleEmpty_stmt
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSimple_stmtAccess().getShort_var_declParserRuleCall_1());
		}
		this_Short_var_decl_1=ruleShort_var_decl
		{
			$current = $this_Short_var_decl_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEmpty_stmt
entryRuleEmpty_stmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEmpty_stmtRule()); }
	iv_ruleEmpty_stmt=ruleEmpty_stmt
	{ $current=$iv_ruleEmpty_stmt.current.getText(); }
	EOF;

// Rule Empty_stmt
ruleEmpty_stmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_WS_0=RULE_WS
	{
		$current.merge(this_WS_0);
	}
	{
		newLeafNode(this_WS_0, grammarAccess.getEmpty_stmtAccess().getWSTerminalRuleCall());
	}
;

// Entry rule entryRuleLabeled_stmt
entryRuleLabeled_stmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLabeled_stmtRule()); }
	iv_ruleLabeled_stmt=ruleLabeled_stmt
	{ $current=$iv_ruleLabeled_stmt.current; }
	EOF;

// Rule Labeled_stmt
ruleLabeled_stmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_id_0_0=RULE_IDENTIFIER
				{
					newLeafNode(lv_id_0_0, grammarAccess.getLabeled_stmtAccess().getIdIDENTIFIERTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLabeled_stmtRule());
					}
					setWithLastConsumed(
						$current,
						"id",
						lv_id_0_0,
						"org.xtext.Go.IDENTIFIER");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getLabeled_stmtAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLabeled_stmtAccess().getStatementStatementParserRuleCall_2_0());
				}
				lv_Statement_2_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLabeled_stmtRule());
					}
					set(
						$current,
						"Statement",
						lv_Statement_2_0,
						"org.xtext.Go.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIf_stmt
entryRuleIf_stmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIf_stmtRule()); }
	iv_ruleIf_stmt=ruleIf_stmt
	{ $current=$iv_ruleIf_stmt.current; }
	EOF;

// Rule If_stmt
ruleIf_stmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIf_stmtAccess().getIfKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getIf_stmtAccess().getSimple_stmtParserRuleCall_1_0());
			}
			this_Simple_stmt_1=ruleSimple_stmt
			{
				$current = $this_Simple_stmt_1.current;
				afterParserOrEnumRuleCall();
			}
			this_SEMICOLON_2=RULE_SEMICOLON
			{
				newLeafNode(this_SEMICOLON_2, grammarAccess.getIf_stmtAccess().getSEMICOLONTerminalRuleCall_1_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getIf_stmtAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_Expression_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIf_stmtRule());
					}
					set(
						$current,
						"Expression",
						lv_Expression_3_0,
						"org.xtext.Go.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIf_stmtAccess().getBlockBlockParserRuleCall_3_0());
				}
				lv_Block_4_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIf_stmtRule());
					}
					set(
						$current,
						"Block",
						lv_Block_4_0,
						"org.xtext.Go.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5='else'
			{
				newLeafNode(otherlv_5, grammarAccess.getIf_stmtAccess().getElseKeyword_4_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getIf_stmtAccess().getIf_stmtIf_stmtParserRuleCall_4_1_0_0());
						}
						lv_If_stmt_6_0=ruleIf_stmt
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getIf_stmtRule());
							}
							set(
								$current,
								"If_stmt",
								lv_If_stmt_6_0,
								"org.xtext.Go.If_stmt");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getIf_stmtAccess().getBlockBlockParserRuleCall_4_1_1_0());
						}
						lv_Block_7_0=ruleBlock
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getIf_stmtRule());
							}
							set(
								$current,
								"Block",
								lv_Block_7_0,
								"org.xtext.Go.Block");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
	)
;

// Entry rule entryRuleGo_stmt
entryRuleGo_stmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGo_stmtRule()); }
	iv_ruleGo_stmt=ruleGo_stmt
	{ $current=$iv_ruleGo_stmt.current; }
	EOF;

// Rule Go_stmt
ruleGo_stmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='go'
		{
			newLeafNode(otherlv_0, grammarAccess.getGo_stmtAccess().getGoKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getGo_stmtAccess().getExpressionParserRuleCall_1());
		}
		this_Expression_1=ruleExpression
		{
			$current = $this_Expression_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleReturn_stmt
entryRuleReturn_stmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReturn_stmtRule()); }
	iv_ruleReturn_stmt=ruleReturn_stmt
	{ $current=$iv_ruleReturn_stmt.current; }
	EOF;

// Rule Return_stmt
ruleReturn_stmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='return'
		{
			newLeafNode(otherlv_0, grammarAccess.getReturn_stmtAccess().getReturnKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getReturn_stmtAccess().getExpression_listParserRuleCall_1());
			}
			this_Expression_list_1=ruleExpression_list
			{
				$current = $this_Expression_list_1.current;
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleBreak_stmt
entryRuleBreak_stmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBreak_stmtRule()); }
	iv_ruleBreak_stmt=ruleBreak_stmt
	{ $current=$iv_ruleBreak_stmt.current.getText(); }
	EOF;

// Rule Break_stmt
ruleBreak_stmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='break'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBreak_stmtAccess().getBreakKeyword_0());
		}
		(
			this_IDENTIFIER_1=RULE_IDENTIFIER
			{
				$current.merge(this_IDENTIFIER_1);
			}
			{
				newLeafNode(this_IDENTIFIER_1, grammarAccess.getBreak_stmtAccess().getIDENTIFIERTerminalRuleCall_1());
			}
		)?
	)
;

// Entry rule entryRuleContinue_stmt
entryRuleContinue_stmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getContinue_stmtRule()); }
	iv_ruleContinue_stmt=ruleContinue_stmt
	{ $current=$iv_ruleContinue_stmt.current.getText(); }
	EOF;

// Rule Continue_stmt
ruleContinue_stmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='continue'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getContinue_stmtAccess().getContinueKeyword_0());
		}
		(
			this_IDENTIFIER_1=RULE_IDENTIFIER
			{
				$current.merge(this_IDENTIFIER_1);
			}
			{
				newLeafNode(this_IDENTIFIER_1, grammarAccess.getContinue_stmtAccess().getIDENTIFIERTerminalRuleCall_1());
			}
		)?
	)
;

// Entry rule entryRuleGoto_stmt
entryRuleGoto_stmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getGoto_stmtRule()); }
	iv_ruleGoto_stmt=ruleGoto_stmt
	{ $current=$iv_ruleGoto_stmt.current.getText(); }
	EOF;

// Rule Goto_stmt
ruleGoto_stmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='goto'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getGoto_stmtAccess().getGotoKeyword_0());
		}
		this_IDENTIFIER_1=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_1);
		}
		{
			newLeafNode(this_IDENTIFIER_1, grammarAccess.getGoto_stmtAccess().getIDENTIFIERTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleDefer_stmt
entryRuleDefer_stmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefer_stmtRule()); }
	iv_ruleDefer_stmt=ruleDefer_stmt
	{ $current=$iv_ruleDefer_stmt.current; }
	EOF;

// Rule Defer_stmt
ruleDefer_stmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='defer'
		{
			newLeafNode(otherlv_0, grammarAccess.getDefer_stmtAccess().getDeferKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getDefer_stmtAccess().getExpressionParserRuleCall_1());
		}
		this_Expression_1=ruleExpression
		{
			$current = $this_Expression_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePackage_clause
entryRulePackage_clause returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPackage_clauseRule()); }
	iv_rulePackage_clause=rulePackage_clause
	{ $current=$iv_rulePackage_clause.current.getText(); }
	EOF;

// Rule Package_clause
rulePackage_clause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='package'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPackage_clauseAccess().getPackageKeyword_0());
		}
		this_IDENTIFIER_1=RULE_IDENTIFIER
		{
			$current.merge(this_IDENTIFIER_1);
		}
		{
			newLeafNode(this_IDENTIFIER_1, grammarAccess.getPackage_clauseAccess().getIDENTIFIERTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleImport_decl
entryRuleImport_decl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getImport_declRule()); }
	iv_ruleImport_decl=ruleImport_decl
	{ $current=$iv_ruleImport_decl.current.getText(); }
	EOF;

// Rule Import_decl
ruleImport_decl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='import'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getImport_declAccess().getImportKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getImport_declAccess().getImport_specParserRuleCall_1_0());
			}
			this_Import_spec_1=ruleImport_spec
			{
				$current.merge(this_Import_spec_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			(
				kw='('
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getImport_declAccess().getLeftParenthesisKeyword_1_1_0());
				}
				(
					{
						newCompositeNode(grammarAccess.getImport_declAccess().getImport_specParserRuleCall_1_1_1_0());
					}
					this_Import_spec_3=ruleImport_spec
					{
						$current.merge(this_Import_spec_3);
					}
					{
						afterParserOrEnumRuleCall();
					}
					this_SEMICOLON_4=RULE_SEMICOLON
					{
						$current.merge(this_SEMICOLON_4);
					}
					{
						newLeafNode(this_SEMICOLON_4, grammarAccess.getImport_declAccess().getSEMICOLONTerminalRuleCall_1_1_1_1());
					}
				)*
				kw=')'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getImport_declAccess().getRightParenthesisKeyword_1_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuleImport_spec
entryRuleImport_spec returns [String current=null]:
	{ newCompositeNode(grammarAccess.getImport_specRule()); }
	iv_ruleImport_spec=ruleImport_spec
	{ $current=$iv_ruleImport_spec.current.getText(); }
	EOF;

// Rule Import_spec
ruleImport_spec returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getImport_specAccess().getFullStopKeyword_0_0());
			}
			    |
			this_IDENTIFIER_1=RULE_IDENTIFIER
			{
				$current.merge(this_IDENTIFIER_1);
			}
			{
				newLeafNode(this_IDENTIFIER_1, grammarAccess.getImport_specAccess().getIDENTIFIERTerminalRuleCall_0_1());
			}
		)?
		{
			newCompositeNode(grammarAccess.getImport_specAccess().getImport_pathParserRuleCall_1());
		}
		this_Import_path_2=ruleImport_path
		{
			$current.merge(this_Import_path_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleImport_path
entryRuleImport_path returns [String current=null]:
	{ newCompositeNode(grammarAccess.getImport_pathRule()); }
	iv_ruleImport_path=ruleImport_path
	{ $current=$iv_ruleImport_path.current.getText(); }
	EOF;

// Rule Import_path
ruleImport_path returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getImport_pathAccess().getString_litParserRuleCall());
	}
	this_String_lit_0=ruleString_lit
	{
		$current.merge(this_String_lit_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

RULE_SEMICOLON : ';';

RULE_BINARY_OP : ('||'|'&&'|RULE_REL_OP|RULE_ADD_OP|RULE_MUL_OP);

fragment RULE_REL_OP : ('=='|'!='|'<'|'<='|'>'|'>=');

fragment RULE_ADD_OP : ('+'|'-'|'|'|'^');

fragment RULE_MUL_OP : ('*'|'/'|'%'|'<<'|'>>'|'&'|'&^');

RULE_UNARY_OP : ('+'|'-'|'!'|'^'|'*'|'&'|'<-');

RULE_ASSIGN_OP : (RULE_ADD_OP|RULE_MUL_OP)? '=';

fragment RULE_NEWLINE : '\n';

fragment RULE_LETTER : (RULE_UNICODE_LETTER|'_');

fragment RULE_HEX_DIGIT : (RULE_UNICODE_DIGIT|'A'..'F'|'a'..'f');

RULE_KEYWORDS : ('break'|'default'|'func'|'interface'|'select'|'case'|'defer'|'go'|'map'|'struct'|'chan'|'else'|'goto'|'package'|'switch'|'const'|'fallthrough'|'if'|'range'|'type'|'continue'|'for'|'import'|'return'|'var');

RULE_IDENTIFIER : RULE_LETTER (RULE_LETTER|RULE_UNICODE_DIGIT)*;

fragment RULE_UNICODE_CHAR : ('A'..'Z'|'a'..'z');

fragment RULE_UNICODE_LETTER : RULE_UNICODE_CHAR;

fragment RULE_UNICODE_DIGIT : ('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9');

RULE_OCTAL_LIT : '0' ('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7')*;

RULE_HEX_LIT : '0' ('X'|'x') RULE_HEX_DIGIT RULE_HEX_DIGIT*;

RULE_UNICODE_VALUE : (RULE_UNICODE_CHAR|RULE_LITTLE_U_VALUE|RULE_BIG_U_VALUE|RULE_ESCAPED_CHAR);

RULE_OCTAL_BYTE_VALUE : '\\' ('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7') ('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7') ('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7');

RULE_HEX_BYTE_VALUE : '\\' 'x' RULE_HEX_DIGIT RULE_HEX_DIGIT;

fragment RULE_LITTLE_U_VALUE : '\\' 'u' RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT;

fragment RULE_BIG_U_VALUE : '\\' 'U' RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT;

fragment RULE_ESCAPED_CHAR : '\\' ('a'|'b'|'f'|'n'|'r'|'t'|'v'|'\\'|'\''|'"');

RULE_RAW_STRING_LIT : '`' (RULE_UNICODE_CHAR|RULE_NEWLINE)* '`';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
