/*
 * generated by Xtext 2.13.0
 */
grammar InternalGo;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.GoGrammarAccess;

}

@parser::members {

 	private GoGrammarAccess grammarAccess;

    public InternalGoParser(TokenStream input, GoGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected GoGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getGreetingsProgramParserRuleCall_0());
			}
			lv_greetings_0_0=ruleprogram
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"greetings",
					lv_greetings_0_0,
					"org.xtext.Go.program");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleprogram
entryRuleprogram returns [String current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleprogram=ruleprogram
	{ $current=$iv_ruleprogram.current.getText(); }
	EOF;

// Rule program
ruleprogram returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getProgramAccess().getImport_declParserRuleCall());
	}
	this_Import_decl_0=ruleImport_decl
	{
		$current.merge(this_Import_decl_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleIdentifier_Unicode_Value
entryRuleIdentifier_Unicode_Value returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIdentifier_Unicode_ValueRule()); }
	iv_ruleIdentifier_Unicode_Value=ruleIdentifier_Unicode_Value
	{ $current=$iv_ruleIdentifier_Unicode_Value.current.getText(); }
	EOF;

// Rule Identifier_Unicode_Value
ruleIdentifier_Unicode_Value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_LETTER_0=RULE_LETTER
		{
			$current.merge(this_LETTER_0);
		}
		{
			newLeafNode(this_LETTER_0, grammarAccess.getIdentifier_Unicode_ValueAccess().getLETTERTerminalRuleCall_0());
		}
		(
			this_IDENTIFIER_1=RULE_IDENTIFIER
			{
				$current.merge(this_IDENTIFIER_1);
			}
			{
				newLeafNode(this_IDENTIFIER_1, grammarAccess.getIdentifier_Unicode_ValueAccess().getIDENTIFIERTerminalRuleCall_1_0());
			}
			    |
			{
				newCompositeNode(grammarAccess.getIdentifier_Unicode_ValueAccess().getUnicode_valueParserRuleCall_1_1());
			}
			this_Unicode_value_2=ruleUnicode_value
			{
				$current.merge(this_Unicode_value_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleUnicode_value
entryRuleUnicode_value returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnicode_valueRule()); }
	iv_ruleUnicode_value=ruleUnicode_value
	{ $current=$iv_ruleUnicode_value.current.getText(); }
	EOF;

// Rule Unicode_value
ruleUnicode_value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getUnicode_valueAccess().getLittle_u_valueParserRuleCall_0());
		}
		this_Little_u_value_0=ruleLittle_u_value
		{
			$current.merge(this_Little_u_value_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnicode_valueAccess().getBig_u_valueParserRuleCall_1());
		}
		this_Big_u_value_1=ruleBig_u_value
		{
			$current.merge(this_Big_u_value_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnicode_valueAccess().getEscaped_charParserRuleCall_2());
		}
		this_Escaped_char_2=ruleEscaped_char
		{
			$current.merge(this_Escaped_char_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleByte_value
entryRuleByte_value returns [String current=null]:
	{ newCompositeNode(grammarAccess.getByte_valueRule()); }
	iv_ruleByte_value=ruleByte_value
	{ $current=$iv_ruleByte_value.current.getText(); }
	EOF;

// Rule Byte_value
ruleByte_value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getByte_valueAccess().getOctal_byte_valueParserRuleCall_0());
		}
		this_Octal_byte_value_0=ruleOctal_byte_value
		{
			$current.merge(this_Octal_byte_value_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getByte_valueAccess().getHex_byte_valueParserRuleCall_1());
		}
		this_Hex_byte_value_1=ruleHex_byte_value
		{
			$current.merge(this_Hex_byte_value_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOctal_byte_value
entryRuleOctal_byte_value returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOctal_byte_valueRule()); }
	iv_ruleOctal_byte_value=ruleOctal_byte_value
	{ $current=$iv_ruleOctal_byte_value.current.getText(); }
	EOF;

// Rule Octal_byte_value
ruleOctal_byte_value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='\\'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOctal_byte_valueAccess().getBackslashKeyword_0());
		}
		(
			kw='0'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOctal_byte_valueAccess().getDigitZeroKeyword_1_0());
			}
			    |
			kw='1'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOctal_byte_valueAccess().getDigitOneKeyword_1_1());
			}
			    |
			kw='2'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOctal_byte_valueAccess().getDigitTwoKeyword_1_2());
			}
			    |
			kw='3'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOctal_byte_valueAccess().getDigitThreeKeyword_1_3());
			}
			    |
			kw='4'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOctal_byte_valueAccess().getDigitFourKeyword_1_4());
			}
			    |
			kw='5'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOctal_byte_valueAccess().getDigitFiveKeyword_1_5());
			}
			    |
			kw='6'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOctal_byte_valueAccess().getDigitSixKeyword_1_6());
			}
			    |
			kw='7'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOctal_byte_valueAccess().getDigitSevenKeyword_1_7());
			}
		)
		(
			kw='0'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOctal_byte_valueAccess().getDigitZeroKeyword_2_0());
			}
			    |
			kw='1'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOctal_byte_valueAccess().getDigitOneKeyword_2_1());
			}
			    |
			kw='2'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOctal_byte_valueAccess().getDigitTwoKeyword_2_2());
			}
			    |
			kw='3'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOctal_byte_valueAccess().getDigitThreeKeyword_2_3());
			}
			    |
			kw='4'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOctal_byte_valueAccess().getDigitFourKeyword_2_4());
			}
			    |
			kw='5'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOctal_byte_valueAccess().getDigitFiveKeyword_2_5());
			}
			    |
			kw='6'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOctal_byte_valueAccess().getDigitSixKeyword_2_6());
			}
			    |
			kw='7'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOctal_byte_valueAccess().getDigitSevenKeyword_2_7());
			}
		)
		(
			kw='0'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOctal_byte_valueAccess().getDigitZeroKeyword_3_0());
			}
			    |
			kw='1'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOctal_byte_valueAccess().getDigitOneKeyword_3_1());
			}
			    |
			kw='2'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOctal_byte_valueAccess().getDigitTwoKeyword_3_2());
			}
			    |
			kw='3'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOctal_byte_valueAccess().getDigitThreeKeyword_3_3());
			}
			    |
			kw='4'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOctal_byte_valueAccess().getDigitFourKeyword_3_4());
			}
			    |
			kw='5'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOctal_byte_valueAccess().getDigitFiveKeyword_3_5());
			}
			    |
			kw='6'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOctal_byte_valueAccess().getDigitSixKeyword_3_6());
			}
			    |
			kw='7'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOctal_byte_valueAccess().getDigitSevenKeyword_3_7());
			}
		)
	)
;

// Entry rule entryRuleHex_byte_value
entryRuleHex_byte_value returns [String current=null]:
	{ newCompositeNode(grammarAccess.getHex_byte_valueRule()); }
	iv_ruleHex_byte_value=ruleHex_byte_value
	{ $current=$iv_ruleHex_byte_value.current.getText(); }
	EOF;

// Rule Hex_byte_value
ruleHex_byte_value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='\\'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getHex_byte_valueAccess().getBackslashKeyword_0());
		}
		kw='x'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getHex_byte_valueAccess().getXKeyword_1());
		}
		this_HEX_DIGIT_2=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_2);
		}
		{
			newLeafNode(this_HEX_DIGIT_2, grammarAccess.getHex_byte_valueAccess().getHEX_DIGITTerminalRuleCall_2());
		}
		this_HEX_DIGIT_3=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_3);
		}
		{
			newLeafNode(this_HEX_DIGIT_3, grammarAccess.getHex_byte_valueAccess().getHEX_DIGITTerminalRuleCall_3());
		}
	)
;

// Entry rule entryRuleLittle_u_value
entryRuleLittle_u_value returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLittle_u_valueRule()); }
	iv_ruleLittle_u_value=ruleLittle_u_value
	{ $current=$iv_ruleLittle_u_value.current.getText(); }
	EOF;

// Rule Little_u_value
ruleLittle_u_value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='\\'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLittle_u_valueAccess().getBackslashKeyword_0());
		}
		kw='u'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLittle_u_valueAccess().getUKeyword_1());
		}
		this_HEX_DIGIT_2=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_2);
		}
		{
			newLeafNode(this_HEX_DIGIT_2, grammarAccess.getLittle_u_valueAccess().getHEX_DIGITTerminalRuleCall_2());
		}
		this_HEX_DIGIT_3=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_3);
		}
		{
			newLeafNode(this_HEX_DIGIT_3, grammarAccess.getLittle_u_valueAccess().getHEX_DIGITTerminalRuleCall_3());
		}
		this_HEX_DIGIT_4=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_4);
		}
		{
			newLeafNode(this_HEX_DIGIT_4, grammarAccess.getLittle_u_valueAccess().getHEX_DIGITTerminalRuleCall_4());
		}
		this_HEX_DIGIT_5=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_5);
		}
		{
			newLeafNode(this_HEX_DIGIT_5, grammarAccess.getLittle_u_valueAccess().getHEX_DIGITTerminalRuleCall_5());
		}
	)
;

// Entry rule entryRuleBig_u_value
entryRuleBig_u_value returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBig_u_valueRule()); }
	iv_ruleBig_u_value=ruleBig_u_value
	{ $current=$iv_ruleBig_u_value.current.getText(); }
	EOF;

// Rule Big_u_value
ruleBig_u_value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='\\'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBig_u_valueAccess().getBackslashKeyword_0());
		}
		kw='U'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBig_u_valueAccess().getUKeyword_1());
		}
		this_HEX_DIGIT_2=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_2);
		}
		{
			newLeafNode(this_HEX_DIGIT_2, grammarAccess.getBig_u_valueAccess().getHEX_DIGITTerminalRuleCall_2());
		}
		this_HEX_DIGIT_3=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_3);
		}
		{
			newLeafNode(this_HEX_DIGIT_3, grammarAccess.getBig_u_valueAccess().getHEX_DIGITTerminalRuleCall_3());
		}
		this_HEX_DIGIT_4=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_4);
		}
		{
			newLeafNode(this_HEX_DIGIT_4, grammarAccess.getBig_u_valueAccess().getHEX_DIGITTerminalRuleCall_4());
		}
		this_HEX_DIGIT_5=RULE_HEX_DIGIT
		{
			$current.merge(this_HEX_DIGIT_5);
		}
		{
			newLeafNode(this_HEX_DIGIT_5, grammarAccess.getBig_u_valueAccess().getHEX_DIGITTerminalRuleCall_5());
		}
	)
;

// Entry rule entryRuleEscaped_char
entryRuleEscaped_char returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEscaped_charRule()); }
	iv_ruleEscaped_char=ruleEscaped_char
	{ $current=$iv_ruleEscaped_char.current.getText(); }
	EOF;

// Rule Escaped_char
ruleEscaped_char returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='\\'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEscaped_charAccess().getBackslashKeyword_0());
		}
		(
			kw='a'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEscaped_charAccess().getAKeyword_1_0());
			}
			    |
			kw='b'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEscaped_charAccess().getBKeyword_1_1());
			}
			    |
			kw='f'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEscaped_charAccess().getFKeyword_1_2());
			}
			    |
			kw='n'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEscaped_charAccess().getNKeyword_1_3());
			}
			    |
			kw='r'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEscaped_charAccess().getRKeyword_1_4());
			}
			    |
			kw='t'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEscaped_charAccess().getTKeyword_1_5());
			}
			    |
			kw='v'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEscaped_charAccess().getVKeyword_1_6());
			}
			    |
			kw='\\'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEscaped_charAccess().getBackslashKeyword_1_7());
			}
			    |
			kw='\''
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEscaped_charAccess().getApostropheKeyword_1_8());
			}
			    |
			kw='"'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEscaped_charAccess().getQuotationMarkKeyword_1_9());
			}
		)
	)
;

// Entry rule entryRuleString_lit
entryRuleString_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getString_litRule()); }
	iv_ruleString_lit=ruleString_lit
	{ $current=$iv_ruleString_lit.current.getText(); }
	EOF;

// Rule String_lit
ruleString_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getString_litAccess().getRaw_string_litParserRuleCall_0());
		}
		this_Raw_string_lit_0=ruleRaw_string_lit
		{
			$current.merge(this_Raw_string_lit_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getString_litAccess().getInterpreted_string_litParserRuleCall_1());
		}
		this_Interpreted_string_lit_1=ruleInterpreted_string_lit
		{
			$current.merge(this_Interpreted_string_lit_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRaw_string_lit
entryRuleRaw_string_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRaw_string_litRule()); }
	iv_ruleRaw_string_lit=ruleRaw_string_lit
	{ $current=$iv_ruleRaw_string_lit.current.getText(); }
	EOF;

// Rule Raw_string_lit
ruleRaw_string_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='`'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRaw_string_litAccess().getGraveAccentKeyword_0());
		}
		(
			this_UNICODE_CHAR_1=RULE_UNICODE_CHAR
			{
				$current.merge(this_UNICODE_CHAR_1);
			}
			{
				newLeafNode(this_UNICODE_CHAR_1, grammarAccess.getRaw_string_litAccess().getUNICODE_CHARTerminalRuleCall_1_0());
			}
			    |
			this_NEWLINE_2=RULE_NEWLINE
			{
				$current.merge(this_NEWLINE_2);
			}
			{
				newLeafNode(this_NEWLINE_2, grammarAccess.getRaw_string_litAccess().getNEWLINETerminalRuleCall_1_1());
			}
		)*
		kw='`'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRaw_string_litAccess().getGraveAccentKeyword_2());
		}
	)
;

// Entry rule entryRuleInterpreted_string_lit
entryRuleInterpreted_string_lit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getInterpreted_string_litRule()); }
	iv_ruleInterpreted_string_lit=ruleInterpreted_string_lit
	{ $current=$iv_ruleInterpreted_string_lit.current.getText(); }
	EOF;

// Rule Interpreted_string_lit
ruleInterpreted_string_lit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='"'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInterpreted_string_litAccess().getQuotationMarkKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getInterpreted_string_litAccess().getIdentifier_Unicode_ValueParserRuleCall_1_0());
			}
			this_Identifier_Unicode_Value_1=ruleIdentifier_Unicode_Value
			{
				$current.merge(this_Identifier_Unicode_Value_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getInterpreted_string_litAccess().getByte_valueParserRuleCall_1_1());
			}
			this_Byte_value_2=ruleByte_value
			{
				$current.merge(this_Byte_value_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
		kw='"'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInterpreted_string_litAccess().getQuotationMarkKeyword_2());
		}
	)
;

// Entry rule entryRuleImport_decl
entryRuleImport_decl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getImport_declRule()); }
	iv_ruleImport_decl=ruleImport_decl
	{ $current=$iv_ruleImport_decl.current.getText(); }
	EOF;

// Rule Import_decl
ruleImport_decl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='import'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getImport_declAccess().getImportKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getImport_declAccess().getImport_specParserRuleCall_1_0());
			}
			this_Import_spec_1=ruleImport_spec
			{
				$current.merge(this_Import_spec_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			(
				kw='('
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getImport_declAccess().getLeftParenthesisKeyword_1_1_0());
				}
				(
					{
						newCompositeNode(grammarAccess.getImport_declAccess().getImport_specParserRuleCall_1_1_1_0());
					}
					this_Import_spec_3=ruleImport_spec
					{
						$current.merge(this_Import_spec_3);
					}
					{
						afterParserOrEnumRuleCall();
					}
					this_SEMICOLON_4=RULE_SEMICOLON
					{
						$current.merge(this_SEMICOLON_4);
					}
					{
						newLeafNode(this_SEMICOLON_4, grammarAccess.getImport_declAccess().getSEMICOLONTerminalRuleCall_1_1_1_1());
					}
				)*
				kw=')'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getImport_declAccess().getRightParenthesisKeyword_1_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuleImport_spec
entryRuleImport_spec returns [String current=null]:
	{ newCompositeNode(grammarAccess.getImport_specRule()); }
	iv_ruleImport_spec=ruleImport_spec
	{ $current=$iv_ruleImport_spec.current.getText(); }
	EOF;

// Rule Import_spec
ruleImport_spec returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getImport_specAccess().getFullStopKeyword_0_0());
			}
			    |
			{
				newCompositeNode(grammarAccess.getImport_specAccess().getIdentifier_Unicode_ValueParserRuleCall_0_1());
			}
			this_Identifier_Unicode_Value_1=ruleIdentifier_Unicode_Value
			{
				$current.merge(this_Identifier_Unicode_Value_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		{
			newCompositeNode(grammarAccess.getImport_specAccess().getString_litParserRuleCall_1());
		}
		this_String_lit_2=ruleString_lit
		{
			$current.merge(this_String_lit_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

RULE_SEMICOLON : ';';

RULE_NEWLINE : '\n';

RULE_HEX_DIGIT : (RULE_UNICODE_DIGIT|'A'..'F'|'a'..'f');

RULE_IDENTIFIER : (RULE_LETTER|RULE_UNICODE_DIGIT)*;

RULE_LETTER : (RULE_UNICODE_CHAR|'_');

RULE_UNICODE_CHAR : ('A'..'Z'|'a'..'z');

fragment RULE_UNICODE_DIGIT : '0'..'9';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
