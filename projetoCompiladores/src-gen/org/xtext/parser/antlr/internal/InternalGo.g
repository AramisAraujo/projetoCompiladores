/*
 * generated by Xtext 2.14.0
 */
grammar InternalGo;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.GoGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private GoGrammarAccess grammarAccess;

    public InternalGoParser(TokenStream input, GoGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected GoGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getGreetingsSourceFileParserRuleCall_0());
			}
			lv_greetings_0_0=rulesourceFile
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"greetings",
					lv_greetings_0_0,
					"org.xtext.Go.sourceFile");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulesourceFile
entryRulesourceFile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSourceFileRule()); }
	iv_rulesourceFile=rulesourceFile
	{ $current=$iv_rulesourceFile.current; }
	EOF;

// Rule sourceFile
rulesourceFile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSourceFileAccess().getPackagePackageClauseParserRuleCall_0_0());
				}
				lv_package_0_0=rulepackageClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSourceFileRule());
					}
					set(
						$current,
						"package",
						lv_package_0_0,
						"org.xtext.Go.packageClause");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getSourceFileAccess().getEosParserRuleCall_1());
			}
			ruleeos
			{
				afterParserOrEnumRuleCall();
			}
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSourceFileAccess().getImportsImportDeclParserRuleCall_2_0_0());
					}
					lv_imports_2_0=ruleimportDecl
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSourceFileRule());
						}
						add(
							$current,
							"imports",
							lv_imports_2_0,
							"org.xtext.Go.importDecl");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				{
					/* */
				}
				{
					newCompositeNode(grammarAccess.getSourceFileAccess().getEosParserRuleCall_2_1());
				}
				ruleeos
				{
					afterParserOrEnumRuleCall();
				}
			)?
		)*
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSourceFileAccess().getTopLevelDeclsTopLevelDeclParserRuleCall_3_0_0());
					}
					lv_topLevelDecls_4_0=ruletopLevelDecl
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSourceFileRule());
						}
						add(
							$current,
							"topLevelDecls",
							lv_topLevelDecls_4_0,
							"org.xtext.Go.topLevelDecl");
						afterParserOrEnumRuleCall();
					}
				)
			)
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getSourceFileAccess().getEosParserRuleCall_3_1());
			}
			ruleeos
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRulepackageClause
entryRulepackageClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPackageClauseRule()); }
	iv_rulepackageClause=rulepackageClause
	{ $current=$iv_rulepackageClause.current; }
	EOF;

// Rule packageClause
rulepackageClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='package'
		{
			newLeafNode(otherlv_0, grammarAccess.getPackageClauseAccess().getPackageKeyword_0());
		}
		(
			(
				lv_packageName_1_0=RULE_IDENTIFIER
				{
					newLeafNode(lv_packageName_1_0, grammarAccess.getPackageClauseAccess().getPackageNameIDENTIFIERTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPackageClauseRule());
					}
					setWithLastConsumed(
						$current,
						"packageName",
						lv_packageName_1_0,
						"org.xtext.Go.IDENTIFIER");
				}
			)
		)
	)
;

// Entry rule entryRuleimportDecl
entryRuleimportDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportDeclRule()); }
	iv_ruleimportDecl=ruleimportDecl
	{ $current=$iv_ruleimportDecl.current; }
	EOF;

// Rule importDecl
ruleimportDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportDeclAccess().getImportKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getImportDeclAccess().getSpecsImportSpecParserRuleCall_1_0_0());
					}
					lv_specs_1_0=ruleimportSpec
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImportDeclRule());
						}
						add(
							$current,
							"specs",
							lv_specs_1_0,
							"org.xtext.Go.importSpec");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				otherlv_2='('
				{
					newLeafNode(otherlv_2, grammarAccess.getImportDeclAccess().getLeftParenthesisKeyword_1_1_0());
				}
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getImportDeclAccess().getSpecsImportSpecParserRuleCall_1_1_1_0_0());
							}
							lv_specs_3_0=ruleimportSpec
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getImportDeclRule());
								}
								add(
									$current,
									"specs",
									lv_specs_3_0,
									"org.xtext.Go.importSpec");
								afterParserOrEnumRuleCall();
							}
						)
					)
					{
						/* */
					}
					{
						newCompositeNode(grammarAccess.getImportDeclAccess().getEosParserRuleCall_1_1_1_1());
					}
					ruleeos
					{
						afterParserOrEnumRuleCall();
					}
				)*
				otherlv_5=')'
				{
					newLeafNode(otherlv_5, grammarAccess.getImportDeclAccess().getRightParenthesisKeyword_1_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuleimportSpec
entryRuleimportSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportSpecRule()); }
	iv_ruleimportSpec=ruleimportSpec
	{ $current=$iv_ruleimportSpec.current; }
	EOF;

// Rule importSpec
ruleimportSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='.'
			{
				newLeafNode(otherlv_0, grammarAccess.getImportSpecAccess().getFullStopKeyword_0_0());
			}
			    |
			this_IDENTIFIER_1=RULE_IDENTIFIER
			{
				newLeafNode(this_IDENTIFIER_1, grammarAccess.getImportSpecAccess().getIDENTIFIERTerminalRuleCall_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getImportSpecAccess().getPathImportPathParserRuleCall_1_0());
				}
				lv_path_2_0=ruleimportPath
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImportSpecRule());
					}
					set(
						$current,
						"path",
						lv_path_2_0,
						"org.xtext.Go.importPath");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleimportPath
entryRuleimportPath returns [String current=null]:
	{ newCompositeNode(grammarAccess.getImportPathRule()); }
	iv_ruleimportPath=ruleimportPath
	{ $current=$iv_ruleimportPath.current.getText(); }
	EOF;

// Rule importPath
ruleimportPath returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_STRING_LIT_0=RULE_STRING_LIT
	{
		$current.merge(this_STRING_LIT_0);
	}
	{
		newLeafNode(this_STRING_LIT_0, grammarAccess.getImportPathAccess().getSTRING_LITTerminalRuleCall());
	}
;

// Entry rule entryRuletopLevelDecl
entryRuletopLevelDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTopLevelDeclRule()); }
	iv_ruletopLevelDecl=ruletopLevelDecl
	{ $current=$iv_ruletopLevelDecl.current; }
	EOF;

// Rule topLevelDecl
ruletopLevelDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTopLevelDeclAccess().getDeclDeclarationParserRuleCall_0_0());
				}
				lv_decl_0_0=ruledeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTopLevelDeclRule());
					}
					set(
						$current,
						"decl",
						lv_decl_0_0,
						"org.xtext.Go.declaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTopLevelDeclAccess().getDeclFunctionDeclParserRuleCall_1_0());
				}
				lv_decl_1_0=rulefunctionDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTopLevelDeclRule());
					}
					set(
						$current,
						"decl",
						lv_decl_1_0,
						"org.xtext.Go.functionDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTopLevelDeclAccess().getDeclMethodDeclParserRuleCall_2_0());
				}
				lv_decl_2_0=rulemethodDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTopLevelDeclRule());
					}
					set(
						$current,
						"decl",
						lv_decl_2_0,
						"org.xtext.Go.methodDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuledeclaration
entryRuledeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	iv_ruledeclaration=ruledeclaration
	{ $current=$iv_ruledeclaration.current; }
	EOF;

// Rule declaration
ruledeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclarationAccess().getDeclConstDeclParserRuleCall_0_0());
				}
				lv_decl_0_0=ruleconstDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclarationRule());
					}
					set(
						$current,
						"decl",
						lv_decl_0_0,
						"org.xtext.Go.constDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclarationAccess().getDeclTypeDeclParserRuleCall_1_0());
				}
				lv_decl_1_0=ruletypeDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclarationRule());
					}
					set(
						$current,
						"decl",
						lv_decl_1_0,
						"org.xtext.Go.typeDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclarationAccess().getDeclVarDeclParserRuleCall_2_0());
				}
				lv_decl_2_0=rulevarDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclarationRule());
					}
					set(
						$current,
						"decl",
						lv_decl_2_0,
						"org.xtext.Go.varDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleconstDecl
entryRuleconstDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstDeclRule()); }
	iv_ruleconstDecl=ruleconstDecl
	{ $current=$iv_ruleconstDecl.current; }
	EOF;

// Rule constDecl
ruleconstDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='const'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstDeclAccess().getConstKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConstDeclAccess().getSpecConstSpecParserRuleCall_1_0_0());
					}
					lv_spec_1_0=ruleconstSpec
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstDeclRule());
						}
						add(
							$current,
							"spec",
							lv_spec_1_0,
							"org.xtext.Go.constSpec");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				otherlv_2='('
				{
					newLeafNode(otherlv_2, grammarAccess.getConstDeclAccess().getLeftParenthesisKeyword_1_1_0());
				}
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getConstDeclAccess().getSpecConstSpecParserRuleCall_1_1_1_0_0());
							}
							lv_spec_3_0=ruleconstSpec
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getConstDeclRule());
								}
								add(
									$current,
									"spec",
									lv_spec_3_0,
									"org.xtext.Go.constSpec");
								afterParserOrEnumRuleCall();
							}
						)
					)
					{
						/* */
					}
					{
						newCompositeNode(grammarAccess.getConstDeclAccess().getEosParserRuleCall_1_1_1_1());
					}
					ruleeos
					{
						afterParserOrEnumRuleCall();
					}
				)*
				otherlv_5=')'
				{
					newLeafNode(otherlv_5, grammarAccess.getConstDeclAccess().getRightParenthesisKeyword_1_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuleconstSpec
entryRuleconstSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstSpecRule()); }
	iv_ruleconstSpec=ruleconstSpec
	{ $current=$iv_ruleconstSpec.current; }
	EOF;

// Rule constSpec
ruleconstSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConstSpecAccess().getIdentifiersIdentifierListParserRuleCall_0_0());
				}
				lv_identifiers_0_0=ruleidentifierList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstSpecRule());
					}
					set(
						$current,
						"identifiers",
						lv_identifiers_0_0,
						"org.xtext.Go.identifierList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConstSpecAccess().getTypeTypeParserRuleCall_1_0_0());
					}
					lv_type_1_0=ruletype
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstSpecRule());
						}
						set(
							$current,
							"type",
							lv_type_1_0,
							"org.xtext.Go.type");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getConstSpecAccess().getEqualsSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConstSpecAccess().getExpressionExpressionListParserRuleCall_1_2_0());
					}
					lv_expression_3_0=ruleexpressionList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstSpecRule());
						}
						set(
							$current,
							"expression",
							lv_expression_3_0,
							"org.xtext.Go.expressionList");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleidentifierList
entryRuleidentifierList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIdentifierListRule()); }
	iv_ruleidentifierList=ruleidentifierList
	{ $current=$iv_ruleidentifierList.current; }
	EOF;

// Rule identifierList
ruleidentifierList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_ids_0_0=RULE_IDENTIFIER
				{
					newLeafNode(lv_ids_0_0, grammarAccess.getIdentifierListAccess().getIdsIDENTIFIERTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIdentifierListRule());
					}
					addWithLastConsumed(
						$current,
						"ids",
						lv_ids_0_0,
						"org.xtext.Go.IDENTIFIER");
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getIdentifierListAccess().getCommaKeyword_1_0());
			}
			(
				(
					lv_ids_2_0=RULE_IDENTIFIER
					{
						newLeafNode(lv_ids_2_0, grammarAccess.getIdentifierListAccess().getIdsIDENTIFIERTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIdentifierListRule());
						}
						addWithLastConsumed(
							$current,
							"ids",
							lv_ids_2_0,
							"org.xtext.Go.IDENTIFIER");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleexpressionList
entryRuleexpressionList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionListRule()); }
	iv_ruleexpressionList=ruleexpressionList
	{ $current=$iv_ruleexpressionList.current; }
	EOF;

// Rule expressionList
ruleexpressionList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionListAccess().getExprExpressionParserRuleCall_0_0());
				}
				lv_expr_0_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionListRule());
					}
					add(
						$current,
						"expr",
						lv_expr_0_0,
						"org.xtext.Go.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getExpressionListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionListAccess().getExprExpressionParserRuleCall_1_1_0());
					}
					lv_expr_2_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionListRule());
						}
						add(
							$current,
							"expr",
							lv_expr_2_0,
							"org.xtext.Go.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuletypeDecl
entryRuletypeDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeDeclRule()); }
	iv_ruletypeDecl=ruletypeDecl
	{ $current=$iv_ruletypeDecl.current; }
	EOF;

// Rule typeDecl
ruletypeDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='type'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeDeclAccess().getTypeKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeDeclAccess().getSpecTypeSpecParserRuleCall_1_0_0());
					}
					lv_spec_1_0=ruletypeSpec
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeDeclRule());
						}
						add(
							$current,
							"spec",
							lv_spec_1_0,
							"org.xtext.Go.typeSpec");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				otherlv_2='('
				{
					newLeafNode(otherlv_2, grammarAccess.getTypeDeclAccess().getLeftParenthesisKeyword_1_1_0());
				}
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getTypeDeclAccess().getSpecTypeSpecParserRuleCall_1_1_1_0_0());
							}
							lv_spec_3_0=ruletypeSpec
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getTypeDeclRule());
								}
								add(
									$current,
									"spec",
									lv_spec_3_0,
									"org.xtext.Go.typeSpec");
								afterParserOrEnumRuleCall();
							}
						)
					)
					{
						/* */
					}
					{
						newCompositeNode(grammarAccess.getTypeDeclAccess().getEosParserRuleCall_1_1_1_1());
					}
					ruleeos
					{
						afterParserOrEnumRuleCall();
					}
				)*
				otherlv_5=')'
				{
					newLeafNode(otherlv_5, grammarAccess.getTypeDeclAccess().getRightParenthesisKeyword_1_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuletypeSpec
entryRuletypeSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeSpecRule()); }
	iv_ruletypeSpec=ruletypeSpec
	{ $current=$iv_ruletypeSpec.current; }
	EOF;

// Rule typeSpec
ruletypeSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_IDENTIFIER
				{
					newLeafNode(lv_name_0_0, grammarAccess.getTypeSpecAccess().getNameIDENTIFIERTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeSpecRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.xtext.Go.IDENTIFIER");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeSpecAccess().getTypeTypeParserRuleCall_1_0());
				}
				lv_type_1_0=ruletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeSpecRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"org.xtext.Go.type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulefunctionDecl
entryRulefunctionDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionDeclRule()); }
	iv_rulefunctionDecl=rulefunctionDecl
	{ $current=$iv_rulefunctionDecl.current; }
	EOF;

// Rule functionDecl
rulefunctionDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='func'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionDeclAccess().getFuncKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_IDENTIFIER
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFunctionDeclAccess().getNameIDENTIFIERTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionDeclRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.Go.IDENTIFIER");
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionDeclAccess().getFuncFunctionParserRuleCall_2_0_0());
					}
					lv_func_2_0=rulefunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionDeclRule());
						}
						set(
							$current,
							"func",
							lv_func_2_0,
							"org.xtext.Go.function");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionDeclAccess().getSigSignatureParserRuleCall_2_1_0());
					}
					lv_sig_3_0=rulesignature
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionDeclRule());
						}
						set(
							$current,
							"sig",
							lv_sig_3_0,
							"org.xtext.Go.signature");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulefunction
entryRulefunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_rulefunction=rulefunction
	{ $current=$iv_rulefunction.current; }
	EOF;

// Rule function
rulefunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getSigSignatureParserRuleCall_0_0());
				}
				lv_sig_0_0=rulesignature
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					set(
						$current,
						"sig",
						lv_sig_0_0,
						"org.xtext.Go.signature");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getCodeBlockBlockParserRuleCall_1_0());
				}
				lv_codeBlock_1_0=ruleblock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					set(
						$current,
						"codeBlock",
						lv_codeBlock_1_0,
						"org.xtext.Go.block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulemethodDecl
entryRulemethodDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodDeclRule()); }
	iv_rulemethodDecl=rulemethodDecl
	{ $current=$iv_rulemethodDecl.current; }
	EOF;

// Rule methodDecl
rulemethodDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='func'
		{
			newLeafNode(otherlv_0, grammarAccess.getMethodDeclAccess().getFuncKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodDeclAccess().getParamsReceiverParserRuleCall_1_0());
				}
				lv_params_1_0=rulereceiver
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodDeclRule());
					}
					set(
						$current,
						"params",
						lv_params_1_0,
						"org.xtext.Go.receiver");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_2_0=RULE_IDENTIFIER
				{
					newLeafNode(lv_name_2_0, grammarAccess.getMethodDeclAccess().getNameIDENTIFIERTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMethodDeclRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.xtext.Go.IDENTIFIER");
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodDeclAccess().getFuncFunctionParserRuleCall_3_0_0());
					}
					lv_func_3_0=rulefunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodDeclRule());
						}
						set(
							$current,
							"func",
							lv_func_3_0,
							"org.xtext.Go.function");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodDeclAccess().getSigSignatureParserRuleCall_3_1_0());
					}
					lv_sig_4_0=rulesignature
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodDeclRule());
						}
						set(
							$current,
							"sig",
							lv_sig_4_0,
							"org.xtext.Go.signature");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulereceiver
entryRulereceiver returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReceiverRule()); }
	iv_rulereceiver=rulereceiver
	{ $current=$iv_rulereceiver.current; }
	EOF;

// Rule receiver
rulereceiver returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getReceiverAccess().getParamsParametersParserRuleCall_0());
			}
			lv_params_0_0=ruleparameters
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getReceiverRule());
				}
				set(
					$current,
					"params",
					lv_params_0_0,
					"org.xtext.Go.parameters");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulevarDecl
entryRulevarDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarDeclRule()); }
	iv_rulevarDecl=rulevarDecl
	{ $current=$iv_rulevarDecl.current; }
	EOF;

// Rule varDecl
rulevarDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getVarDeclAccess().getVarKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getVarDeclAccess().getSpecsVarSpecParserRuleCall_1_0_0());
					}
					lv_specs_1_0=rulevarSpec
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVarDeclRule());
						}
						add(
							$current,
							"specs",
							lv_specs_1_0,
							"org.xtext.Go.varSpec");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				otherlv_2='('
				{
					newLeafNode(otherlv_2, grammarAccess.getVarDeclAccess().getLeftParenthesisKeyword_1_1_0());
				}
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getVarDeclAccess().getSpecsVarSpecParserRuleCall_1_1_1_0_0());
							}
							lv_specs_3_0=rulevarSpec
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getVarDeclRule());
								}
								add(
									$current,
									"specs",
									lv_specs_3_0,
									"org.xtext.Go.varSpec");
								afterParserOrEnumRuleCall();
							}
						)
					)
					{
						/* */
					}
					{
						newCompositeNode(grammarAccess.getVarDeclAccess().getEosParserRuleCall_1_1_1_1());
					}
					ruleeos
					{
						afterParserOrEnumRuleCall();
					}
				)*
				otherlv_5=')'
				{
					newLeafNode(otherlv_5, grammarAccess.getVarDeclAccess().getRightParenthesisKeyword_1_1_2());
				}
			)
		)
	)
;

// Entry rule entryRulevarSpec
entryRulevarSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarSpecRule()); }
	iv_rulevarSpec=rulevarSpec
	{ $current=$iv_rulevarSpec.current; }
	EOF;

// Rule varSpec
rulevarSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVarSpecAccess().getIdListIdentifierListParserRuleCall_0_0());
				}
				lv_idList_0_0=ruleidentifierList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarSpecRule());
					}
					set(
						$current,
						"idList",
						lv_idList_0_0,
						"org.xtext.Go.identifierList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getVarSpecAccess().getTypeTypeParserRuleCall_1_0_0_0());
						}
						lv_type_1_0=ruletype
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVarSpecRule());
							}
							set(
								$current,
								"type",
								lv_type_1_0,
								"org.xtext.Go.type");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_2='='
					{
						newLeafNode(otherlv_2, grammarAccess.getVarSpecAccess().getEqualsSignKeyword_1_0_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getVarSpecAccess().getExprListExpressionListParserRuleCall_1_0_1_1_0());
							}
							lv_exprList_3_0=ruleexpressionList
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getVarSpecRule());
								}
								add(
									$current,
									"exprList",
									lv_exprList_3_0,
									"org.xtext.Go.expressionList");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)?
			)
			    |
			(
				otherlv_4='='
				{
					newLeafNode(otherlv_4, grammarAccess.getVarSpecAccess().getEqualsSignKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getVarSpecAccess().getExprListExpressionListParserRuleCall_1_1_1_0());
						}
						lv_exprList_5_0=ruleexpressionList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVarSpecRule());
							}
							add(
								$current,
								"exprList",
								lv_exprList_5_0,
								"org.xtext.Go.expressionList");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRuleblock
entryRuleblock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleblock=ruleblock
	{ $current=$iv_ruleblock.current; }
	EOF;

// Rule block
ruleblock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockAccess().getStatementsStatementListParserRuleCall_1_0());
				}
				lv_statements_1_0=rulestatementList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockRule());
					}
					set(
						$current,
						"statements",
						lv_statements_1_0,
						"org.xtext.Go.statementList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='}'
		{
			newLeafNode(otherlv_2, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRulestatementList
entryRulestatementList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementListRule()); }
	iv_rulestatementList=rulestatementList
	{ $current=$iv_rulestatementList.current; }
	EOF;

// Rule statementList
rulestatementList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementListAccess().getStatementsStatementParserRuleCall_0_0());
				}
				lv_statements_0_0=rulestatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementListRule());
					}
					add(
						$current,
						"statements",
						lv_statements_0_0,
						"org.xtext.Go.statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStatementListAccess().getEosParserRuleCall_1());
		}
		ruleeos
		{
			afterParserOrEnumRuleCall();
		}
	)*
;

// Entry rule entryRulestatement
entryRulestatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_rulestatement=rulestatement
	{ $current=$iv_rulestatement.current; }
	EOF;

// Rule statement
rulestatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getDeclarationDeclarationParserRuleCall_0_0());
				}
				lv_declaration_0_0=ruledeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"declaration",
						lv_declaration_0_0,
						"org.xtext.Go.declaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getLabeledStmtLabeledStmtParserRuleCall_1_0());
				}
				lv_labeledStmt_1_0=rulelabeledStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"labeledStmt",
						lv_labeledStmt_1_0,
						"org.xtext.Go.labeledStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getSimpleStmtSimpleStmtParserRuleCall_2_0());
				}
				lv_simpleStmt_2_0=rulesimpleStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"simpleStmt",
						lv_simpleStmt_2_0,
						"org.xtext.Go.simpleStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getGoStmtGoStmtParserRuleCall_3_0());
				}
				lv_goStmt_3_0=rulegoStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"goStmt",
						lv_goStmt_3_0,
						"org.xtext.Go.goStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getReturnStmtReturnStmtParserRuleCall_4_0());
				}
				lv_returnStmt_4_0=rulereturnStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"returnStmt",
						lv_returnStmt_4_0,
						"org.xtext.Go.returnStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getBreakStmtBreakStmtParserRuleCall_5_0());
				}
				lv_breakStmt_5_0=rulebreakStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"breakStmt",
						lv_breakStmt_5_0,
						"org.xtext.Go.breakStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getContinueStmtContinueStmtParserRuleCall_6_0());
				}
				lv_continueStmt_6_0=rulecontinueStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"continueStmt",
						lv_continueStmt_6_0,
						"org.xtext.Go.continueStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getGotoStmtGotoStmtParserRuleCall_7_0());
				}
				lv_gotoStmt_7_0=rulegotoStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"gotoStmt",
						lv_gotoStmt_7_0,
						"org.xtext.Go.gotoStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getFallthroughStmtFallthroughStmtParserRuleCall_8_0());
				}
				lv_fallthroughStmt_8_0=rulefallthroughStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"fallthroughStmt",
						lv_fallthroughStmt_8_0,
						"org.xtext.Go.fallthroughStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getBlockBlockParserRuleCall_9_0());
				}
				lv_block_9_0=ruleblock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"block",
						lv_block_9_0,
						"org.xtext.Go.block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getIfStmtIfStmtParserRuleCall_10_0());
				}
				lv_ifStmt_10_0=ruleifStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"ifStmt",
						lv_ifStmt_10_0,
						"org.xtext.Go.ifStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getSwitchStmtSwitchStmtParserRuleCall_11_0());
				}
				lv_switchStmt_11_0=ruleswitchStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"switchStmt",
						lv_switchStmt_11_0,
						"org.xtext.Go.switchStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getSelectStmtSelectStmtParserRuleCall_12_0());
				}
				lv_selectStmt_12_0=ruleselectStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"selectStmt",
						lv_selectStmt_12_0,
						"org.xtext.Go.selectStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getForStmtForStmtParserRuleCall_13_0());
				}
				lv_forStmt_13_0=ruleforStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"forStmt",
						lv_forStmt_13_0,
						"org.xtext.Go.forStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getDeferStmtDeferStmtParserRuleCall_14_0());
				}
				lv_deferStmt_14_0=ruledeferStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"deferStmt",
						lv_deferStmt_14_0,
						"org.xtext.Go.deferStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulesimpleStmt
entryRulesimpleStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleStmtRule()); }
	iv_rulesimpleStmt=rulesimpleStmt
	{ $current=$iv_rulesimpleStmt.current; }
	EOF;

// Rule simpleStmt
rulesimpleStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleStmtAccess().getContentSendStmtParserRuleCall_0_0());
				}
				lv_content_0_0=rulesendStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleStmtRule());
					}
					set(
						$current,
						"content",
						lv_content_0_0,
						"org.xtext.Go.sendStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleStmtAccess().getContentExpressionStmtParserRuleCall_1_0());
				}
				lv_content_1_0=ruleexpressionStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleStmtRule());
					}
					set(
						$current,
						"content",
						lv_content_1_0,
						"org.xtext.Go.expressionStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleStmtAccess().getContentIncDecStmtParserRuleCall_2_0());
				}
				lv_content_2_0=ruleincDecStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleStmtRule());
					}
					set(
						$current,
						"content",
						lv_content_2_0,
						"org.xtext.Go.incDecStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleStmtAccess().getContentAssignmentParserRuleCall_3_0());
				}
				lv_content_3_0=ruleassignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleStmtRule());
					}
					set(
						$current,
						"content",
						lv_content_3_0,
						"org.xtext.Go.assignment");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleStmtAccess().getContentShortVarDeclParserRuleCall_4_0());
				}
				lv_content_4_0=ruleshortVarDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleStmtRule());
					}
					set(
						$current,
						"content",
						lv_content_4_0,
						"org.xtext.Go.shortVarDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleStmtAccess().getContentEmptyStmtParserRuleCall_5_0());
				}
				lv_content_5_0=ruleemptyStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleStmtRule());
					}
					set(
						$current,
						"content",
						lv_content_5_0,
						"org.xtext.Go.emptyStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleexpressionStmt
entryRuleexpressionStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionStmtRule()); }
	iv_ruleexpressionStmt=ruleexpressionStmt
	{ $current=$iv_ruleexpressionStmt.current; }
	EOF;

// Rule expressionStmt
ruleexpressionStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getExpressionStmtAccess().getExprExpressionParserRuleCall_0());
			}
			lv_expr_0_0=ruleexpression
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getExpressionStmtRule());
				}
				set(
					$current,
					"expr",
					lv_expr_0_0,
					"org.xtext.Go.expression");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulesendStmt
entryRulesendStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSendStmtRule()); }
	iv_rulesendStmt=rulesendStmt
	{ $current=$iv_rulesendStmt.current; }
	EOF;

// Rule sendStmt
rulesendStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSendStmtAccess().getExpr1ExpressionParserRuleCall_0_0());
				}
				lv_expr1_0_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSendStmtRule());
					}
					set(
						$current,
						"expr1",
						lv_expr1_0_0,
						"org.xtext.Go.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='<-'
		{
			newLeafNode(otherlv_1, grammarAccess.getSendStmtAccess().getLessThanSignHyphenMinusKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSendStmtAccess().getExpr2ExpressionParserRuleCall_2_0());
				}
				lv_expr2_2_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSendStmtRule());
					}
					set(
						$current,
						"expr2",
						lv_expr2_2_0,
						"org.xtext.Go.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleincDecStmt
entryRuleincDecStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIncDecStmtRule()); }
	iv_ruleincDecStmt=ruleincDecStmt
	{ $current=$iv_ruleincDecStmt.current; }
	EOF;

// Rule incDecStmt
ruleincDecStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getIncDecStmtAccess().getExprExpressionParserRuleCall_0_0());
				}
				lv_expr_0_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIncDecStmtRule());
					}
					set(
						$current,
						"expr",
						lv_expr_0_0,
						"org.xtext.Go.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='++'
			{
				newLeafNode(otherlv_1, grammarAccess.getIncDecStmtAccess().getPlusSignPlusSignKeyword_1_0());
			}
			    |
			otherlv_2='--'
			{
				newLeafNode(otherlv_2, grammarAccess.getIncDecStmtAccess().getHyphenMinusHyphenMinusKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleassignment
entryRuleassignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	iv_ruleassignment=ruleassignment
	{ $current=$iv_ruleassignment.current; }
	EOF;

// Rule assignment
ruleassignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getExprList1ExpressionListParserRuleCall_0_0());
				}
				lv_exprList1_0_0=ruleexpressionList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"exprList1",
						lv_exprList1_0_0,
						"org.xtext.Go.expressionList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getOperationAssign_opParserRuleCall_1_0());
				}
				lv_operation_1_0=ruleassign_op
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"operation",
						lv_operation_1_0,
						"org.xtext.Go.assign_op");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getExprList2ExpressionListParserRuleCall_2_0());
				}
				lv_exprList2_2_0=ruleexpressionList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"exprList2",
						lv_exprList2_2_0,
						"org.xtext.Go.expressionList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleassign_op
entryRuleassign_op returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAssign_opRule()); }
	iv_ruleassign_op=ruleassign_op
	{ $current=$iv_ruleassign_op.current.getText(); }
	EOF;

// Rule assign_op
ruleassign_op returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='+'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAssign_opAccess().getPlusSignKeyword_0_0());
			}
			    |
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAssign_opAccess().getHyphenMinusKeyword_0_1());
			}
			    |
			kw='|'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAssign_opAccess().getVerticalLineKeyword_0_2());
			}
			    |
			kw='^'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAssign_opAccess().getCircumflexAccentKeyword_0_3());
			}
			    |
			kw='*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAssign_opAccess().getAsteriskKeyword_0_4());
			}
			    |
			kw='/'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAssign_opAccess().getSolidusKeyword_0_5());
			}
			    |
			kw='%'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAssign_opAccess().getPercentSignKeyword_0_6());
			}
			    |
			kw='<<'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAssign_opAccess().getLessThanSignLessThanSignKeyword_0_7());
			}
			    |
			kw='>>'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAssign_opAccess().getGreaterThanSignGreaterThanSignKeyword_0_8());
			}
			    |
			kw='&'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAssign_opAccess().getAmpersandKeyword_0_9());
			}
			    |
			kw='&^'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAssign_opAccess().getAmpersandCircumflexAccentKeyword_0_10());
			}
		)?
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAssign_opAccess().getEqualsSignKeyword_1());
		}
	)
;

// Entry rule entryRuleshortVarDecl
entryRuleshortVarDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShortVarDeclRule()); }
	iv_ruleshortVarDecl=ruleshortVarDecl
	{ $current=$iv_ruleshortVarDecl.current; }
	EOF;

// Rule shortVarDecl
ruleshortVarDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getShortVarDeclAccess().getIdListIdentifierListParserRuleCall_0_0());
				}
				lv_idList_0_0=ruleidentifierList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getShortVarDeclRule());
					}
					set(
						$current,
						"idList",
						lv_idList_0_0,
						"org.xtext.Go.identifierList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':='
		{
			newLeafNode(otherlv_1, grammarAccess.getShortVarDeclAccess().getColonEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getShortVarDeclAccess().getExprListExpressionListParserRuleCall_2_0());
				}
				lv_exprList_2_0=ruleexpressionList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getShortVarDeclRule());
					}
					set(
						$current,
						"exprList",
						lv_exprList_2_0,
						"org.xtext.Go.expressionList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleemptyStmt
entryRuleemptyStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEmptyStmtRule()); }
	iv_ruleemptyStmt=ruleemptyStmt
	{ $current=$iv_ruleemptyStmt.current; }
	EOF;

// Rule emptyStmt
ruleemptyStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_content_0_0=RULE_WS
			{
				newLeafNode(lv_content_0_0, grammarAccess.getEmptyStmtAccess().getContentWSTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getEmptyStmtRule());
				}
				setWithLastConsumed(
					$current,
					"content",
					lv_content_0_0,
					"org.eclipse.xtext.common.Terminals.WS");
			}
		)
	)
;

// Entry rule entryRulelabeledStmt
entryRulelabeledStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLabeledStmtRule()); }
	iv_rulelabeledStmt=rulelabeledStmt
	{ $current=$iv_rulelabeledStmt.current; }
	EOF;

// Rule labeledStmt
rulelabeledStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_label_0_0=RULE_IDENTIFIER
				{
					newLeafNode(lv_label_0_0, grammarAccess.getLabeledStmtAccess().getLabelIDENTIFIERTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLabeledStmtRule());
					}
					setWithLastConsumed(
						$current,
						"label",
						lv_label_0_0,
						"org.xtext.Go.IDENTIFIER");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getLabeledStmtAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLabeledStmtAccess().getStmtStatementParserRuleCall_2_0());
				}
				lv_stmt_2_0=rulestatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLabeledStmtRule());
					}
					set(
						$current,
						"stmt",
						lv_stmt_2_0,
						"org.xtext.Go.statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulereturnStmt
entryRulereturnStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReturnStmtRule()); }
	iv_rulereturnStmt=rulereturnStmt
	{ $current=$iv_rulereturnStmt.current; }
	EOF;

// Rule returnStmt
rulereturnStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='return'
		{
			newLeafNode(otherlv_0, grammarAccess.getReturnStmtAccess().getReturnKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReturnStmtAccess().getExprListExpressionListParserRuleCall_1_0());
				}
				lv_exprList_1_0=ruleexpressionList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReturnStmtRule());
					}
					set(
						$current,
						"exprList",
						lv_exprList_1_0,
						"org.xtext.Go.expressionList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulebreakStmt
entryRulebreakStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBreakStmtRule()); }
	iv_rulebreakStmt=rulebreakStmt
	{ $current=$iv_rulebreakStmt.current; }
	EOF;

// Rule breakStmt
rulebreakStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='break'
		{
			newLeafNode(otherlv_0, grammarAccess.getBreakStmtAccess().getBreakKeyword_0());
		}
		(
			(
				lv_label_1_0=RULE_IDENTIFIER
				{
					newLeafNode(lv_label_1_0, grammarAccess.getBreakStmtAccess().getLabelIDENTIFIERTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBreakStmtRule());
					}
					setWithLastConsumed(
						$current,
						"label",
						lv_label_1_0,
						"org.xtext.Go.IDENTIFIER");
				}
			)
		)?
	)
;

// Entry rule entryRulecontinueStmt
entryRulecontinueStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContinueStmtRule()); }
	iv_rulecontinueStmt=rulecontinueStmt
	{ $current=$iv_rulecontinueStmt.current; }
	EOF;

// Rule continueStmt
rulecontinueStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='continue'
		{
			newLeafNode(otherlv_0, grammarAccess.getContinueStmtAccess().getContinueKeyword_0());
		}
		(
			(
				lv_label_1_0=RULE_IDENTIFIER
				{
					newLeafNode(lv_label_1_0, grammarAccess.getContinueStmtAccess().getLabelIDENTIFIERTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getContinueStmtRule());
					}
					setWithLastConsumed(
						$current,
						"label",
						lv_label_1_0,
						"org.xtext.Go.IDENTIFIER");
				}
			)
		)?
	)
;

// Entry rule entryRulegotoStmt
entryRulegotoStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGotoStmtRule()); }
	iv_rulegotoStmt=rulegotoStmt
	{ $current=$iv_rulegotoStmt.current; }
	EOF;

// Rule gotoStmt
rulegotoStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='goto'
		{
			newLeafNode(otherlv_0, grammarAccess.getGotoStmtAccess().getGotoKeyword_0());
		}
		(
			(
				lv_label_1_0=RULE_IDENTIFIER
				{
					newLeafNode(lv_label_1_0, grammarAccess.getGotoStmtAccess().getLabelIDENTIFIERTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGotoStmtRule());
					}
					setWithLastConsumed(
						$current,
						"label",
						lv_label_1_0,
						"org.xtext.Go.IDENTIFIER");
				}
			)
		)
	)
;

// Entry rule entryRulefallthroughStmt
entryRulefallthroughStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFallthroughStmtRule()); }
	iv_rulefallthroughStmt=rulefallthroughStmt
	{ $current=$iv_rulefallthroughStmt.current; }
	EOF;

// Rule fallthroughStmt
rulefallthroughStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_content_0_0='fallthrough'
			{
				newLeafNode(lv_content_0_0, grammarAccess.getFallthroughStmtAccess().getContentFallthroughKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getFallthroughStmtRule());
				}
				setWithLastConsumed($current, "content", lv_content_0_0, "fallthrough");
			}
		)
	)
;

// Entry rule entryRuledeferStmt
entryRuledeferStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeferStmtRule()); }
	iv_ruledeferStmt=ruledeferStmt
	{ $current=$iv_ruledeferStmt.current; }
	EOF;

// Rule deferStmt
ruledeferStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='defer'
		{
			newLeafNode(otherlv_0, grammarAccess.getDeferStmtAccess().getDeferKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeferStmtAccess().getExprExpressionParserRuleCall_1_0());
				}
				lv_expr_1_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeferStmtRule());
					}
					set(
						$current,
						"expr",
						lv_expr_1_0,
						"org.xtext.Go.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleifStmt
entryRuleifStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfStmtRule()); }
	iv_ruleifStmt=ruleifStmt
	{ $current=$iv_ruleifStmt.current; }
	EOF;

// Rule ifStmt
ruleifStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfStmtAccess().getIfKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getIfStmtAccess().getSimplStatementSimpleStmtParserRuleCall_1_0_0());
					}
					lv_simplStatement_1_0=rulesimpleStmt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfStmtRule());
						}
						set(
							$current,
							"simplStatement",
							lv_simplStatement_1_0,
							"org.xtext.Go.simpleStmt");
						afterParserOrEnumRuleCall();
					}
				)
			)
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getIfStmtAccess().getEosParserRuleCall_1_1());
			}
			ruleeos
			{
				afterParserOrEnumRuleCall();
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStmtAccess().getExprExpressionParserRuleCall_2_0());
				}
				lv_expr_3_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStmtRule());
					}
					set(
						$current,
						"expr",
						lv_expr_3_0,
						"org.xtext.Go.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStmtAccess().getCodeBlockBlockParserRuleCall_3_0());
				}
				lv_codeBlock_4_0=ruleblock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStmtRule());
					}
					set(
						$current,
						"codeBlock",
						lv_codeBlock_4_0,
						"org.xtext.Go.block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5='else'
			{
				newLeafNode(otherlv_5, grammarAccess.getIfStmtAccess().getElseKeyword_4_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getIfStmtAccess().getIfStatementIfStmtParserRuleCall_4_1_0_0());
						}
						lv_ifStatement_6_0=ruleifStmt
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getIfStmtRule());
							}
							set(
								$current,
								"ifStatement",
								lv_ifStatement_6_0,
								"org.xtext.Go.ifStmt");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getIfStmtAccess().getCodeBlockIfBlockParserRuleCall_4_1_1_0());
						}
						lv_codeBlockIf_7_0=ruleblock
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getIfStmtRule());
							}
							set(
								$current,
								"codeBlockIf",
								lv_codeBlockIf_7_0,
								"org.xtext.Go.block");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
	)
;

// Entry rule entryRuleswitchStmt
entryRuleswitchStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSwitchStmtRule()); }
	iv_ruleswitchStmt=ruleswitchStmt
	{ $current=$iv_ruleswitchStmt.current; }
	EOF;

// Rule switchStmt
ruleswitchStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSwitchStmtAccess().getStatementExprSwitchStmtParserRuleCall_0_0());
				}
				lv_statement_0_0=ruleexprSwitchStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSwitchStmtRule());
					}
					set(
						$current,
						"statement",
						lv_statement_0_0,
						"org.xtext.Go.exprSwitchStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSwitchStmtAccess().getStatementTypeSwitchStmtParserRuleCall_1_0());
				}
				lv_statement_1_0=ruletypeSwitchStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSwitchStmtRule());
					}
					set(
						$current,
						"statement",
						lv_statement_1_0,
						"org.xtext.Go.typeSwitchStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleexprSwitchStmt
entryRuleexprSwitchStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprSwitchStmtRule()); }
	iv_ruleexprSwitchStmt=ruleexprSwitchStmt
	{ $current=$iv_ruleexprSwitchStmt.current; }
	EOF;

// Rule exprSwitchStmt
ruleexprSwitchStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='switch'
		{
			newLeafNode(otherlv_0, grammarAccess.getExprSwitchStmtAccess().getSwitchKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getExprSwitchStmtAccess().getSimpleStmtSimpleStmtParserRuleCall_1_0_0());
					}
					lv_simpleStmt_1_0=rulesimpleStmt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExprSwitchStmtRule());
						}
						set(
							$current,
							"simpleStmt",
							lv_simpleStmt_1_0,
							"org.xtext.Go.simpleStmt");
						afterParserOrEnumRuleCall();
					}
				)
			)
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getExprSwitchStmtAccess().getEosParserRuleCall_1_1());
			}
			ruleeos
			{
				afterParserOrEnumRuleCall();
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getExprSwitchStmtAccess().getExprExpressionParserRuleCall_2_0());
				}
				lv_expr_3_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprSwitchStmtRule());
					}
					set(
						$current,
						"expr",
						lv_expr_3_0,
						"org.xtext.Go.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getExprSwitchStmtAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExprSwitchStmtAccess().getExprCaseClausesExprCaseClauseParserRuleCall_4_0());
				}
				lv_exprCaseClauses_5_0=ruleexprCaseClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprSwitchStmtRule());
					}
					add(
						$current,
						"exprCaseClauses",
						lv_exprCaseClauses_5_0,
						"org.xtext.Go.exprCaseClause");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getExprSwitchStmtAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleexprCaseClause
entryRuleexprCaseClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprCaseClauseRule()); }
	iv_ruleexprCaseClause=ruleexprCaseClause
	{ $current=$iv_ruleexprCaseClause.current; }
	EOF;

// Rule exprCaseClause
ruleexprCaseClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExprCaseClauseAccess().getExprSwitchCaseExprSwitchCaseParserRuleCall_0_0());
				}
				lv_exprSwitchCase_0_0=ruleexprSwitchCase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprCaseClauseRule());
					}
					set(
						$current,
						"exprSwitchCase",
						lv_exprSwitchCase_0_0,
						"org.xtext.Go.exprSwitchCase");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getExprCaseClauseAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExprCaseClauseAccess().getStmtListStatementListParserRuleCall_2_0());
				}
				lv_stmtList_2_0=rulestatementList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprCaseClauseRule());
					}
					set(
						$current,
						"stmtList",
						lv_stmtList_2_0,
						"org.xtext.Go.statementList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleexprSwitchCase
entryRuleexprSwitchCase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprSwitchCaseRule()); }
	iv_ruleexprSwitchCase=ruleexprSwitchCase
	{ $current=$iv_ruleexprSwitchCase.current; }
	EOF;

// Rule exprSwitchCase
ruleexprSwitchCase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='case'
			{
				newLeafNode(otherlv_0, grammarAccess.getExprSwitchCaseAccess().getCaseKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExprSwitchCaseAccess().getExprListExpressionListParserRuleCall_0_1_0());
					}
					lv_exprList_1_0=ruleexpressionList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExprSwitchCaseRule());
						}
						set(
							$current,
							"exprList",
							lv_exprList_1_0,
							"org.xtext.Go.expressionList");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		otherlv_2='default'
		{
			newLeafNode(otherlv_2, grammarAccess.getExprSwitchCaseAccess().getDefaultKeyword_1());
		}
	)
;

// Entry rule entryRuletypeSwitchStmt
entryRuletypeSwitchStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeSwitchStmtRule()); }
	iv_ruletypeSwitchStmt=ruletypeSwitchStmt
	{ $current=$iv_ruletypeSwitchStmt.current; }
	EOF;

// Rule typeSwitchStmt
ruletypeSwitchStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='switch'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeSwitchStmtAccess().getSwitchKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeSwitchStmtAccess().getSimpleStatementSimpleStmtParserRuleCall_1_0_0());
					}
					lv_simpleStatement_1_0=rulesimpleStmt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeSwitchStmtRule());
						}
						set(
							$current,
							"simpleStatement",
							lv_simpleStatement_1_0,
							"org.xtext.Go.simpleStmt");
						afterParserOrEnumRuleCall();
					}
				)
			)
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getTypeSwitchStmtAccess().getEosParserRuleCall_1_1());
			}
			ruleeos
			{
				afterParserOrEnumRuleCall();
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeSwitchStmtAccess().getTypeSwitchGuardTypeSwitchGuardParserRuleCall_2_0());
				}
				lv_typeSwitchGuard_3_0=ruletypeSwitchGuard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeSwitchStmtRule());
					}
					set(
						$current,
						"typeSwitchGuard",
						lv_typeSwitchGuard_3_0,
						"org.xtext.Go.typeSwitchGuard");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getTypeSwitchStmtAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeSwitchStmtAccess().getTypeCaseClausesTypeCaseClauseParserRuleCall_4_0());
				}
				lv_typeCaseClauses_5_0=ruletypeCaseClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeSwitchStmtRule());
					}
					add(
						$current,
						"typeCaseClauses",
						lv_typeCaseClauses_5_0,
						"org.xtext.Go.typeCaseClause");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getTypeSwitchStmtAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuletypeSwitchGuard
entryRuletypeSwitchGuard returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeSwitchGuardRule()); }
	iv_ruletypeSwitchGuard=ruletypeSwitchGuard
	{ $current=$iv_ruletypeSwitchGuard.current; }
	EOF;

// Rule typeSwitchGuard
ruletypeSwitchGuard returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_name_0_0=RULE_IDENTIFIER
					{
						newLeafNode(lv_name_0_0, grammarAccess.getTypeSwitchGuardAccess().getNameIDENTIFIERTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeSwitchGuardRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_0_0,
							"org.xtext.Go.IDENTIFIER");
					}
				)
			)
			otherlv_1=':='
			{
				newLeafNode(otherlv_1, grammarAccess.getTypeSwitchGuardAccess().getColonEqualsSignKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeSwitchGuardAccess().getPrimaryExpressionPrimaryExprParserRuleCall_1_0());
				}
				lv_primaryExpression_2_0=ruleprimaryExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeSwitchGuardRule());
					}
					set(
						$current,
						"primaryExpression",
						lv_primaryExpression_2_0,
						"org.xtext.Go.primaryExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='.'
		{
			newLeafNode(otherlv_3, grammarAccess.getTypeSwitchGuardAccess().getFullStopKeyword_2());
		}
		otherlv_4='('
		{
			newLeafNode(otherlv_4, grammarAccess.getTypeSwitchGuardAccess().getLeftParenthesisKeyword_3());
		}
		otherlv_5='type'
		{
			newLeafNode(otherlv_5, grammarAccess.getTypeSwitchGuardAccess().getTypeKeyword_4());
		}
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getTypeSwitchGuardAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuletypeCaseClause
entryRuletypeCaseClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeCaseClauseRule()); }
	iv_ruletypeCaseClause=ruletypeCaseClause
	{ $current=$iv_ruletypeCaseClause.current; }
	EOF;

// Rule typeCaseClause
ruletypeCaseClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeCaseClauseAccess().getTypeSwitchCaseTypeSwitchCaseParserRuleCall_0_0());
				}
				lv_typeSwitchCase_0_0=ruletypeSwitchCase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeCaseClauseRule());
					}
					set(
						$current,
						"typeSwitchCase",
						lv_typeSwitchCase_0_0,
						"org.xtext.Go.typeSwitchCase");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getTypeCaseClauseAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeCaseClauseAccess().getStatementListStatementListParserRuleCall_2_0());
				}
				lv_statementList_2_0=rulestatementList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeCaseClauseRule());
					}
					set(
						$current,
						"statementList",
						lv_statementList_2_0,
						"org.xtext.Go.statementList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuletypeSwitchCase
entryRuletypeSwitchCase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeSwitchCaseRule()); }
	iv_ruletypeSwitchCase=ruletypeSwitchCase
	{ $current=$iv_ruletypeSwitchCase.current; }
	EOF;

// Rule typeSwitchCase
ruletypeSwitchCase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='case'
			{
				newLeafNode(otherlv_0, grammarAccess.getTypeSwitchCaseAccess().getCaseKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeSwitchCaseAccess().getTypeListTypeListParserRuleCall_0_1_0());
					}
					lv_typeList_1_0=ruletypeList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeSwitchCaseRule());
						}
						set(
							$current,
							"typeList",
							lv_typeList_1_0,
							"org.xtext.Go.typeList");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		otherlv_2='default'
		{
			newLeafNode(otherlv_2, grammarAccess.getTypeSwitchCaseAccess().getDefaultKeyword_1());
		}
	)
;

// Entry rule entryRuletypeList
entryRuletypeList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeListRule()); }
	iv_ruletypeList=ruletypeList
	{ $current=$iv_ruletypeList.current; }
	EOF;

// Rule typeList
ruletypeList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeListAccess().getTypesTypeParserRuleCall_0_0());
				}
				lv_types_0_0=ruletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeListRule());
					}
					add(
						$current,
						"types",
						lv_types_0_0,
						"org.xtext.Go.type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getTypeListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeListAccess().getTypesTypeParserRuleCall_1_1_0());
					}
					lv_types_2_0=ruletype
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeListRule());
						}
						add(
							$current,
							"types",
							lv_types_2_0,
							"org.xtext.Go.type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleselectStmt
entryRuleselectStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectStmtRule()); }
	iv_ruleselectStmt=ruleselectStmt
	{ $current=$iv_ruleselectStmt.current; }
	EOF;

// Rule selectStmt
ruleselectStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='select'
		{
			newLeafNode(otherlv_0, grammarAccess.getSelectStmtAccess().getSelectKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getSelectStmtAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectStmtAccess().getCommClausesCommClauseParserRuleCall_2_0());
				}
				lv_commClauses_2_0=rulecommClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectStmtRule());
					}
					add(
						$current,
						"commClauses",
						lv_commClauses_2_0,
						"org.xtext.Go.commClause");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getSelectStmtAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRulecommClause
entryRulecommClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommClauseRule()); }
	iv_rulecommClause=rulecommClause
	{ $current=$iv_rulecommClause.current; }
	EOF;

// Rule commClause
rulecommClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCommClauseAccess().getCaseCommCaseParserRuleCall_0_0());
				}
				lv_case_0_0=rulecommCase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommClauseRule());
					}
					set(
						$current,
						"case",
						lv_case_0_0,
						"org.xtext.Go.commCase");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getCommClauseAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCommClauseAccess().getStmtListStatementListParserRuleCall_2_0());
				}
				lv_stmtList_2_0=rulestatementList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommClauseRule());
					}
					set(
						$current,
						"stmtList",
						lv_stmtList_2_0,
						"org.xtext.Go.statementList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulecommCase
entryRulecommCase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommCaseRule()); }
	iv_rulecommCase=rulecommCase
	{ $current=$iv_rulecommCase.current; }
	EOF;

// Rule commCase
rulecommCase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='case'
			{
				newLeafNode(otherlv_0, grammarAccess.getCommCaseAccess().getCaseKeyword_0_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getCommCaseAccess().getStatementSendStmtParserRuleCall_0_1_0_0());
						}
						lv_statement_1_0=rulesendStmt
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCommCaseRule());
							}
							set(
								$current,
								"statement",
								lv_statement_1_0,
								"org.xtext.Go.sendStmt");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getCommCaseAccess().getStatementRecvStmtParserRuleCall_0_1_1_0());
						}
						lv_statement_2_0=rulerecvStmt
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCommCaseRule());
							}
							set(
								$current,
								"statement",
								lv_statement_2_0,
								"org.xtext.Go.recvStmt");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
		    |
		otherlv_3='default'
		{
			newLeafNode(otherlv_3, grammarAccess.getCommCaseAccess().getDefaultKeyword_1());
		}
	)
;

// Entry rule entryRulerecvStmt
entryRulerecvStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRecvStmtRule()); }
	iv_rulerecvStmt=rulerecvStmt
	{ $current=$iv_rulerecvStmt.current; }
	EOF;

// Rule recvStmt
rulerecvStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getRecvStmtAccess().getExprListExpressionListParserRuleCall_0_0_0_0());
						}
						lv_exprList_0_0=ruleexpressionList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRecvStmtRule());
							}
							set(
								$current,
								"exprList",
								lv_exprList_0_0,
								"org.xtext.Go.expressionList");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_1='='
				{
					newLeafNode(otherlv_1, grammarAccess.getRecvStmtAccess().getEqualsSignKeyword_0_0_1());
				}
			)
			    |
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getRecvStmtAccess().getIdListIdentifierListParserRuleCall_0_1_0_0());
						}
						lv_idList_2_0=ruleidentifierList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRecvStmtRule());
							}
							set(
								$current,
								"idList",
								lv_idList_2_0,
								"org.xtext.Go.identifierList");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_3=':='
				{
					newLeafNode(otherlv_3, grammarAccess.getRecvStmtAccess().getColonEqualsSignKeyword_0_1_1());
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getRecvStmtAccess().getExprExpressionParserRuleCall_1_0());
				}
				lv_expr_4_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRecvStmtRule());
					}
					set(
						$current,
						"expr",
						lv_expr_4_0,
						"org.xtext.Go.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleforStmt
entryRuleforStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForStmtRule()); }
	iv_ruleforStmt=ruleforStmt
	{ $current=$iv_ruleforStmt.current; }
	EOF;

// Rule forStmt
ruleforStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='for'
		{
			newLeafNode(otherlv_0, grammarAccess.getForStmtAccess().getForKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getForStmtAccess().getExprExpressionParserRuleCall_1_0_0());
					}
					lv_expr_1_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getForStmtRule());
						}
						set(
							$current,
							"expr",
							lv_expr_1_0,
							"org.xtext.Go.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getForStmtAccess().getClauseForClauseParserRuleCall_1_1_0());
					}
					lv_clause_2_0=ruleforClause
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getForStmtRule());
						}
						set(
							$current,
							"clause",
							lv_clause_2_0,
							"org.xtext.Go.forClause");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getForStmtAccess().getClauseRangeClauseParserRuleCall_1_2_0());
					}
					lv_clause_3_0=rulerangeClause
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getForStmtRule());
						}
						set(
							$current,
							"clause",
							lv_clause_3_0,
							"org.xtext.Go.rangeClause");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getForStmtAccess().getCodeBlockBlockParserRuleCall_2_0());
				}
				lv_codeBlock_4_0=ruleblock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStmtRule());
					}
					set(
						$current,
						"codeBlock",
						lv_codeBlock_4_0,
						"org.xtext.Go.block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleforClause
entryRuleforClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForClauseRule()); }
	iv_ruleforClause=ruleforClause
	{ $current=$iv_ruleforClause.current; }
	EOF;

// Rule forClause
ruleforClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getForClauseAccess().getStatement1SimpleStmtParserRuleCall_0_0());
				}
				lv_statement1_0_0=rulesimpleStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForClauseRule());
					}
					set(
						$current,
						"statement1",
						lv_statement1_0_0,
						"org.xtext.Go.simpleStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getForClauseAccess().getEosParserRuleCall_1());
		}
		ruleeos
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForClauseAccess().getExprExpressionParserRuleCall_2_0());
				}
				lv_expr_2_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForClauseRule());
					}
					set(
						$current,
						"expr",
						lv_expr_2_0,
						"org.xtext.Go.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getForClauseAccess().getEosParserRuleCall_3());
		}
		ruleeos
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForClauseAccess().getStatement2SimpleStmtParserRuleCall_4_0());
				}
				lv_statement2_4_0=rulesimpleStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForClauseRule());
					}
					set(
						$current,
						"statement2",
						lv_statement2_4_0,
						"org.xtext.Go.simpleStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulerangeClause
entryRulerangeClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRangeClauseRule()); }
	iv_rulerangeClause=rulerangeClause
	{ $current=$iv_rulerangeClause.current; }
	EOF;

// Rule rangeClause
rulerangeClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getRangeClauseAccess().getExprListExpressionListParserRuleCall_0_0_0_0());
						}
						lv_exprList_0_0=ruleexpressionList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRangeClauseRule());
							}
							set(
								$current,
								"exprList",
								lv_exprList_0_0,
								"org.xtext.Go.expressionList");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_1='='
				{
					newLeafNode(otherlv_1, grammarAccess.getRangeClauseAccess().getEqualsSignKeyword_0_0_1());
				}
			)
			    |
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getRangeClauseAccess().getIdListIdentifierListParserRuleCall_0_1_0_0());
						}
						lv_idList_2_0=ruleidentifierList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRangeClauseRule());
							}
							set(
								$current,
								"idList",
								lv_idList_2_0,
								"org.xtext.Go.identifierList");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_3=':='
				{
					newLeafNode(otherlv_3, grammarAccess.getRangeClauseAccess().getColonEqualsSignKeyword_0_1_1());
				}
			)
		)?
		otherlv_4='range'
		{
			newLeafNode(otherlv_4, grammarAccess.getRangeClauseAccess().getRangeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRangeClauseAccess().getExprExpressionParserRuleCall_2_0());
				}
				lv_expr_5_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRangeClauseRule());
					}
					set(
						$current,
						"expr",
						lv_expr_5_0,
						"org.xtext.Go.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulegoStmt
entryRulegoStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGoStmtRule()); }
	iv_rulegoStmt=rulegoStmt
	{ $current=$iv_rulegoStmt.current; }
	EOF;

// Rule goStmt
rulegoStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='go'
		{
			newLeafNode(otherlv_0, grammarAccess.getGoStmtAccess().getGoKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGoStmtAccess().getExprExpressionParserRuleCall_1_0());
				}
				lv_expr_1_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGoStmtRule());
					}
					set(
						$current,
						"expr",
						lv_expr_1_0,
						"org.xtext.Go.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuletype
entryRuletype returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruletype=ruletype
	{ $current=$iv_ruletype.current; }
	EOF;

// Rule type
ruletype returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAccess().getContentTypeNameParserRuleCall_0_0());
				}
				lv_content_0_0=ruletypeName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeRule());
					}
					set(
						$current,
						"content",
						lv_content_0_0,
						"org.xtext.Go.typeName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAccess().getContentTypeLitParserRuleCall_1_0());
				}
				lv_content_1_0=ruletypeLit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeRule());
					}
					set(
						$current,
						"content",
						lv_content_1_0,
						"org.xtext.Go.typeLit");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getTypeAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeAccess().getContentTypeParserRuleCall_2_1_0());
					}
					lv_content_3_0=ruletype
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeRule());
						}
						set(
							$current,
							"content",
							lv_content_3_0,
							"org.xtext.Go.type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getTypeAccess().getRightParenthesisKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRuletypeName
entryRuletypeName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeNameRule()); }
	iv_ruletypeName=ruletypeName
	{ $current=$iv_ruletypeName.current; }
	EOF;

// Rule typeName
ruletypeName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_IDENTIFIER
				{
					newLeafNode(lv_name_0_0, grammarAccess.getTypeNameAccess().getNameIDENTIFIERTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeNameRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.xtext.Go.IDENTIFIER");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeNameAccess().getQualIdentQualifiedIdentParserRuleCall_1_0());
				}
				lv_qualIdent_1_0=rulequalifiedIdent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeNameRule());
					}
					set(
						$current,
						"qualIdent",
						lv_qualIdent_1_0,
						"org.xtext.Go.qualifiedIdent");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuletypeLit
entryRuletypeLit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeLitRule()); }
	iv_ruletypeLit=ruletypeLit
	{ $current=$iv_ruletypeLit.current; }
	EOF;

// Rule typeLit
ruletypeLit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeLitAccess().getLitArrayTypeParserRuleCall_0_0_0());
					}
					lv_lit_0_0=rulearrayType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeLitRule());
						}
						set(
							$current,
							"lit",
							lv_lit_0_0,
							"org.xtext.Go.arrayType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_contentType_1_0='Array'
					{
						newLeafNode(lv_contentType_1_0, grammarAccess.getTypeLitAccess().getContentTypeArrayKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeLitRule());
						}
						setWithLastConsumed($current, "contentType", lv_contentType_1_0, "Array");
					}
				)
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeLitAccess().getLitStructTypeParserRuleCall_1_0_0());
					}
					lv_lit_2_0=rulestructType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeLitRule());
						}
						set(
							$current,
							"lit",
							lv_lit_2_0,
							"org.xtext.Go.structType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_contentType_3_0='StructType'
					{
						newLeafNode(lv_contentType_3_0, grammarAccess.getTypeLitAccess().getContentTypeStructTypeKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeLitRule());
						}
						setWithLastConsumed($current, "contentType", lv_contentType_3_0, "StructType");
					}
				)
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeLitAccess().getLitPointerTypeParserRuleCall_2_0_0());
					}
					lv_lit_4_0=rulepointerType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeLitRule());
						}
						set(
							$current,
							"lit",
							lv_lit_4_0,
							"org.xtext.Go.pointerType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_contentType_5_0='Pointer'
					{
						newLeafNode(lv_contentType_5_0, grammarAccess.getTypeLitAccess().getContentTypePointerKeyword_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeLitRule());
						}
						setWithLastConsumed($current, "contentType", lv_contentType_5_0, "Pointer");
					}
				)
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeLitAccess().getLitFunctionTypeParserRuleCall_3_0_0());
					}
					lv_lit_6_0=rulefunctionType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeLitRule());
						}
						set(
							$current,
							"lit",
							lv_lit_6_0,
							"org.xtext.Go.functionType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_contentType_7_0='Function'
					{
						newLeafNode(lv_contentType_7_0, grammarAccess.getTypeLitAccess().getContentTypeFunctionKeyword_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeLitRule());
						}
						setWithLastConsumed($current, "contentType", lv_contentType_7_0, "Function");
					}
				)
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeLitAccess().getLitInterfaceTypeParserRuleCall_4_0_0());
					}
					lv_lit_8_0=ruleinterfaceType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeLitRule());
						}
						set(
							$current,
							"lit",
							lv_lit_8_0,
							"org.xtext.Go.interfaceType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_contentType_9_0='Interface'
					{
						newLeafNode(lv_contentType_9_0, grammarAccess.getTypeLitAccess().getContentTypeInterfaceKeyword_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeLitRule());
						}
						setWithLastConsumed($current, "contentType", lv_contentType_9_0, "Interface");
					}
				)
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeLitAccess().getLitSliceTypeParserRuleCall_5_0_0());
					}
					lv_lit_10_0=rulesliceType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeLitRule());
						}
						set(
							$current,
							"lit",
							lv_lit_10_0,
							"org.xtext.Go.sliceType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_contentType_11_0='Slice'
					{
						newLeafNode(lv_contentType_11_0, grammarAccess.getTypeLitAccess().getContentTypeSliceKeyword_5_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeLitRule());
						}
						setWithLastConsumed($current, "contentType", lv_contentType_11_0, "Slice");
					}
				)
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeLitAccess().getLitMapTypeParserRuleCall_6_0_0());
					}
					lv_lit_12_0=rulemapType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeLitRule());
						}
						set(
							$current,
							"lit",
							lv_lit_12_0,
							"org.xtext.Go.mapType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_contentType_13_0='Map'
					{
						newLeafNode(lv_contentType_13_0, grammarAccess.getTypeLitAccess().getContentTypeMapKeyword_6_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeLitRule());
						}
						setWithLastConsumed($current, "contentType", lv_contentType_13_0, "Map");
					}
				)
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeLitAccess().getLitChannelTypeParserRuleCall_7_0_0());
					}
					lv_lit_14_0=rulechannelType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeLitRule());
						}
						set(
							$current,
							"lit",
							lv_lit_14_0,
							"org.xtext.Go.channelType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_contentType_15_0='Channel'
					{
						newLeafNode(lv_contentType_15_0, grammarAccess.getTypeLitAccess().getContentTypeChannelKeyword_7_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeLitRule());
						}
						setWithLastConsumed($current, "contentType", lv_contentType_15_0, "Channel");
					}
				)
			)
		)
	)
;

// Entry rule entryRulearrayType
entryRulearrayType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayTypeRule()); }
	iv_rulearrayType=rulearrayType
	{ $current=$iv_rulearrayType.current; }
	EOF;

// Rule arrayType
rulearrayType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getArrayTypeAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayTypeAccess().getArrayLengthArrayLengthParserRuleCall_1_0());
				}
				lv_arrayLength_1_0=rulearrayLength
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayTypeRule());
					}
					set(
						$current,
						"arrayLength",
						lv_arrayLength_1_0,
						"org.xtext.Go.arrayLength");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=']'
		{
			newLeafNode(otherlv_2, grammarAccess.getArrayTypeAccess().getRightSquareBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayTypeAccess().getElemTypeElementTypeParserRuleCall_3_0());
				}
				lv_elemType_3_0=ruleelementType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayTypeRule());
					}
					set(
						$current,
						"elemType",
						lv_elemType_3_0,
						"org.xtext.Go.elementType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulearrayLength
entryRulearrayLength returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayLengthRule()); }
	iv_rulearrayLength=rulearrayLength
	{ $current=$iv_rulearrayLength.current; }
	EOF;

// Rule arrayLength
rulearrayLength returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getArrayLengthAccess().getExprExpressionParserRuleCall_0());
			}
			lv_expr_0_0=ruleexpression
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getArrayLengthRule());
				}
				set(
					$current,
					"expr",
					lv_expr_0_0,
					"org.xtext.Go.expression");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleelementType
entryRuleelementType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementTypeRule()); }
	iv_ruleelementType=ruleelementType
	{ $current=$iv_ruleelementType.current; }
	EOF;

// Rule elementType
ruleelementType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getElementTypeAccess().getTypeTypeParserRuleCall_0());
			}
			lv_type_0_0=ruletype
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getElementTypeRule());
				}
				set(
					$current,
					"type",
					lv_type_0_0,
					"org.xtext.Go.type");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulepointerType
entryRulepointerType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPointerTypeRule()); }
	iv_rulepointerType=rulepointerType
	{ $current=$iv_rulepointerType.current; }
	EOF;

// Rule pointerType
rulepointerType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='*'
		{
			newLeafNode(otherlv_0, grammarAccess.getPointerTypeAccess().getAsteriskKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPointerTypeAccess().getTypeTypeParserRuleCall_1_0());
				}
				lv_type_1_0=ruletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPointerTypeRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"org.xtext.Go.type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleinterfaceType
entryRuleinterfaceType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInterfaceTypeRule()); }
	iv_ruleinterfaceType=ruleinterfaceType
	{ $current=$iv_ruleinterfaceType.current; }
	EOF;

// Rule interfaceType
ruleinterfaceType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='interface'
		{
			newLeafNode(otherlv_0, grammarAccess.getInterfaceTypeAccess().getInterfaceKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getInterfaceTypeAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getInterfaceTypeAccess().getMethodSpecsMethodSpecParserRuleCall_2_0_0());
					}
					lv_methodSpecs_2_0=rulemethodSpec
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInterfaceTypeRule());
						}
						add(
							$current,
							"methodSpecs",
							lv_methodSpecs_2_0,
							"org.xtext.Go.methodSpec");
						afterParserOrEnumRuleCall();
					}
				)
			)
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getInterfaceTypeAccess().getEosParserRuleCall_2_1());
			}
			ruleeos
			{
				afterParserOrEnumRuleCall();
			}
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getInterfaceTypeAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRulesliceType
entryRulesliceType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSliceTypeRule()); }
	iv_rulesliceType=rulesliceType
	{ $current=$iv_rulesliceType.current; }
	EOF;

// Rule sliceType
rulesliceType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getSliceTypeAccess().getLeftSquareBracketKeyword_0());
		}
		otherlv_1=']'
		{
			newLeafNode(otherlv_1, grammarAccess.getSliceTypeAccess().getRightSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSliceTypeAccess().getElemTypeElementTypeParserRuleCall_2_0());
				}
				lv_elemType_2_0=ruleelementType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSliceTypeRule());
					}
					set(
						$current,
						"elemType",
						lv_elemType_2_0,
						"org.xtext.Go.elementType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulemapType
entryRulemapType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMapTypeRule()); }
	iv_rulemapType=rulemapType
	{ $current=$iv_rulemapType.current; }
	EOF;

// Rule mapType
rulemapType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='map'
		{
			newLeafNode(otherlv_0, grammarAccess.getMapTypeAccess().getMapKeyword_0());
		}
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getMapTypeAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMapTypeAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMapTypeRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.xtext.Go.type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getMapTypeAccess().getRightSquareBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMapTypeAccess().getElemTypeElementTypeParserRuleCall_4_0());
				}
				lv_elemType_4_0=ruleelementType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMapTypeRule());
					}
					set(
						$current,
						"elemType",
						lv_elemType_4_0,
						"org.xtext.Go.elementType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulechannelType
entryRulechannelType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChannelTypeRule()); }
	iv_rulechannelType=rulechannelType
	{ $current=$iv_rulechannelType.current; }
	EOF;

// Rule channelType
rulechannelType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='chan'
			{
				newLeafNode(otherlv_0, grammarAccess.getChannelTypeAccess().getChanKeyword_0_0());
			}
			    |
			(
				otherlv_1='chan'
				{
					newLeafNode(otherlv_1, grammarAccess.getChannelTypeAccess().getChanKeyword_0_1_0());
				}
				otherlv_2='<-'
				{
					newLeafNode(otherlv_2, grammarAccess.getChannelTypeAccess().getLessThanSignHyphenMinusKeyword_0_1_1());
				}
			)
			    |
			(
				otherlv_3='<-'
				{
					newLeafNode(otherlv_3, grammarAccess.getChannelTypeAccess().getLessThanSignHyphenMinusKeyword_0_2_0());
				}
				otherlv_4='chan'
				{
					newLeafNode(otherlv_4, grammarAccess.getChannelTypeAccess().getChanKeyword_0_2_1());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getChannelTypeAccess().getElemTypeElementTypeParserRuleCall_1_0());
				}
				lv_elemType_5_0=ruleelementType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChannelTypeRule());
					}
					set(
						$current,
						"elemType",
						lv_elemType_5_0,
						"org.xtext.Go.elementType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulemethodSpec
entryRulemethodSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodSpecRule()); }
	iv_rulemethodSpec=rulemethodSpec
	{ $current=$iv_rulemethodSpec.current; }
	EOF;

// Rule methodSpec
rulemethodSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_name_0_0=RULE_IDENTIFIER
					{
						newLeafNode(lv_name_0_0, grammarAccess.getMethodSpecAccess().getNameIDENTIFIERTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMethodSpecRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_0_0,
							"org.xtext.Go.IDENTIFIER");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodSpecAccess().getSigSignatureParserRuleCall_0_1_0());
					}
					lv_sig_1_0=rulesignature
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodSpecRule());
						}
						set(
							$current,
							"sig",
							lv_sig_1_0,
							"org.xtext.Go.signature");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodSpecAccess().getTypeNameTypeNameParserRuleCall_1_0());
				}
				lv_typeName_2_0=ruletypeName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodSpecRule());
					}
					set(
						$current,
						"typeName",
						lv_typeName_2_0,
						"org.xtext.Go.typeName");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulefunctionType
entryRulefunctionType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionTypeRule()); }
	iv_rulefunctionType=rulefunctionType
	{ $current=$iv_rulefunctionType.current; }
	EOF;

// Rule functionType
rulefunctionType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='func'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionTypeAccess().getFuncKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionTypeAccess().getSigSignatureParserRuleCall_1_0());
				}
				lv_sig_1_0=rulesignature
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionTypeRule());
					}
					set(
						$current,
						"sig",
						lv_sig_1_0,
						"org.xtext.Go.signature");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulesignature
entryRulesignature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSignatureRule()); }
	iv_rulesignature=rulesignature
	{ $current=$iv_rulesignature.current; }
	EOF;

// Rule signature
rulesignature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSignatureAccess().getParamsParametersParserRuleCall_0_0());
				}
				lv_params_0_0=ruleparameters
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSignatureRule());
					}
					set(
						$current,
						"params",
						lv_params_0_0,
						"org.xtext.Go.parameters");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSignatureAccess().getResultResultParserRuleCall_1_0());
				}
				lv_result_1_0=ruleresult
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSignatureRule());
					}
					set(
						$current,
						"result",
						lv_result_1_0,
						"org.xtext.Go.result");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleresult
entryRuleresult returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResultRule()); }
	iv_ruleresult=ruleresult
	{ $current=$iv_ruleresult.current; }
	EOF;

// Rule result
ruleresult returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getResultAccess().getParamsParametersParserRuleCall_0_0());
				}
				lv_params_0_0=ruleparameters
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getResultRule());
					}
					set(
						$current,
						"params",
						lv_params_0_0,
						"org.xtext.Go.parameters");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getResultAccess().getTypeTypeParserRuleCall_1_0());
				}
				lv_type_1_0=ruletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getResultRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"org.xtext.Go.type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleparameters
entryRuleparameters returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParametersRule()); }
	iv_ruleparameters=ruleparameters
	{ $current=$iv_ruleparameters.current; }
	EOF;

// Rule parameters
ruleparameters returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getParametersAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getParametersAccess().getParamListParameterListParserRuleCall_1_0_0());
					}
					lv_paramList_1_0=ruleparameterList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParametersRule());
						}
						add(
							$current,
							"paramList",
							lv_paramList_1_0,
							"org.xtext.Go.parameterList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getParametersAccess().getCommaKeyword_1_1());
				}
			)?
		)?
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getParametersAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleparameterList
entryRuleparameterList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterListRule()); }
	iv_ruleparameterList=ruleparameterList
	{ $current=$iv_ruleparameterList.current; }
	EOF;

// Rule parameterList
ruleparameterList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterListAccess().getParamsDeclParameterDeclParserRuleCall_0_0());
				}
				lv_paramsDecl_0_0=ruleparameterDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterListRule());
					}
					add(
						$current,
						"paramsDecl",
						lv_paramsDecl_0_0,
						"org.xtext.Go.parameterDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getParameterListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterListAccess().getParamsDeclParameterDeclParserRuleCall_1_1_0());
					}
					lv_paramsDecl_2_0=ruleparameterDecl
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterListRule());
						}
						add(
							$current,
							"paramsDecl",
							lv_paramsDecl_2_0,
							"org.xtext.Go.parameterDecl");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleparameterDecl
entryRuleparameterDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterDeclRule()); }
	iv_ruleparameterDecl=ruleparameterDecl
	{ $current=$iv_ruleparameterDecl.current; }
	EOF;

// Rule parameterDecl
ruleparameterDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterDeclAccess().getIdentifierListIdentifierListParserRuleCall_0_0());
				}
				lv_identifierList_0_0=ruleidentifierList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterDeclRule());
					}
					set(
						$current,
						"identifierList",
						lv_identifierList_0_0,
						"org.xtext.Go.identifierList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_1='...'
			{
				newLeafNode(otherlv_1, grammarAccess.getParameterDeclAccess().getFullStopFullStopFullStopKeyword_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterDeclAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterDeclRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.xtext.Go.type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleoperand
entryRuleoperand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperandRule()); }
	iv_ruleoperand=ruleoperand
	{ $current=$iv_ruleoperand.current; }
	EOF;

// Rule operand
ruleoperand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOperandAccess().getContentLiteralParserRuleCall_0_0());
				}
				lv_content_0_0=ruleliteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperandRule());
					}
					set(
						$current,
						"content",
						lv_content_0_0,
						"org.xtext.Go.literal");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getOperandAccess().getContentOperandNameParserRuleCall_1_0());
				}
				lv_content_1_0=ruleoperandName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperandRule());
					}
					set(
						$current,
						"content",
						lv_content_1_0,
						"org.xtext.Go.operandName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getOperandAccess().getContentMethodExprParserRuleCall_2_0());
				}
				lv_content_2_0=rulemethodExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperandRule());
					}
					set(
						$current,
						"content",
						lv_content_2_0,
						"org.xtext.Go.methodExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getOperandAccess().getLeftParenthesisKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOperandAccess().getContentExpressionParserRuleCall_3_1_0());
					}
					lv_content_4_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOperandRule());
						}
						set(
							$current,
							"content",
							lv_content_4_0,
							"org.xtext.Go.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getOperandAccess().getRightParenthesisKeyword_3_2());
			}
		)
	)
;

// Entry rule entryRuleliteral
entryRuleliteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleliteral=ruleliteral
	{ $current=$iv_ruleliteral.current; }
	EOF;

// Rule literal
ruleliteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLiteralAccess().getLitBasicBasicLitParserRuleCall_0_0());
				}
				lv_litBasic_0_0=rulebasicLit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLiteralRule());
					}
					set(
						$current,
						"litBasic",
						lv_litBasic_0_0,
						"org.xtext.Go.basicLit");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getLiteralAccess().getLitCompositeCompositeLitParserRuleCall_1_0());
				}
				lv_litComposite_1_0=rulecompositeLit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLiteralRule());
					}
					set(
						$current,
						"litComposite",
						lv_litComposite_1_0,
						"org.xtext.Go.compositeLit");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getLiteralAccess().getLitFuncFunctionLitParserRuleCall_2_0());
				}
				lv_litFunc_2_0=rulefunctionLit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLiteralRule());
					}
					set(
						$current,
						"litFunc",
						lv_litFunc_2_0,
						"org.xtext.Go.functionLit");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulebasicLit
entryRulebasicLit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBasicLitRule()); }
	iv_rulebasicLit=rulebasicLit
	{ $current=$iv_rulebasicLit.current.getText(); }
	EOF;

// Rule basicLit
rulebasicLit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_LIT_0=RULE_INT_LIT
		{
			$current.merge(this_INT_LIT_0);
		}
		{
			newLeafNode(this_INT_LIT_0, grammarAccess.getBasicLitAccess().getINT_LITTerminalRuleCall_0());
		}
		    |
		this_FLOAT_LIT_1=RULE_FLOAT_LIT
		{
			$current.merge(this_FLOAT_LIT_1);
		}
		{
			newLeafNode(this_FLOAT_LIT_1, grammarAccess.getBasicLitAccess().getFLOAT_LITTerminalRuleCall_1());
		}
		    |
		this_IMAGINARY_LIT_2=RULE_IMAGINARY_LIT
		{
			$current.merge(this_IMAGINARY_LIT_2);
		}
		{
			newLeafNode(this_IMAGINARY_LIT_2, grammarAccess.getBasicLitAccess().getIMAGINARY_LITTerminalRuleCall_2());
		}
		    |
		this_RUNE_LIT_3=RULE_RUNE_LIT
		{
			$current.merge(this_RUNE_LIT_3);
		}
		{
			newLeafNode(this_RUNE_LIT_3, grammarAccess.getBasicLitAccess().getRUNE_LITTerminalRuleCall_3());
		}
		    |
		this_STRING_LIT_4=RULE_STRING_LIT
		{
			$current.merge(this_STRING_LIT_4);
		}
		{
			newLeafNode(this_STRING_LIT_4, grammarAccess.getBasicLitAccess().getSTRING_LITTerminalRuleCall_4());
		}
	)
;

// Entry rule entryRuleoperandName
entryRuleoperandName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperandNameRule()); }
	iv_ruleoperandName=ruleoperandName
	{ $current=$iv_ruleoperandName.current; }
	EOF;

// Rule operandName
ruleoperandName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_IDENTIFIER
				{
					newLeafNode(lv_name_0_0, grammarAccess.getOperandNameAccess().getNameIDENTIFIERTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOperandNameRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.xtext.Go.IDENTIFIER");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getOperandNameAccess().getQualIdentQualifiedIdentParserRuleCall_1_0());
				}
				lv_qualIdent_1_0=rulequalifiedIdent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperandNameRule());
					}
					set(
						$current,
						"qualIdent",
						lv_qualIdent_1_0,
						"org.xtext.Go.qualifiedIdent");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulequalifiedIdent
entryRulequalifiedIdent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedIdentRule()); }
	iv_rulequalifiedIdent=rulequalifiedIdent
	{ $current=$iv_rulequalifiedIdent.current; }
	EOF;

// Rule qualifiedIdent
rulequalifiedIdent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_packageName_0_0=RULE_IDENTIFIER
				{
					newLeafNode(lv_packageName_0_0, grammarAccess.getQualifiedIdentAccess().getPackageNameIDENTIFIERTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQualifiedIdentRule());
					}
					setWithLastConsumed(
						$current,
						"packageName",
						lv_packageName_0_0,
						"org.xtext.Go.IDENTIFIER");
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getQualifiedIdentAccess().getFullStopKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_IDENTIFIER
				{
					newLeafNode(lv_name_2_0, grammarAccess.getQualifiedIdentAccess().getNameIDENTIFIERTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQualifiedIdentRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.xtext.Go.IDENTIFIER");
				}
			)
		)
	)
;

// Entry rule entryRulecompositeLit
entryRulecompositeLit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompositeLitRule()); }
	iv_rulecompositeLit=rulecompositeLit
	{ $current=$iv_rulecompositeLit.current; }
	EOF;

// Rule compositeLit
rulecompositeLit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCompositeLitAccess().getLiteralTypeLiteralTypeParserRuleCall_0_0());
				}
				lv_literalType_0_0=ruleliteralType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompositeLitRule());
					}
					set(
						$current,
						"literalType",
						lv_literalType_0_0,
						"org.xtext.Go.literalType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCompositeLitAccess().getLiteralValueLiteralValueParserRuleCall_1_0());
				}
				lv_literalValue_1_0=ruleliteralValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompositeLitRule());
					}
					set(
						$current,
						"literalValue",
						lv_literalValue_1_0,
						"org.xtext.Go.literalValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleliteralType
entryRuleliteralType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralTypeRule()); }
	iv_ruleliteralType=ruleliteralType
	{ $current=$iv_ruleliteralType.current; }
	EOF;

// Rule literalType
ruleliteralType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLiteralTypeAccess().getTypeStructTypeParserRuleCall_0_0());
				}
				lv_type_0_0=rulestructType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLiteralTypeRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.xtext.Go.structType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getLiteralTypeAccess().getTypeArrayTypeParserRuleCall_1_0());
				}
				lv_type_1_0=rulearrayType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLiteralTypeRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"org.xtext.Go.arrayType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_2='['
			{
				newLeafNode(otherlv_2, grammarAccess.getLiteralTypeAccess().getLeftSquareBracketKeyword_2_0());
			}
			otherlv_3='...'
			{
				newLeafNode(otherlv_3, grammarAccess.getLiteralTypeAccess().getFullStopFullStopFullStopKeyword_2_1());
			}
			otherlv_4=']'
			{
				newLeafNode(otherlv_4, grammarAccess.getLiteralTypeAccess().getRightSquareBracketKeyword_2_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLiteralTypeAccess().getTypeElementTypeParserRuleCall_2_3_0());
					}
					lv_type_5_0=ruleelementType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLiteralTypeRule());
						}
						set(
							$current,
							"type",
							lv_type_5_0,
							"org.xtext.Go.elementType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getLiteralTypeAccess().getTypeSliceTypeParserRuleCall_3_0());
				}
				lv_type_6_0=rulesliceType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLiteralTypeRule());
					}
					set(
						$current,
						"type",
						lv_type_6_0,
						"org.xtext.Go.sliceType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getLiteralTypeAccess().getTypeMapTypeParserRuleCall_4_0());
				}
				lv_type_7_0=rulemapType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLiteralTypeRule());
					}
					set(
						$current,
						"type",
						lv_type_7_0,
						"org.xtext.Go.mapType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getLiteralTypeAccess().getTypeTypeNameParserRuleCall_5_0());
				}
				lv_type_8_0=ruletypeName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLiteralTypeRule());
					}
					set(
						$current,
						"type",
						lv_type_8_0,
						"org.xtext.Go.typeName");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleliteralValue
entryRuleliteralValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralValueRule()); }
	iv_ruleliteralValue=ruleliteralValue
	{ $current=$iv_ruleliteralValue.current; }
	EOF;

// Rule literalValue
ruleliteralValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getLiteralValueAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getLiteralValueAccess().getElementListElementListParserRuleCall_1_0_0());
					}
					lv_elementList_1_0=ruleelementList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLiteralValueRule());
						}
						set(
							$current,
							"elementList",
							lv_elementList_1_0,
							"org.xtext.Go.elementList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getLiteralValueAccess().getCommaKeyword_1_1());
				}
			)?
		)?
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getLiteralValueAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleelementList
entryRuleelementList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementListRule()); }
	iv_ruleelementList=ruleelementList
	{ $current=$iv_ruleelementList.current; }
	EOF;

// Rule elementList
ruleelementList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getElementListAccess().getKeyedElementsKeyedElementParserRuleCall_0_0());
				}
				lv_keyedElements_0_0=rulekeyedElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElementListRule());
					}
					add(
						$current,
						"keyedElements",
						lv_keyedElements_0_0,
						"org.xtext.Go.keyedElement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getElementListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getElementListAccess().getKeyedElementsKeyedElementParserRuleCall_1_1_0());
					}
					lv_keyedElements_2_0=rulekeyedElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getElementListRule());
						}
						add(
							$current,
							"keyedElements",
							lv_keyedElements_2_0,
							"org.xtext.Go.keyedElement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulekeyedElement
entryRulekeyedElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getKeyedElementRule()); }
	iv_rulekeyedElement=rulekeyedElement
	{ $current=$iv_rulekeyedElement.current; }
	EOF;

// Rule keyedElement
rulekeyedElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getKeyedElementAccess().getKeyKeyParserRuleCall_0_0_0());
					}
					lv_key_0_0=rulekey
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getKeyedElementRule());
						}
						set(
							$current,
							"key",
							lv_key_0_0,
							"org.xtext.Go.key");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getKeyedElementAccess().getColonKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getKeyedElementAccess().getElementElementParserRuleCall_1_0());
				}
				lv_element_2_0=ruleelement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getKeyedElementRule());
					}
					set(
						$current,
						"element",
						lv_element_2_0,
						"org.xtext.Go.element");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulekey
entryRulekey returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getKeyRule()); }
	iv_rulekey=rulekey
	{ $current=$iv_rulekey.current; }
	EOF;

// Rule key
rulekey returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_IDENTIFIER
				{
					newLeafNode(lv_name_0_0, grammarAccess.getKeyAccess().getNameIDENTIFIERTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getKeyRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.xtext.Go.IDENTIFIER");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getKeyAccess().getExprExpressionParserRuleCall_1_0());
				}
				lv_expr_1_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getKeyRule());
					}
					set(
						$current,
						"expr",
						lv_expr_1_0,
						"org.xtext.Go.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getKeyAccess().getLitLiteralValueParserRuleCall_2_0());
				}
				lv_lit_2_0=ruleliteralValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getKeyRule());
					}
					set(
						$current,
						"lit",
						lv_lit_2_0,
						"org.xtext.Go.literalValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleelement
entryRuleelement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleelement=ruleelement
	{ $current=$iv_ruleelement.current; }
	EOF;

// Rule element
ruleelement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getElementAccess().getContentExpressionParserRuleCall_0_0());
				}
				lv_content_0_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElementRule());
					}
					set(
						$current,
						"content",
						lv_content_0_0,
						"org.xtext.Go.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getElementAccess().getContentLiteralValueParserRuleCall_1_0());
				}
				lv_content_1_0=ruleliteralValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElementRule());
					}
					set(
						$current,
						"content",
						lv_content_1_0,
						"org.xtext.Go.literalValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulestructType
entryRulestructType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStructTypeRule()); }
	iv_rulestructType=rulestructType
	{ $current=$iv_rulestructType.current; }
	EOF;

// Rule structType
rulestructType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='struct'
		{
			newLeafNode(otherlv_0, grammarAccess.getStructTypeAccess().getStructKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getStructTypeAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getStructTypeAccess().getFieldsDeclFieldDeclParserRuleCall_2_0_0());
					}
					lv_fieldsDecl_2_0=rulefieldDecl
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStructTypeRule());
						}
						add(
							$current,
							"fieldsDecl",
							lv_fieldsDecl_2_0,
							"org.xtext.Go.fieldDecl");
						afterParserOrEnumRuleCall();
					}
				)
			)
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getStructTypeAccess().getEosParserRuleCall_2_1());
			}
			ruleeos
			{
				afterParserOrEnumRuleCall();
			}
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getStructTypeAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRulefieldDecl
entryRulefieldDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldDeclRule()); }
	iv_rulefieldDecl=rulefieldDecl
	{ $current=$iv_rulefieldDecl.current; }
	EOF;

// Rule fieldDecl
rulefieldDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getFieldDeclAccess().getIdentifierListIdentifierListParserRuleCall_0_0_0_0());
						}
						lv_identifierList_0_0=ruleidentifierList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFieldDeclRule());
							}
							set(
								$current,
								"identifierList",
								lv_identifierList_0_0,
								"org.xtext.Go.identifierList");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getFieldDeclAccess().getTypeTypeParserRuleCall_0_0_1_0());
						}
						lv_type_1_0=ruletype
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFieldDeclRule());
							}
							set(
								$current,
								"type",
								lv_type_1_0,
								"org.xtext.Go.type");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFieldDeclAccess().getAnonymousFieldAnonymousFieldParserRuleCall_0_1_0());
					}
					lv_anonymousField_2_0=ruleanonymousField
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFieldDeclRule());
						}
						set(
							$current,
							"anonymousField",
							lv_anonymousField_2_0,
							"org.xtext.Go.anonymousField");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			this_STRING_LIT_3=RULE_STRING_LIT
			{
				newLeafNode(this_STRING_LIT_3, grammarAccess.getFieldDeclAccess().getSTRING_LITTerminalRuleCall_1());
			}
		)?
	)
;

// Entry rule entryRuleanonymousField
entryRuleanonymousField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnonymousFieldRule()); }
	iv_ruleanonymousField=ruleanonymousField
	{ $current=$iv_ruleanonymousField.current; }
	EOF;

// Rule anonymousField
ruleanonymousField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='*'
			{
				newLeafNode(otherlv_0, grammarAccess.getAnonymousFieldAccess().getAsteriskKeyword_0());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getAnonymousFieldAccess().getTypeNameTypeNameParserRuleCall_1_0());
				}
				lv_typeName_1_0=ruletypeName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnonymousFieldRule());
					}
					set(
						$current,
						"typeName",
						lv_typeName_1_0,
						"org.xtext.Go.typeName");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulefunctionLit
entryRulefunctionLit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionLitRule()); }
	iv_rulefunctionLit=rulefunctionLit
	{ $current=$iv_rulefunctionLit.current; }
	EOF;

// Rule functionLit
rulefunctionLit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='func'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionLitAccess().getFuncKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionLitAccess().getFunctionFunctionParserRuleCall_1_0());
				}
				lv_function_1_0=rulefunction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionLitRule());
					}
					set(
						$current,
						"function",
						lv_function_1_0,
						"org.xtext.Go.function");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleprimaryExpr
entryRuleprimaryExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprRule()); }
	iv_ruleprimaryExpr=ruleprimaryExpr
	{ $current=$iv_ruleprimaryExpr.current; }
	EOF;

// Rule primaryExpr
ruleprimaryExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryExprAccess().getOperandOperandParserRuleCall_0_0_0());
					}
					lv_operand_0_0=ruleoperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryExprRule());
						}
						set(
							$current,
							"operand",
							lv_operand_0_0,
							"org.xtext.Go.operand");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryExprAccess().getConversionConversionParserRuleCall_0_1_0());
					}
					lv_conversion_1_0=ruleconversion
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryExprRule());
						}
						set(
							$current,
							"conversion",
							lv_conversion_1_0,
							"org.xtext.Go.conversion");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprSelectorPrimaryExprSelectorParserRuleCall_1_0());
				}
				lv_primaryExprSelector_2_0=ruleprimaryExprSelector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprRule());
					}
					set(
						$current,
						"primaryExprSelector",
						lv_primaryExprSelector_2_0,
						"org.xtext.Go.primaryExprSelector");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprIndexPrimaryExprIndexParserRuleCall_2_0());
				}
				lv_primaryExprIndex_3_0=ruleprimaryExprIndex
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprRule());
					}
					set(
						$current,
						"primaryExprIndex",
						lv_primaryExprIndex_3_0,
						"org.xtext.Go.primaryExprIndex");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprSlicePrimaryExprSliceParserRuleCall_3_0());
				}
				lv_primaryExprSlice_4_0=ruleprimaryExprSlice
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprRule());
					}
					set(
						$current,
						"primaryExprSlice",
						lv_primaryExprSlice_4_0,
						"org.xtext.Go.primaryExprSlice");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprTypeAssertionPrimaryExprTypeAssertionParserRuleCall_4_0());
				}
				lv_primaryExprTypeAssertion_5_0=ruleprimaryExprTypeAssertion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprRule());
					}
					set(
						$current,
						"primaryExprTypeAssertion",
						lv_primaryExprTypeAssertion_5_0,
						"org.xtext.Go.primaryExprTypeAssertion");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprAccess().getPrimaryExprArgumentsPrimaryExprArgumentsParserRuleCall_5_0());
				}
				lv_primaryExprArguments_6_0=ruleprimaryExprArguments
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprRule());
					}
					set(
						$current,
						"primaryExprArguments",
						lv_primaryExprArguments_6_0,
						"org.xtext.Go.primaryExprArguments");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleprimaryExprStuff
entryRuleprimaryExprStuff returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprStuffRule()); }
	iv_ruleprimaryExprStuff=ruleprimaryExprStuff
	{ $current=$iv_ruleprimaryExprStuff.current; }
	EOF;

// Rule primaryExprStuff
ruleprimaryExprStuff returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprStuffAccess().getSelectorSelectorParserRuleCall_0_0());
				}
				lv_selector_0_0=ruleselector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprStuffRule());
					}
					set(
						$current,
						"selector",
						lv_selector_0_0,
						"org.xtext.Go.selector");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprStuffAccess().getIndexIndexParserRuleCall_1_0());
				}
				lv_index_1_0=ruleindex
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprStuffRule());
					}
					set(
						$current,
						"index",
						lv_index_1_0,
						"org.xtext.Go.index");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprStuffAccess().getSliceSliceParserRuleCall_2_0());
				}
				lv_slice_2_0=ruleslice
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprStuffRule());
					}
					set(
						$current,
						"slice",
						lv_slice_2_0,
						"org.xtext.Go.slice");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprStuffAccess().getTypeAssertionTypeAssertionParserRuleCall_3_0());
				}
				lv_typeAssertion_3_0=ruletypeAssertion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprStuffRule());
					}
					set(
						$current,
						"typeAssertion",
						lv_typeAssertion_3_0,
						"org.xtext.Go.typeAssertion");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprStuffAccess().getArgumentsArgumentsParserRuleCall_4_0());
				}
				lv_arguments_4_0=rulearguments
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprStuffRule());
					}
					set(
						$current,
						"arguments",
						lv_arguments_4_0,
						"org.xtext.Go.arguments");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleprimaryExprSelector
entryRuleprimaryExprSelector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprSelectorRule()); }
	iv_ruleprimaryExprSelector=ruleprimaryExprSelector
	{ $current=$iv_ruleprimaryExprSelector.current; }
	EOF;

// Rule primaryExprSelector
ruleprimaryExprSelector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprSelectorAccess().getContentPrimaryExprStuffParserRuleCall_0_0());
				}
				lv_content_0_0=ruleprimaryExprStuff
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprSelectorRule());
					}
					set(
						$current,
						"content",
						lv_content_0_0,
						"org.xtext.Go.primaryExprStuff");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprSelectorAccess().getPrimaryExprSelectorPrimaryExprSelectorParserRuleCall_1_0());
				}
				lv_primaryExprSelector_1_0=ruleprimaryExprSelector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprSelectorRule());
					}
					set(
						$current,
						"primaryExprSelector",
						lv_primaryExprSelector_1_0,
						"org.xtext.Go.primaryExprSelector");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)?
;

// Entry rule entryRuleprimaryExprIndex
entryRuleprimaryExprIndex returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprIndexRule()); }
	iv_ruleprimaryExprIndex=ruleprimaryExprIndex
	{ $current=$iv_ruleprimaryExprIndex.current; }
	EOF;

// Rule primaryExprIndex
ruleprimaryExprIndex returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprIndexAccess().getContentPrimaryExprStuffParserRuleCall_0_0());
				}
				lv_content_0_0=ruleprimaryExprStuff
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprIndexRule());
					}
					set(
						$current,
						"content",
						lv_content_0_0,
						"org.xtext.Go.primaryExprStuff");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprIndexAccess().getPrimaryExprIndexPrimaryExprIndexParserRuleCall_1_0());
				}
				lv_primaryExprIndex_1_0=ruleprimaryExprIndex
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprIndexRule());
					}
					set(
						$current,
						"primaryExprIndex",
						lv_primaryExprIndex_1_0,
						"org.xtext.Go.primaryExprIndex");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)?
;

// Entry rule entryRuleprimaryExprSlice
entryRuleprimaryExprSlice returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprSliceRule()); }
	iv_ruleprimaryExprSlice=ruleprimaryExprSlice
	{ $current=$iv_ruleprimaryExprSlice.current; }
	EOF;

// Rule primaryExprSlice
ruleprimaryExprSlice returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprSliceAccess().getContentPrimaryExprStuffParserRuleCall_0_0());
				}
				lv_content_0_0=ruleprimaryExprStuff
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprSliceRule());
					}
					set(
						$current,
						"content",
						lv_content_0_0,
						"org.xtext.Go.primaryExprStuff");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprSliceAccess().getPrimaryExprSlicePrimaryExprSliceParserRuleCall_1_0());
				}
				lv_primaryExprSlice_1_0=ruleprimaryExprSlice
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprSliceRule());
					}
					set(
						$current,
						"primaryExprSlice",
						lv_primaryExprSlice_1_0,
						"org.xtext.Go.primaryExprSlice");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)?
;

// Entry rule entryRuleprimaryExprTypeAssertion
entryRuleprimaryExprTypeAssertion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprTypeAssertionRule()); }
	iv_ruleprimaryExprTypeAssertion=ruleprimaryExprTypeAssertion
	{ $current=$iv_ruleprimaryExprTypeAssertion.current; }
	EOF;

// Rule primaryExprTypeAssertion
ruleprimaryExprTypeAssertion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprTypeAssertionAccess().getContentPrimaryExprStuffParserRuleCall_0_0());
				}
				lv_content_0_0=ruleprimaryExprStuff
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprTypeAssertionRule());
					}
					set(
						$current,
						"content",
						lv_content_0_0,
						"org.xtext.Go.primaryExprStuff");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprTypeAssertionAccess().getPrimaryExprTypeAssertionPrimaryExprTypeAssertionParserRuleCall_1_0());
				}
				lv_primaryExprTypeAssertion_1_0=ruleprimaryExprTypeAssertion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprTypeAssertionRule());
					}
					set(
						$current,
						"primaryExprTypeAssertion",
						lv_primaryExprTypeAssertion_1_0,
						"org.xtext.Go.primaryExprTypeAssertion");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)?
;

// Entry rule entryRuleprimaryExprArguments
entryRuleprimaryExprArguments returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprArgumentsRule()); }
	iv_ruleprimaryExprArguments=ruleprimaryExprArguments
	{ $current=$iv_ruleprimaryExprArguments.current; }
	EOF;

// Rule primaryExprArguments
ruleprimaryExprArguments returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprArgumentsAccess().getContentPrimaryExprStuffParserRuleCall_0_0());
				}
				lv_content_0_0=ruleprimaryExprStuff
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprArgumentsRule());
					}
					set(
						$current,
						"content",
						lv_content_0_0,
						"org.xtext.Go.primaryExprStuff");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExprArgumentsAccess().getPrimaryExprArgumentsPrimaryExprArgumentsParserRuleCall_1_0());
				}
				lv_primaryExprArguments_1_0=ruleprimaryExprArguments
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExprArgumentsRule());
					}
					set(
						$current,
						"primaryExprArguments",
						lv_primaryExprArguments_1_0,
						"org.xtext.Go.primaryExprArguments");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)?
;

// Entry rule entryRuleselector
entryRuleselector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectorRule()); }
	iv_ruleselector=ruleselector
	{ $current=$iv_ruleselector.current; }
	EOF;

// Rule selector
ruleselector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='.'
		{
			newLeafNode(otherlv_0, grammarAccess.getSelectorAccess().getFullStopKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_IDENTIFIER
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSelectorAccess().getNameIDENTIFIERTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSelectorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.Go.IDENTIFIER");
				}
			)
		)
	)
;

// Entry rule entryRuleindex
entryRuleindex returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIndexRule()); }
	iv_ruleindex=ruleindex
	{ $current=$iv_ruleindex.current; }
	EOF;

// Rule index
ruleindex returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getIndexAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIndexAccess().getExprExpressionParserRuleCall_1_0());
				}
				lv_expr_1_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIndexRule());
					}
					set(
						$current,
						"expr",
						lv_expr_1_0,
						"org.xtext.Go.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=']'
		{
			newLeafNode(otherlv_2, grammarAccess.getIndexAccess().getRightSquareBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleslice
entryRuleslice returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSliceRule()); }
	iv_ruleslice=ruleslice
	{ $current=$iv_ruleslice.current; }
	EOF;

// Rule slice
ruleslice returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getSliceAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getSliceAccess().getExpr1ExpressionParserRuleCall_1_0_0_0());
						}
						lv_expr1_1_0=ruleexpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSliceRule());
							}
							set(
								$current,
								"expr1",
								lv_expr1_1_0,
								"org.xtext.Go.expression");
							afterParserOrEnumRuleCall();
						}
					)
				)?
				otherlv_2=':'
				{
					newLeafNode(otherlv_2, grammarAccess.getSliceAccess().getColonKeyword_1_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSliceAccess().getExpr2ExpressionParserRuleCall_1_0_2_0());
						}
						lv_expr2_3_0=ruleexpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSliceRule());
							}
							set(
								$current,
								"expr2",
								lv_expr2_3_0,
								"org.xtext.Go.expression");
							afterParserOrEnumRuleCall();
						}
					)
				)?
			)
			    |
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getSliceAccess().getExpr1ExpressionParserRuleCall_1_1_0_0());
						}
						lv_expr1_4_0=ruleexpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSliceRule());
							}
							set(
								$current,
								"expr1",
								lv_expr1_4_0,
								"org.xtext.Go.expression");
							afterParserOrEnumRuleCall();
						}
					)
				)?
				otherlv_5=':'
				{
					newLeafNode(otherlv_5, grammarAccess.getSliceAccess().getColonKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSliceAccess().getExpr2ExpressionParserRuleCall_1_1_2_0());
						}
						lv_expr2_6_0=ruleexpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSliceRule());
							}
							set(
								$current,
								"expr2",
								lv_expr2_6_0,
								"org.xtext.Go.expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_7=':'
				{
					newLeafNode(otherlv_7, grammarAccess.getSliceAccess().getColonKeyword_1_1_3());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSliceAccess().getExpr3ExpressionParserRuleCall_1_1_4_0());
						}
						lv_expr3_8_0=ruleexpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSliceRule());
							}
							set(
								$current,
								"expr3",
								lv_expr3_8_0,
								"org.xtext.Go.expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
		otherlv_9=']'
		{
			newLeafNode(otherlv_9, grammarAccess.getSliceAccess().getRightSquareBracketKeyword_2());
		}
	)
;

// Entry rule entryRuletypeAssertion
entryRuletypeAssertion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeAssertionRule()); }
	iv_ruletypeAssertion=ruletypeAssertion
	{ $current=$iv_ruletypeAssertion.current; }
	EOF;

// Rule typeAssertion
ruletypeAssertion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='.'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeAssertionAccess().getFullStopKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getTypeAssertionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAssertionAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeAssertionRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.xtext.Go.type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getTypeAssertionAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRulearguments
entryRulearguments returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArgumentsRule()); }
	iv_rulearguments=rulearguments
	{ $current=$iv_rulearguments.current; }
	EOF;

// Rule arguments
rulearguments returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getArgumentsAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getArgumentsAccess().getExpressionListExpressionListParserRuleCall_1_0_0_0());
						}
						lv_expressionList_1_0=ruleexpressionList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getArgumentsRule());
							}
							set(
								$current,
								"expressionList",
								lv_expressionList_1_0,
								"org.xtext.Go.expressionList");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getArgumentsAccess().getTypeTypeParserRuleCall_1_0_1_0_0());
							}
							lv_type_2_0=ruletype
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getArgumentsRule());
								}
								set(
									$current,
									"type",
									lv_type_2_0,
									"org.xtext.Go.type");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_3=','
						{
							newLeafNode(otherlv_3, grammarAccess.getArgumentsAccess().getCommaKeyword_1_0_1_1_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getArgumentsAccess().getExpressionListExpressionListParserRuleCall_1_0_1_1_1_0());
								}
								lv_expressionList_4_0=ruleexpressionList
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getArgumentsRule());
									}
									set(
										$current,
										"expressionList",
										lv_expressionList_4_0,
										"org.xtext.Go.expressionList");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)?
				)
			)
			(
				otherlv_5='...'
				{
					newLeafNode(otherlv_5, grammarAccess.getArgumentsAccess().getFullStopFullStopFullStopKeyword_1_1());
				}
			)?
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getArgumentsAccess().getCommaKeyword_1_2());
				}
			)?
		)?
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getArgumentsAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRulemethodExpr
entryRulemethodExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodExprRule()); }
	iv_rulemethodExpr=rulemethodExpr
	{ $current=$iv_rulemethodExpr.current; }
	EOF;

// Rule methodExpr
rulemethodExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodExprAccess().getReceiverTypeReceiverTypeParserRuleCall_0_0());
				}
				lv_receiverType_0_0=rulereceiverType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodExprRule());
					}
					set(
						$current,
						"receiverType",
						lv_receiverType_0_0,
						"org.xtext.Go.receiverType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getMethodExprAccess().getFullStopKeyword_1());
		}
		this_IDENTIFIER_2=RULE_IDENTIFIER
		{
			newLeafNode(this_IDENTIFIER_2, grammarAccess.getMethodExprAccess().getIDENTIFIERTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRulereceiverType
entryRulereceiverType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReceiverTypeRule()); }
	iv_rulereceiverType=rulereceiverType
	{ $current=$iv_rulereceiverType.current; }
	EOF;

// Rule receiverType
rulereceiverType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getReceiverTypeAccess().getTypeNameTypeNameParserRuleCall_0_0());
				}
				lv_typeName_0_0=ruletypeName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReceiverTypeRule());
					}
					set(
						$current,
						"typeName",
						lv_typeName_0_0,
						"org.xtext.Go.typeName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getReceiverTypeAccess().getLeftParenthesisKeyword_1_0());
			}
			otherlv_2='*'
			{
				newLeafNode(otherlv_2, grammarAccess.getReceiverTypeAccess().getAsteriskKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getReceiverTypeAccess().getTypeNameTypeNameParserRuleCall_1_2_0());
					}
					lv_typeName_3_0=ruletypeName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReceiverTypeRule());
						}
						set(
							$current,
							"typeName",
							lv_typeName_3_0,
							"org.xtext.Go.typeName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getReceiverTypeAccess().getRightParenthesisKeyword_1_3());
			}
		)
		    |
		(
			otherlv_5='('
			{
				newLeafNode(otherlv_5, grammarAccess.getReceiverTypeAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getReceiverTypeAccess().getReceiverTypeReceiverTypeParserRuleCall_2_1_0());
					}
					lv_receiverType_6_0=rulereceiverType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReceiverTypeRule());
						}
						set(
							$current,
							"receiverType",
							lv_receiverType_6_0,
							"org.xtext.Go.receiverType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getReceiverTypeAccess().getRightParenthesisKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRuleexpression
entryRuleexpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleexpression=ruleexpression
	{ $current=$iv_ruleexpression.current; }
	EOF;

// Rule expression
ruleexpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getUnaryExprUnaryExprParserRuleCall_0_0());
				}
				lv_unaryExpr_0_0=ruleunaryExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"unaryExpr",
						lv_unaryExpr_0_0,
						"org.xtext.Go.unaryExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getExpressionMatchedExpressionMatchedParserRuleCall_1_0());
				}
				lv_expressionMatched_1_0=ruleexpressionMatched
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"expressionMatched",
						lv_expressionMatched_1_0,
						"org.xtext.Go.expressionMatched");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleexpressionMatched
entryRuleexpressionMatched returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionMatchedRule()); }
	iv_ruleexpressionMatched=ruleexpressionMatched
	{ $current=$iv_ruleexpressionMatched.current; }
	EOF;

// Rule expressionMatched
ruleexpressionMatched returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_BINARY_OP_0=RULE_BINARY_OP
		{
			newLeafNode(this_BINARY_OP_0, grammarAccess.getExpressionMatchedAccess().getBINARY_OPTerminalRuleCall_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionMatchedAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionMatchedRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.xtext.Go.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)?
;

// Entry rule entryRuleunaryExpr
entryRuleunaryExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryExprRule()); }
	iv_ruleunaryExpr=ruleunaryExpr
	{ $current=$iv_ruleunaryExpr.current; }
	EOF;

// Rule unaryExpr
ruleunaryExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUnaryExprAccess().getPrimaryExprPrimaryExprParserRuleCall_0_0());
				}
				lv_primaryExpr_0_0=ruleprimaryExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnaryExprRule());
					}
					set(
						$current,
						"primaryExpr",
						lv_primaryExpr_0_0,
						"org.xtext.Go.primaryExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				otherlv_1='+'
				{
					newLeafNode(otherlv_1, grammarAccess.getUnaryExprAccess().getPlusSignKeyword_1_0_0());
				}
				    |
				otherlv_2='-'
				{
					newLeafNode(otherlv_2, grammarAccess.getUnaryExprAccess().getHyphenMinusKeyword_1_0_1());
				}
				    |
				otherlv_3='!'
				{
					newLeafNode(otherlv_3, grammarAccess.getUnaryExprAccess().getExclamationMarkKeyword_1_0_2());
				}
				    |
				otherlv_4='^'
				{
					newLeafNode(otherlv_4, grammarAccess.getUnaryExprAccess().getCircumflexAccentKeyword_1_0_3());
				}
				    |
				otherlv_5='*'
				{
					newLeafNode(otherlv_5, grammarAccess.getUnaryExprAccess().getAsteriskKeyword_1_0_4());
				}
				    |
				otherlv_6='&'
				{
					newLeafNode(otherlv_6, grammarAccess.getUnaryExprAccess().getAmpersandKeyword_1_0_5());
				}
				    |
				otherlv_7='<-'
				{
					newLeafNode(otherlv_7, grammarAccess.getUnaryExprAccess().getLessThanSignHyphenMinusKeyword_1_0_6());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getUnaryExprAccess().getUnaryExprUnaryExprParserRuleCall_1_1_0());
					}
					lv_unaryExpr_8_0=ruleunaryExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnaryExprRule());
						}
						set(
							$current,
							"unaryExpr",
							lv_unaryExpr_8_0,
							"org.xtext.Go.unaryExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleconversion
entryRuleconversion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConversionRule()); }
	iv_ruleconversion=ruleconversion
	{ $current=$iv_ruleconversion.current; }
	EOF;

// Rule conversion
ruleconversion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConversionAccess().getTypeTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConversionRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.xtext.Go.type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getConversionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConversionAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConversionRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"org.xtext.Go.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getConversionAccess().getCommaKeyword_3());
			}
		)?
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getConversionAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleeos
entryRuleeos returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEosRule()); }
	iv_ruleeos=ruleeos
	{ $current=$iv_ruleeos.current.getText(); }
	EOF;

// Rule eos
ruleeos returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=';'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getEosAccess().getSemicolonKeyword());
	}
;

RULE_IDENTIFIER : RULE_LETTER (RULE_LETTER|RULE_DECIMAL_DIGIT)*;

RULE_BINARY_OP : ('||'|'&&'|RULE_REL_OP|RULE_ADD_OP|RULE_MUL_OP);

fragment RULE_REL_OP : ('=='|'!='|'<'|'<='|'>'|'>=');

fragment RULE_ADD_OP : ('+'|'-'|'|'|'^');

fragment RULE_MUL_OP : ('*'|'/'|'%'|'<<'|'>>'|'&'|'&^');

fragment RULE_UNARY_OP : ('+'|'-'|'!'|'^'|'*'|'&'|'<-');

RULE_INT_LIT : (RULE_DECIMAL_LIT|RULE_OCTAL_LIT|RULE_HEX_LIT);

fragment RULE_DECIMAL_LIT : '1'..'9' RULE_DECIMAL_DIGIT*;

fragment RULE_OCTAL_LIT : '0' RULE_OCTAL_DIGIT*;

fragment RULE_HEX_LIT : '0' ('X'|'x') RULE_HEX_DIGIT+;

RULE_FLOAT_LIT : (RULE_DECIMALS '.' RULE_DECIMALS? RULE_EXPONENT?|RULE_DECIMALS RULE_EXPONENT|'.' RULE_DECIMALS RULE_EXPONENT?);

fragment RULE_DECIMALS : RULE_DECIMAL_DIGIT+;

fragment RULE_EXPONENT : ('e'|'E') ('+'|'-')? RULE_DECIMALS;

RULE_IMAGINARY_LIT : (RULE_DECIMALS|RULE_FLOAT_LIT) 'i';

RULE_RUNE_LIT : '\'' (RULE_UNICODE_VALUE|RULE_BYTE_VALUE) '\'';

fragment RULE_UNICODE_VALUE : (RULE_UNICODE_CHAR|RULE_LITTLE_U_VALUE|RULE_BIG_U_VALUE|RULE_ESCAPED_CHAR);

fragment RULE_BYTE_VALUE : (RULE_OCTAL_BYTE_VALUE|RULE_HEX_BYTE_VALUE);

fragment RULE_OCTAL_BYTE_VALUE : '\\' RULE_OCTAL_DIGIT RULE_OCTAL_DIGIT RULE_OCTAL_DIGIT;

fragment RULE_HEX_BYTE_VALUE : '\\x' RULE_HEX_DIGIT RULE_HEX_DIGIT;

fragment RULE_LITTLE_U_VALUE : '\\u' RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT;

fragment RULE_BIG_U_VALUE : '\\U' RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT;

fragment RULE_ESCAPED_CHAR : '\\' ('a'|'b'|'f'|'n'|'r'|'t'|'v'|'\\'|'\''|'"');

RULE_STRING_LIT : (RULE_RAW_STRING_LIT|RULE_INTERPRETED_STRING_LIT);

fragment RULE_RAW_STRING_LIT : '\'' (RULE_UNICODE_CHAR|RULE_NEWLINE)* '\'';

fragment RULE_INTERPRETED_STRING_LIT : '"' (RULE_UNICODE_VALUE|RULE_BYTE_VALUE)* '"';

fragment RULE_LETTER : (RULE_UNICODE_LETTER|'_');

fragment RULE_DECIMAL_DIGIT : '0'..'9';

fragment RULE_OCTAL_DIGIT : '0'..'7';

fragment RULE_HEX_DIGIT : ('0'..'9'|'A'..'F'|'a'..'f');

fragment RULE_NEWLINE : '\n';

fragment RULE_UNICODE_CHAR : ('A'..'Z'|'a'..'z');

fragment RULE_UNICODE_LETTER : ('A'..'Z'|'a'..'z');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
