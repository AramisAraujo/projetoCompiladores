/**
 * generated by Xtext 2.13.0
 */
package org.xtext.go.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.go.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.go.GoPackage
 * @generated
 */
public class GoSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static GoPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GoSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = GoPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case GoPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.PROGRAM:
      {
        program program = (program)theEObject;
        T result = caseprogram(program);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.BLOCK:
      {
        Block block = (Block)theEObject;
        T result = caseBlock(block);
        if (result == null) result = caseFunction_body(block);
        if (result == null) result = caseStatement(block);
        if (result == null) result = caseFunction_decl(block);
        if (result == null) result = caseprogram(block);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.STATEMENT_LIST:
      {
        Statement_list statement_list = (Statement_list)theEObject;
        T result = caseStatement_list(statement_list);
        if (result == null) result = caseBlock(statement_list);
        if (result == null) result = caseFunction_body(statement_list);
        if (result == null) result = caseStatement(statement_list);
        if (result == null) result = caseFunction_decl(statement_list);
        if (result == null) result = caseprogram(statement_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.DECLARATION:
      {
        Declaration declaration = (Declaration)theEObject;
        T result = caseDeclaration(declaration);
        if (result == null) result = caseStatement(declaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.CONST_DECL:
      {
        Const_decl const_decl = (Const_decl)theEObject;
        T result = caseConst_decl(const_decl);
        if (result == null) result = caseDeclaration(const_decl);
        if (result == null) result = caseStatement(const_decl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.CONST_SPEC:
      {
        Const_spec const_spec = (Const_spec)theEObject;
        T result = caseConst_spec(const_spec);
        if (result == null) result = caseConst_decl(const_spec);
        if (result == null) result = caseDeclaration(const_spec);
        if (result == null) result = caseStatement(const_spec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.EXPRESSION_LIST:
      {
        Expression_list expression_list = (Expression_list)theEObject;
        T result = caseExpression_list(expression_list);
        if (result == null) result = caseConst_spec(expression_list);
        if (result == null) result = caseVar_spec(expression_list);
        if (result == null) result = caseShort_var_decl(expression_list);
        if (result == null) result = caseReturn_stmt(expression_list);
        if (result == null) result = caseConst_decl(expression_list);
        if (result == null) result = caseSimple_stmt(expression_list);
        if (result == null) result = caseDeclaration(expression_list);
        if (result == null) result = caseIf_stmt(expression_list);
        if (result == null) result = caseStatement(expression_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.VAR_DECL:
      {
        Var_decl var_decl = (Var_decl)theEObject;
        T result = caseVar_decl(var_decl);
        if (result == null) result = caseDeclaration(var_decl);
        if (result == null) result = caseStatement(var_decl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.VAR_SPEC:
      {
        Var_spec var_spec = (Var_spec)theEObject;
        T result = caseVar_spec(var_spec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.SHORT_VAR_DECL:
      {
        Short_var_decl short_var_decl = (Short_var_decl)theEObject;
        T result = caseShort_var_decl(short_var_decl);
        if (result == null) result = caseSimple_stmt(short_var_decl);
        if (result == null) result = caseIf_stmt(short_var_decl);
        if (result == null) result = caseStatement(short_var_decl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.FUNCTION_DECL:
      {
        Function_decl function_decl = (Function_decl)theEObject;
        T result = caseFunction_decl(function_decl);
        if (result == null) result = caseprogram(function_decl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.FUNCTION_BODY:
      {
        Function_body function_body = (Function_body)theEObject;
        T result = caseFunction_body(function_body);
        if (result == null) result = caseFunction_decl(function_body);
        if (result == null) result = caseprogram(function_body);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.OPERAND:
      {
        Operand operand = (Operand)theEObject;
        T result = caseOperand(operand);
        if (result == null) result = casePrimary_expr(operand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.PRIMARY_EXPR:
      {
        Primary_expr primary_expr = (Primary_expr)theEObject;
        T result = casePrimary_expr(primary_expr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = caseOperand(expression);
        if (result == null) result = caseExpression_stmt(expression);
        if (result == null) result = caseGo_stmt(expression);
        if (result == null) result = caseDefer_stmt(expression);
        if (result == null) result = casePrimary_expr(expression);
        if (result == null) result = caseStatement(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.EXPRESSION_LINE:
      {
        Expression_line expression_line = (Expression_line)theEObject;
        T result = caseExpression_line(expression_line);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.UNARY_EXPR:
      {
        Unary_expr unary_expr = (Unary_expr)theEObject;
        T result = caseUnary_expr(unary_expr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.STATEMENT:
      {
        Statement statement = (Statement)theEObject;
        T result = caseStatement(statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.SIMPLE_STMT:
      {
        Simple_stmt simple_stmt = (Simple_stmt)theEObject;
        T result = caseSimple_stmt(simple_stmt);
        if (result == null) result = caseIf_stmt(simple_stmt);
        if (result == null) result = caseStatement(simple_stmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.LABELED_STMT:
      {
        Labeled_stmt labeled_stmt = (Labeled_stmt)theEObject;
        T result = caseLabeled_stmt(labeled_stmt);
        if (result == null) result = caseStatement(labeled_stmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.EXPRESSION_STMT:
      {
        Expression_stmt expression_stmt = (Expression_stmt)theEObject;
        T result = caseExpression_stmt(expression_stmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.IF_STMT:
      {
        If_stmt if_stmt = (If_stmt)theEObject;
        T result = caseIf_stmt(if_stmt);
        if (result == null) result = caseStatement(if_stmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.GO_STMT:
      {
        Go_stmt go_stmt = (Go_stmt)theEObject;
        T result = caseGo_stmt(go_stmt);
        if (result == null) result = caseStatement(go_stmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.RETURN_STMT:
      {
        Return_stmt return_stmt = (Return_stmt)theEObject;
        T result = caseReturn_stmt(return_stmt);
        if (result == null) result = caseStatement(return_stmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case GoPackage.DEFER_STMT:
      {
        Defer_stmt defer_stmt = (Defer_stmt)theEObject;
        T result = caseDefer_stmt(defer_stmt);
        if (result == null) result = caseStatement(defer_stmt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>program</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>program</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseprogram(program object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBlock(Block object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatement_list(Statement_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDeclaration(Declaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Const decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Const decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConst_decl(Const_decl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Const spec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Const spec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConst_spec(Const_spec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression_list(Expression_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVar_decl(Var_decl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var spec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var spec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVar_spec(Var_spec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Short var decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Short var decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseShort_var_decl(Short_var_decl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunction_decl(Function_decl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunction_body(Function_body object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operand</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operand</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperand(Operand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primary expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primary expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimary_expr(Primary_expr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression line</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression line</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression_line(Expression_line object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unary expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unary expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnary_expr(Unary_expr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatement(Statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Simple stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Simple stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSimple_stmt(Simple_stmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Labeled stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Labeled stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLabeled_stmt(Labeled_stmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression_stmt(Expression_stmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIf_stmt(If_stmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Go stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Go stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGo_stmt(Go_stmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Return stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Return stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReturn_stmt(Return_stmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Defer stmt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Defer stmt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDefer_stmt(Defer_stmt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //GoSwitch
