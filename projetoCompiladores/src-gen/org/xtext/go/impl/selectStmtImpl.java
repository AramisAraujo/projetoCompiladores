/**
 * generated by Xtext 2.14.0
 */
package org.xtext.go.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.go.GoPackage;
import org.xtext.go.commClause;
import org.xtext.go.selectStmt;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>select Stmt</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.xtext.go.impl.selectStmtImpl#getCommClause <em>Comm Clause</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class selectStmtImpl extends MinimalEObjectImpl.Container implements selectStmt
{
  /**
   * The cached value of the '{@link #getCommClause() <em>Comm Clause</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommClause()
   * @generated
   * @ordered
   */
  protected commClause commClause;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected selectStmtImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.SELECT_STMT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public commClause getCommClause()
  {
    return commClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCommClause(commClause newCommClause, NotificationChain msgs)
  {
    commClause oldCommClause = commClause;
    commClause = newCommClause;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.SELECT_STMT__COMM_CLAUSE, oldCommClause, newCommClause);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCommClause(commClause newCommClause)
  {
    if (newCommClause != commClause)
    {
      NotificationChain msgs = null;
      if (commClause != null)
        msgs = ((InternalEObject)commClause).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.SELECT_STMT__COMM_CLAUSE, null, msgs);
      if (newCommClause != null)
        msgs = ((InternalEObject)newCommClause).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.SELECT_STMT__COMM_CLAUSE, null, msgs);
      msgs = basicSetCommClause(newCommClause, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.SELECT_STMT__COMM_CLAUSE, newCommClause, newCommClause));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.SELECT_STMT__COMM_CLAUSE:
        return basicSetCommClause(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.SELECT_STMT__COMM_CLAUSE:
        return getCommClause();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.SELECT_STMT__COMM_CLAUSE:
        setCommClause((commClause)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.SELECT_STMT__COMM_CLAUSE:
        setCommClause((commClause)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.SELECT_STMT__COMM_CLAUSE:
        return commClause != null;
    }
    return super.eIsSet(featureID);
  }

} //selectStmtImpl
