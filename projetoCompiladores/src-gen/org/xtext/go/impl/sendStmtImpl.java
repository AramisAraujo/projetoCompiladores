/**
 * generated by Xtext 2.13.0
 */
package org.xtext.go.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.go.GoPackage;
import org.xtext.go.expression;
import org.xtext.go.sendStmt;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>send Stmt</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.go.impl.sendStmtImpl#getExpressionLeft <em>Expression Left</em>}</li>
 *   <li>{@link org.xtext.go.impl.sendStmtImpl#getExpressionRight <em>Expression Right</em>}</li>
 * </ul>
 *
 * @generated
 */
public class sendStmtImpl extends MinimalEObjectImpl.Container implements sendStmt
{
  /**
   * The cached value of the '{@link #getExpressionLeft() <em>Expression Left</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpressionLeft()
   * @generated
   * @ordered
   */
  protected expression expressionLeft;

  /**
   * The cached value of the '{@link #getExpressionRight() <em>Expression Right</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpressionRight()
   * @generated
   * @ordered
   */
  protected expression expressionRight;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected sendStmtImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.SEND_STMT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public expression getExpressionLeft()
  {
    return expressionLeft;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpressionLeft(expression newExpressionLeft, NotificationChain msgs)
  {
    expression oldExpressionLeft = expressionLeft;
    expressionLeft = newExpressionLeft;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.SEND_STMT__EXPRESSION_LEFT, oldExpressionLeft, newExpressionLeft);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpressionLeft(expression newExpressionLeft)
  {
    if (newExpressionLeft != expressionLeft)
    {
      NotificationChain msgs = null;
      if (expressionLeft != null)
        msgs = ((InternalEObject)expressionLeft).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.SEND_STMT__EXPRESSION_LEFT, null, msgs);
      if (newExpressionLeft != null)
        msgs = ((InternalEObject)newExpressionLeft).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.SEND_STMT__EXPRESSION_LEFT, null, msgs);
      msgs = basicSetExpressionLeft(newExpressionLeft, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.SEND_STMT__EXPRESSION_LEFT, newExpressionLeft, newExpressionLeft));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public expression getExpressionRight()
  {
    return expressionRight;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpressionRight(expression newExpressionRight, NotificationChain msgs)
  {
    expression oldExpressionRight = expressionRight;
    expressionRight = newExpressionRight;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.SEND_STMT__EXPRESSION_RIGHT, oldExpressionRight, newExpressionRight);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpressionRight(expression newExpressionRight)
  {
    if (newExpressionRight != expressionRight)
    {
      NotificationChain msgs = null;
      if (expressionRight != null)
        msgs = ((InternalEObject)expressionRight).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.SEND_STMT__EXPRESSION_RIGHT, null, msgs);
      if (newExpressionRight != null)
        msgs = ((InternalEObject)newExpressionRight).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.SEND_STMT__EXPRESSION_RIGHT, null, msgs);
      msgs = basicSetExpressionRight(newExpressionRight, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.SEND_STMT__EXPRESSION_RIGHT, newExpressionRight, newExpressionRight));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.SEND_STMT__EXPRESSION_LEFT:
        return basicSetExpressionLeft(null, msgs);
      case GoPackage.SEND_STMT__EXPRESSION_RIGHT:
        return basicSetExpressionRight(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.SEND_STMT__EXPRESSION_LEFT:
        return getExpressionLeft();
      case GoPackage.SEND_STMT__EXPRESSION_RIGHT:
        return getExpressionRight();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.SEND_STMT__EXPRESSION_LEFT:
        setExpressionLeft((expression)newValue);
        return;
      case GoPackage.SEND_STMT__EXPRESSION_RIGHT:
        setExpressionRight((expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.SEND_STMT__EXPRESSION_LEFT:
        setExpressionLeft((expression)null);
        return;
      case GoPackage.SEND_STMT__EXPRESSION_RIGHT:
        setExpressionRight((expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.SEND_STMT__EXPRESSION_LEFT:
        return expressionLeft != null;
      case GoPackage.SEND_STMT__EXPRESSION_RIGHT:
        return expressionRight != null;
    }
    return super.eIsSet(featureID);
  }

} //sendStmtImpl
