/**
 * generated by Xtext 2.14.0
 */
package org.xtext.go.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.go.GoPackage;
import org.xtext.go.expression;
import org.xtext.go.forClause;
import org.xtext.go.simpleStmt;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>for Clause</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.xtext.go.impl.forClauseImpl#getStatement1 <em>Statement1</em>}</li>
 *   <li>{@link org.xtext.go.impl.forClauseImpl#getExpr <em>Expr</em>}</li>
 *   <li>{@link org.xtext.go.impl.forClauseImpl#getStatement2 <em>Statement2</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class forClauseImpl extends MinimalEObjectImpl.Container implements forClause
{
  /**
   * The cached value of the '{@link #getStatement1() <em>Statement1</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatement1()
   * @generated
   * @ordered
   */
  protected simpleStmt statement1;

  /**
   * The cached value of the '{@link #getExpr() <em>Expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpr()
   * @generated
   * @ordered
   */
  protected expression expr;

  /**
   * The cached value of the '{@link #getStatement2() <em>Statement2</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatement2()
   * @generated
   * @ordered
   */
  protected simpleStmt statement2;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected forClauseImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.FOR_CLAUSE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public simpleStmt getStatement1()
  {
    return statement1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStatement1(simpleStmt newStatement1, NotificationChain msgs)
  {
    simpleStmt oldStatement1 = statement1;
    statement1 = newStatement1;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.FOR_CLAUSE__STATEMENT1, oldStatement1, newStatement1);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStatement1(simpleStmt newStatement1)
  {
    if (newStatement1 != statement1)
    {
      NotificationChain msgs = null;
      if (statement1 != null)
        msgs = ((InternalEObject)statement1).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.FOR_CLAUSE__STATEMENT1, null, msgs);
      if (newStatement1 != null)
        msgs = ((InternalEObject)newStatement1).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.FOR_CLAUSE__STATEMENT1, null, msgs);
      msgs = basicSetStatement1(newStatement1, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.FOR_CLAUSE__STATEMENT1, newStatement1, newStatement1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public expression getExpr()
  {
    return expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpr(expression newExpr, NotificationChain msgs)
  {
    expression oldExpr = expr;
    expr = newExpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.FOR_CLAUSE__EXPR, oldExpr, newExpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpr(expression newExpr)
  {
    if (newExpr != expr)
    {
      NotificationChain msgs = null;
      if (expr != null)
        msgs = ((InternalEObject)expr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.FOR_CLAUSE__EXPR, null, msgs);
      if (newExpr != null)
        msgs = ((InternalEObject)newExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.FOR_CLAUSE__EXPR, null, msgs);
      msgs = basicSetExpr(newExpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.FOR_CLAUSE__EXPR, newExpr, newExpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public simpleStmt getStatement2()
  {
    return statement2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStatement2(simpleStmt newStatement2, NotificationChain msgs)
  {
    simpleStmt oldStatement2 = statement2;
    statement2 = newStatement2;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.FOR_CLAUSE__STATEMENT2, oldStatement2, newStatement2);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStatement2(simpleStmt newStatement2)
  {
    if (newStatement2 != statement2)
    {
      NotificationChain msgs = null;
      if (statement2 != null)
        msgs = ((InternalEObject)statement2).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.FOR_CLAUSE__STATEMENT2, null, msgs);
      if (newStatement2 != null)
        msgs = ((InternalEObject)newStatement2).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.FOR_CLAUSE__STATEMENT2, null, msgs);
      msgs = basicSetStatement2(newStatement2, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.FOR_CLAUSE__STATEMENT2, newStatement2, newStatement2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.FOR_CLAUSE__STATEMENT1:
        return basicSetStatement1(null, msgs);
      case GoPackage.FOR_CLAUSE__EXPR:
        return basicSetExpr(null, msgs);
      case GoPackage.FOR_CLAUSE__STATEMENT2:
        return basicSetStatement2(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.FOR_CLAUSE__STATEMENT1:
        return getStatement1();
      case GoPackage.FOR_CLAUSE__EXPR:
        return getExpr();
      case GoPackage.FOR_CLAUSE__STATEMENT2:
        return getStatement2();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.FOR_CLAUSE__STATEMENT1:
        setStatement1((simpleStmt)newValue);
        return;
      case GoPackage.FOR_CLAUSE__EXPR:
        setExpr((expression)newValue);
        return;
      case GoPackage.FOR_CLAUSE__STATEMENT2:
        setStatement2((simpleStmt)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.FOR_CLAUSE__STATEMENT1:
        setStatement1((simpleStmt)null);
        return;
      case GoPackage.FOR_CLAUSE__EXPR:
        setExpr((expression)null);
        return;
      case GoPackage.FOR_CLAUSE__STATEMENT2:
        setStatement2((simpleStmt)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.FOR_CLAUSE__STATEMENT1:
        return statement1 != null;
      case GoPackage.FOR_CLAUSE__EXPR:
        return expr != null;
      case GoPackage.FOR_CLAUSE__STATEMENT2:
        return statement2 != null;
    }
    return super.eIsSet(featureID);
  }

} //forClauseImpl
