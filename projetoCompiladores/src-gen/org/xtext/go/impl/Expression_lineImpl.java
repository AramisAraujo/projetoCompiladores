/**
 * generated by Xtext 2.13.0
 */
package org.xtext.go.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.go.Expression;
import org.xtext.go.Expression_line;
import org.xtext.go.GoPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expression line</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.go.impl.Expression_lineImpl#getBinary_op <em>Binary op</em>}</li>
 *   <li>{@link org.xtext.go.impl.Expression_lineImpl#getExpression <em>Expression</em>}</li>
 *   <li>{@link org.xtext.go.impl.Expression_lineImpl#getExpression_line <em>Expression line</em>}</li>
 * </ul>
 *
 * @generated
 */
public class Expression_lineImpl extends MinimalEObjectImpl.Container implements Expression_line
{
  /**
   * The default value of the '{@link #getBinary_op() <em>Binary op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBinary_op()
   * @generated
   * @ordered
   */
  protected static final String BINARY_OP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBinary_op() <em>Binary op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBinary_op()
   * @generated
   * @ordered
   */
  protected String binary_op = BINARY_OP_EDEFAULT;

  /**
   * The cached value of the '{@link #getExpression() <em>Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression()
   * @generated
   * @ordered
   */
  protected Expression expression;

  /**
   * The cached value of the '{@link #getExpression_line() <em>Expression line</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression_line()
   * @generated
   * @ordered
   */
  protected Expression_line expression_line;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Expression_lineImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.EXPRESSION_LINE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getBinary_op()
  {
    return binary_op;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBinary_op(String newBinary_op)
  {
    String oldBinary_op = binary_op;
    binary_op = newBinary_op;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.EXPRESSION_LINE__BINARY_OP, oldBinary_op, binary_op));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getExpression()
  {
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpression(Expression newExpression, NotificationChain msgs)
  {
    Expression oldExpression = expression;
    expression = newExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.EXPRESSION_LINE__EXPRESSION, oldExpression, newExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpression(Expression newExpression)
  {
    if (newExpression != expression)
    {
      NotificationChain msgs = null;
      if (expression != null)
        msgs = ((InternalEObject)expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.EXPRESSION_LINE__EXPRESSION, null, msgs);
      if (newExpression != null)
        msgs = ((InternalEObject)newExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.EXPRESSION_LINE__EXPRESSION, null, msgs);
      msgs = basicSetExpression(newExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.EXPRESSION_LINE__EXPRESSION, newExpression, newExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression_line getExpression_line()
  {
    return expression_line;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpression_line(Expression_line newExpression_line, NotificationChain msgs)
  {
    Expression_line oldExpression_line = expression_line;
    expression_line = newExpression_line;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.EXPRESSION_LINE__EXPRESSION_LINE, oldExpression_line, newExpression_line);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpression_line(Expression_line newExpression_line)
  {
    if (newExpression_line != expression_line)
    {
      NotificationChain msgs = null;
      if (expression_line != null)
        msgs = ((InternalEObject)expression_line).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.EXPRESSION_LINE__EXPRESSION_LINE, null, msgs);
      if (newExpression_line != null)
        msgs = ((InternalEObject)newExpression_line).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.EXPRESSION_LINE__EXPRESSION_LINE, null, msgs);
      msgs = basicSetExpression_line(newExpression_line, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.EXPRESSION_LINE__EXPRESSION_LINE, newExpression_line, newExpression_line));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.EXPRESSION_LINE__EXPRESSION:
        return basicSetExpression(null, msgs);
      case GoPackage.EXPRESSION_LINE__EXPRESSION_LINE:
        return basicSetExpression_line(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.EXPRESSION_LINE__BINARY_OP:
        return getBinary_op();
      case GoPackage.EXPRESSION_LINE__EXPRESSION:
        return getExpression();
      case GoPackage.EXPRESSION_LINE__EXPRESSION_LINE:
        return getExpression_line();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.EXPRESSION_LINE__BINARY_OP:
        setBinary_op((String)newValue);
        return;
      case GoPackage.EXPRESSION_LINE__EXPRESSION:
        setExpression((Expression)newValue);
        return;
      case GoPackage.EXPRESSION_LINE__EXPRESSION_LINE:
        setExpression_line((Expression_line)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.EXPRESSION_LINE__BINARY_OP:
        setBinary_op(BINARY_OP_EDEFAULT);
        return;
      case GoPackage.EXPRESSION_LINE__EXPRESSION:
        setExpression((Expression)null);
        return;
      case GoPackage.EXPRESSION_LINE__EXPRESSION_LINE:
        setExpression_line((Expression_line)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.EXPRESSION_LINE__BINARY_OP:
        return BINARY_OP_EDEFAULT == null ? binary_op != null : !BINARY_OP_EDEFAULT.equals(binary_op);
      case GoPackage.EXPRESSION_LINE__EXPRESSION:
        return expression != null;
      case GoPackage.EXPRESSION_LINE__EXPRESSION_LINE:
        return expression_line != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (binary_op: ");
    result.append(binary_op);
    result.append(')');
    return result.toString();
  }

} //Expression_lineImpl
