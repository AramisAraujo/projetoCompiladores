/**
 * generated by Xtext 2.14.0
 */
package org.xtext.go.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.go.GoPackage;
import org.xtext.go.type;
import org.xtext.go.typeLit;
import org.xtext.go.typeName;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.xtext.go.impl.typeImpl#getContentT <em>Content T</em>}</li>
 *   <li>{@link org.xtext.go.impl.typeImpl#getContentL <em>Content L</em>}</li>
 *   <li>{@link org.xtext.go.impl.typeImpl#getContent <em>Content</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class typeImpl extends MinimalEObjectImpl.Container implements type
{
  /**
   * The cached value of the '{@link #getContentT() <em>Content T</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContentT()
   * @generated
   * @ordered
   */
  protected typeName contentT;

  /**
   * The cached value of the '{@link #getContentL() <em>Content L</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContentL()
   * @generated
   * @ordered
   */
  protected typeLit contentL;

  /**
   * The cached value of the '{@link #getContent() <em>Content</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContent()
   * @generated
   * @ordered
   */
  protected type content;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected typeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public typeName getContentT()
  {
    return contentT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetContentT(typeName newContentT, NotificationChain msgs)
  {
    typeName oldContentT = contentT;
    contentT = newContentT;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.TYPE__CONTENT_T, oldContentT, newContentT);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setContentT(typeName newContentT)
  {
    if (newContentT != contentT)
    {
      NotificationChain msgs = null;
      if (contentT != null)
        msgs = ((InternalEObject)contentT).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.TYPE__CONTENT_T, null, msgs);
      if (newContentT != null)
        msgs = ((InternalEObject)newContentT).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.TYPE__CONTENT_T, null, msgs);
      msgs = basicSetContentT(newContentT, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.TYPE__CONTENT_T, newContentT, newContentT));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public typeLit getContentL()
  {
    return contentL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetContentL(typeLit newContentL, NotificationChain msgs)
  {
    typeLit oldContentL = contentL;
    contentL = newContentL;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.TYPE__CONTENT_L, oldContentL, newContentL);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setContentL(typeLit newContentL)
  {
    if (newContentL != contentL)
    {
      NotificationChain msgs = null;
      if (contentL != null)
        msgs = ((InternalEObject)contentL).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.TYPE__CONTENT_L, null, msgs);
      if (newContentL != null)
        msgs = ((InternalEObject)newContentL).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.TYPE__CONTENT_L, null, msgs);
      msgs = basicSetContentL(newContentL, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.TYPE__CONTENT_L, newContentL, newContentL));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public type getContent()
  {
    return content;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetContent(type newContent, NotificationChain msgs)
  {
    type oldContent = content;
    content = newContent;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.TYPE__CONTENT, oldContent, newContent);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setContent(type newContent)
  {
    if (newContent != content)
    {
      NotificationChain msgs = null;
      if (content != null)
        msgs = ((InternalEObject)content).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.TYPE__CONTENT, null, msgs);
      if (newContent != null)
        msgs = ((InternalEObject)newContent).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.TYPE__CONTENT, null, msgs);
      msgs = basicSetContent(newContent, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.TYPE__CONTENT, newContent, newContent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.TYPE__CONTENT_T:
        return basicSetContentT(null, msgs);
      case GoPackage.TYPE__CONTENT_L:
        return basicSetContentL(null, msgs);
      case GoPackage.TYPE__CONTENT:
        return basicSetContent(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.TYPE__CONTENT_T:
        return getContentT();
      case GoPackage.TYPE__CONTENT_L:
        return getContentL();
      case GoPackage.TYPE__CONTENT:
        return getContent();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.TYPE__CONTENT_T:
        setContentT((typeName)newValue);
        return;
      case GoPackage.TYPE__CONTENT_L:
        setContentL((typeLit)newValue);
        return;
      case GoPackage.TYPE__CONTENT:
        setContent((type)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.TYPE__CONTENT_T:
        setContentT((typeName)null);
        return;
      case GoPackage.TYPE__CONTENT_L:
        setContentL((typeLit)null);
        return;
      case GoPackage.TYPE__CONTENT:
        setContent((type)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.TYPE__CONTENT_T:
        return contentT != null;
      case GoPackage.TYPE__CONTENT_L:
        return contentL != null;
      case GoPackage.TYPE__CONTENT:
        return content != null;
    }
    return super.eIsSet(featureID);
  }

} //typeImpl
