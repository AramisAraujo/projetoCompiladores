/**
 * generated by Xtext 2.14.0
 */
package org.xtext.go.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.go.GoPackage;
import org.xtext.go.interfaceType;
import org.xtext.go.methodSpec;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>interface Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.xtext.go.impl.interfaceTypeImpl#getMethodSpec <em>Method Spec</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class interfaceTypeImpl extends MinimalEObjectImpl.Container implements interfaceType
{
  /**
   * The cached value of the '{@link #getMethodSpec() <em>Method Spec</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMethodSpec()
   * @generated
   * @ordered
   */
  protected methodSpec methodSpec;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected interfaceTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.INTERFACE_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public methodSpec getMethodSpec()
  {
    return methodSpec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMethodSpec(methodSpec newMethodSpec, NotificationChain msgs)
  {
    methodSpec oldMethodSpec = methodSpec;
    methodSpec = newMethodSpec;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.INTERFACE_TYPE__METHOD_SPEC, oldMethodSpec, newMethodSpec);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMethodSpec(methodSpec newMethodSpec)
  {
    if (newMethodSpec != methodSpec)
    {
      NotificationChain msgs = null;
      if (methodSpec != null)
        msgs = ((InternalEObject)methodSpec).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.INTERFACE_TYPE__METHOD_SPEC, null, msgs);
      if (newMethodSpec != null)
        msgs = ((InternalEObject)newMethodSpec).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.INTERFACE_TYPE__METHOD_SPEC, null, msgs);
      msgs = basicSetMethodSpec(newMethodSpec, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.INTERFACE_TYPE__METHOD_SPEC, newMethodSpec, newMethodSpec));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.INTERFACE_TYPE__METHOD_SPEC:
        return basicSetMethodSpec(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.INTERFACE_TYPE__METHOD_SPEC:
        return getMethodSpec();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.INTERFACE_TYPE__METHOD_SPEC:
        setMethodSpec((methodSpec)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.INTERFACE_TYPE__METHOD_SPEC:
        setMethodSpec((methodSpec)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.INTERFACE_TYPE__METHOD_SPEC:
        return methodSpec != null;
    }
    return super.eIsSet(featureID);
  }

} //interfaceTypeImpl
