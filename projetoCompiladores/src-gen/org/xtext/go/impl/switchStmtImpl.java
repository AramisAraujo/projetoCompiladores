/**
 * generated by Xtext 2.13.0
 */
package org.xtext.go.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.go.GoPackage;
import org.xtext.go.exprSwitchStmt;
import org.xtext.go.switchStmt;
import org.xtext.go.typeSwitchStmt;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>switch Stmt</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.go.impl.switchStmtImpl#getExprSwitchStmt <em>Expr Switch Stmt</em>}</li>
 *   <li>{@link org.xtext.go.impl.switchStmtImpl#getTypeSwitchStmt <em>Type Switch Stmt</em>}</li>
 * </ul>
 *
 * @generated
 */
public class switchStmtImpl extends MinimalEObjectImpl.Container implements switchStmt
{
  /**
   * The cached value of the '{@link #getExprSwitchStmt() <em>Expr Switch Stmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExprSwitchStmt()
   * @generated
   * @ordered
   */
  protected exprSwitchStmt exprSwitchStmt;

  /**
   * The cached value of the '{@link #getTypeSwitchStmt() <em>Type Switch Stmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeSwitchStmt()
   * @generated
   * @ordered
   */
  protected typeSwitchStmt typeSwitchStmt;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected switchStmtImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.SWITCH_STMT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public exprSwitchStmt getExprSwitchStmt()
  {
    return exprSwitchStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExprSwitchStmt(exprSwitchStmt newExprSwitchStmt, NotificationChain msgs)
  {
    exprSwitchStmt oldExprSwitchStmt = exprSwitchStmt;
    exprSwitchStmt = newExprSwitchStmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.SWITCH_STMT__EXPR_SWITCH_STMT, oldExprSwitchStmt, newExprSwitchStmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExprSwitchStmt(exprSwitchStmt newExprSwitchStmt)
  {
    if (newExprSwitchStmt != exprSwitchStmt)
    {
      NotificationChain msgs = null;
      if (exprSwitchStmt != null)
        msgs = ((InternalEObject)exprSwitchStmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.SWITCH_STMT__EXPR_SWITCH_STMT, null, msgs);
      if (newExprSwitchStmt != null)
        msgs = ((InternalEObject)newExprSwitchStmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.SWITCH_STMT__EXPR_SWITCH_STMT, null, msgs);
      msgs = basicSetExprSwitchStmt(newExprSwitchStmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.SWITCH_STMT__EXPR_SWITCH_STMT, newExprSwitchStmt, newExprSwitchStmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public typeSwitchStmt getTypeSwitchStmt()
  {
    return typeSwitchStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTypeSwitchStmt(typeSwitchStmt newTypeSwitchStmt, NotificationChain msgs)
  {
    typeSwitchStmt oldTypeSwitchStmt = typeSwitchStmt;
    typeSwitchStmt = newTypeSwitchStmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.SWITCH_STMT__TYPE_SWITCH_STMT, oldTypeSwitchStmt, newTypeSwitchStmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTypeSwitchStmt(typeSwitchStmt newTypeSwitchStmt)
  {
    if (newTypeSwitchStmt != typeSwitchStmt)
    {
      NotificationChain msgs = null;
      if (typeSwitchStmt != null)
        msgs = ((InternalEObject)typeSwitchStmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.SWITCH_STMT__TYPE_SWITCH_STMT, null, msgs);
      if (newTypeSwitchStmt != null)
        msgs = ((InternalEObject)newTypeSwitchStmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.SWITCH_STMT__TYPE_SWITCH_STMT, null, msgs);
      msgs = basicSetTypeSwitchStmt(newTypeSwitchStmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.SWITCH_STMT__TYPE_SWITCH_STMT, newTypeSwitchStmt, newTypeSwitchStmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.SWITCH_STMT__EXPR_SWITCH_STMT:
        return basicSetExprSwitchStmt(null, msgs);
      case GoPackage.SWITCH_STMT__TYPE_SWITCH_STMT:
        return basicSetTypeSwitchStmt(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.SWITCH_STMT__EXPR_SWITCH_STMT:
        return getExprSwitchStmt();
      case GoPackage.SWITCH_STMT__TYPE_SWITCH_STMT:
        return getTypeSwitchStmt();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.SWITCH_STMT__EXPR_SWITCH_STMT:
        setExprSwitchStmt((exprSwitchStmt)newValue);
        return;
      case GoPackage.SWITCH_STMT__TYPE_SWITCH_STMT:
        setTypeSwitchStmt((typeSwitchStmt)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.SWITCH_STMT__EXPR_SWITCH_STMT:
        setExprSwitchStmt((exprSwitchStmt)null);
        return;
      case GoPackage.SWITCH_STMT__TYPE_SWITCH_STMT:
        setTypeSwitchStmt((typeSwitchStmt)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.SWITCH_STMT__EXPR_SWITCH_STMT:
        return exprSwitchStmt != null;
      case GoPackage.SWITCH_STMT__TYPE_SWITCH_STMT:
        return typeSwitchStmt != null;
    }
    return super.eIsSet(featureID);
  }

} //switchStmtImpl
