/**
 * generated by Xtext 2.13.0
 */
package org.xtext.go.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.go.GoPackage;
import org.xtext.go.expression;
import org.xtext.go.expressionMatched;
import org.xtext.go.unaryExpr;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.go.impl.expressionImpl#getUnaryExpr <em>Unary Expr</em>}</li>
 *   <li>{@link org.xtext.go.impl.expressionImpl#getExpressionMatched <em>Expression Matched</em>}</li>
 * </ul>
 *
 * @generated
 */
public class expressionImpl extends indexImpl implements expression
{
  /**
   * The cached value of the '{@link #getUnaryExpr() <em>Unary Expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnaryExpr()
   * @generated
   * @ordered
   */
  protected unaryExpr unaryExpr;

  /**
   * The cached value of the '{@link #getExpressionMatched() <em>Expression Matched</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpressionMatched()
   * @generated
   * @ordered
   */
  protected expressionMatched expressionMatched;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected expressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public unaryExpr getUnaryExpr()
  {
    return unaryExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUnaryExpr(unaryExpr newUnaryExpr, NotificationChain msgs)
  {
    unaryExpr oldUnaryExpr = unaryExpr;
    unaryExpr = newUnaryExpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.EXPRESSION__UNARY_EXPR, oldUnaryExpr, newUnaryExpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUnaryExpr(unaryExpr newUnaryExpr)
  {
    if (newUnaryExpr != unaryExpr)
    {
      NotificationChain msgs = null;
      if (unaryExpr != null)
        msgs = ((InternalEObject)unaryExpr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.EXPRESSION__UNARY_EXPR, null, msgs);
      if (newUnaryExpr != null)
        msgs = ((InternalEObject)newUnaryExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.EXPRESSION__UNARY_EXPR, null, msgs);
      msgs = basicSetUnaryExpr(newUnaryExpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.EXPRESSION__UNARY_EXPR, newUnaryExpr, newUnaryExpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public expressionMatched getExpressionMatched()
  {
    return expressionMatched;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpressionMatched(expressionMatched newExpressionMatched, NotificationChain msgs)
  {
    expressionMatched oldExpressionMatched = expressionMatched;
    expressionMatched = newExpressionMatched;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.EXPRESSION__EXPRESSION_MATCHED, oldExpressionMatched, newExpressionMatched);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpressionMatched(expressionMatched newExpressionMatched)
  {
    if (newExpressionMatched != expressionMatched)
    {
      NotificationChain msgs = null;
      if (expressionMatched != null)
        msgs = ((InternalEObject)expressionMatched).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.EXPRESSION__EXPRESSION_MATCHED, null, msgs);
      if (newExpressionMatched != null)
        msgs = ((InternalEObject)newExpressionMatched).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.EXPRESSION__EXPRESSION_MATCHED, null, msgs);
      msgs = basicSetExpressionMatched(newExpressionMatched, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.EXPRESSION__EXPRESSION_MATCHED, newExpressionMatched, newExpressionMatched));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.EXPRESSION__UNARY_EXPR:
        return basicSetUnaryExpr(null, msgs);
      case GoPackage.EXPRESSION__EXPRESSION_MATCHED:
        return basicSetExpressionMatched(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.EXPRESSION__UNARY_EXPR:
        return getUnaryExpr();
      case GoPackage.EXPRESSION__EXPRESSION_MATCHED:
        return getExpressionMatched();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.EXPRESSION__UNARY_EXPR:
        setUnaryExpr((unaryExpr)newValue);
        return;
      case GoPackage.EXPRESSION__EXPRESSION_MATCHED:
        setExpressionMatched((expressionMatched)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.EXPRESSION__UNARY_EXPR:
        setUnaryExpr((unaryExpr)null);
        return;
      case GoPackage.EXPRESSION__EXPRESSION_MATCHED:
        setExpressionMatched((expressionMatched)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.EXPRESSION__UNARY_EXPR:
        return unaryExpr != null;
      case GoPackage.EXPRESSION__EXPRESSION_MATCHED:
        return expressionMatched != null;
    }
    return super.eIsSet(featureID);
  }

} //expressionImpl
