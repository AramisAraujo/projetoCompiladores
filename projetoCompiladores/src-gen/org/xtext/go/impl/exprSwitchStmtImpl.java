/**
 * generated by Xtext 2.13.0
 */
package org.xtext.go.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.go.GoPackage;
import org.xtext.go.exprCaseClause;
import org.xtext.go.exprSwitchStmt;
import org.xtext.go.expression;
import org.xtext.go.simpleStmt;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>expr Switch Stmt</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.go.impl.exprSwitchStmtImpl#getSimpleStmt <em>Simple Stmt</em>}</li>
 *   <li>{@link org.xtext.go.impl.exprSwitchStmtImpl#getExpression <em>Expression</em>}</li>
 *   <li>{@link org.xtext.go.impl.exprSwitchStmtImpl#getExprCaseClause <em>Expr Case Clause</em>}</li>
 * </ul>
 *
 * @generated
 */
public class exprSwitchStmtImpl extends MinimalEObjectImpl.Container implements exprSwitchStmt
{
  /**
   * The cached value of the '{@link #getSimpleStmt() <em>Simple Stmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSimpleStmt()
   * @generated
   * @ordered
   */
  protected simpleStmt simpleStmt;

  /**
   * The cached value of the '{@link #getExpression() <em>Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression()
   * @generated
   * @ordered
   */
  protected expression expression;

  /**
   * The cached value of the '{@link #getExprCaseClause() <em>Expr Case Clause</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExprCaseClause()
   * @generated
   * @ordered
   */
  protected exprCaseClause exprCaseClause;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected exprSwitchStmtImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.EXPR_SWITCH_STMT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public simpleStmt getSimpleStmt()
  {
    return simpleStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSimpleStmt(simpleStmt newSimpleStmt, NotificationChain msgs)
  {
    simpleStmt oldSimpleStmt = simpleStmt;
    simpleStmt = newSimpleStmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.EXPR_SWITCH_STMT__SIMPLE_STMT, oldSimpleStmt, newSimpleStmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSimpleStmt(simpleStmt newSimpleStmt)
  {
    if (newSimpleStmt != simpleStmt)
    {
      NotificationChain msgs = null;
      if (simpleStmt != null)
        msgs = ((InternalEObject)simpleStmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.EXPR_SWITCH_STMT__SIMPLE_STMT, null, msgs);
      if (newSimpleStmt != null)
        msgs = ((InternalEObject)newSimpleStmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.EXPR_SWITCH_STMT__SIMPLE_STMT, null, msgs);
      msgs = basicSetSimpleStmt(newSimpleStmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.EXPR_SWITCH_STMT__SIMPLE_STMT, newSimpleStmt, newSimpleStmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public expression getExpression()
  {
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpression(expression newExpression, NotificationChain msgs)
  {
    expression oldExpression = expression;
    expression = newExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.EXPR_SWITCH_STMT__EXPRESSION, oldExpression, newExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpression(expression newExpression)
  {
    if (newExpression != expression)
    {
      NotificationChain msgs = null;
      if (expression != null)
        msgs = ((InternalEObject)expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.EXPR_SWITCH_STMT__EXPRESSION, null, msgs);
      if (newExpression != null)
        msgs = ((InternalEObject)newExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.EXPR_SWITCH_STMT__EXPRESSION, null, msgs);
      msgs = basicSetExpression(newExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.EXPR_SWITCH_STMT__EXPRESSION, newExpression, newExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public exprCaseClause getExprCaseClause()
  {
    return exprCaseClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExprCaseClause(exprCaseClause newExprCaseClause, NotificationChain msgs)
  {
    exprCaseClause oldExprCaseClause = exprCaseClause;
    exprCaseClause = newExprCaseClause;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.EXPR_SWITCH_STMT__EXPR_CASE_CLAUSE, oldExprCaseClause, newExprCaseClause);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExprCaseClause(exprCaseClause newExprCaseClause)
  {
    if (newExprCaseClause != exprCaseClause)
    {
      NotificationChain msgs = null;
      if (exprCaseClause != null)
        msgs = ((InternalEObject)exprCaseClause).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.EXPR_SWITCH_STMT__EXPR_CASE_CLAUSE, null, msgs);
      if (newExprCaseClause != null)
        msgs = ((InternalEObject)newExprCaseClause).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.EXPR_SWITCH_STMT__EXPR_CASE_CLAUSE, null, msgs);
      msgs = basicSetExprCaseClause(newExprCaseClause, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.EXPR_SWITCH_STMT__EXPR_CASE_CLAUSE, newExprCaseClause, newExprCaseClause));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.EXPR_SWITCH_STMT__SIMPLE_STMT:
        return basicSetSimpleStmt(null, msgs);
      case GoPackage.EXPR_SWITCH_STMT__EXPRESSION:
        return basicSetExpression(null, msgs);
      case GoPackage.EXPR_SWITCH_STMT__EXPR_CASE_CLAUSE:
        return basicSetExprCaseClause(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.EXPR_SWITCH_STMT__SIMPLE_STMT:
        return getSimpleStmt();
      case GoPackage.EXPR_SWITCH_STMT__EXPRESSION:
        return getExpression();
      case GoPackage.EXPR_SWITCH_STMT__EXPR_CASE_CLAUSE:
        return getExprCaseClause();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.EXPR_SWITCH_STMT__SIMPLE_STMT:
        setSimpleStmt((simpleStmt)newValue);
        return;
      case GoPackage.EXPR_SWITCH_STMT__EXPRESSION:
        setExpression((expression)newValue);
        return;
      case GoPackage.EXPR_SWITCH_STMT__EXPR_CASE_CLAUSE:
        setExprCaseClause((exprCaseClause)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.EXPR_SWITCH_STMT__SIMPLE_STMT:
        setSimpleStmt((simpleStmt)null);
        return;
      case GoPackage.EXPR_SWITCH_STMT__EXPRESSION:
        setExpression((expression)null);
        return;
      case GoPackage.EXPR_SWITCH_STMT__EXPR_CASE_CLAUSE:
        setExprCaseClause((exprCaseClause)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.EXPR_SWITCH_STMT__SIMPLE_STMT:
        return simpleStmt != null;
      case GoPackage.EXPR_SWITCH_STMT__EXPRESSION:
        return expression != null;
      case GoPackage.EXPR_SWITCH_STMT__EXPR_CASE_CLAUSE:
        return exprCaseClause != null;
    }
    return super.eIsSet(featureID);
  }

} //exprSwitchStmtImpl
