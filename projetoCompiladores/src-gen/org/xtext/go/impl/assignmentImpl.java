/**
 * generated by Xtext 2.14.0
 */
package org.xtext.go.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.go.GoPackage;
import org.xtext.go.assignment;
import org.xtext.go.expressionList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>assignment</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.go.impl.assignmentImpl#getExprList1 <em>Expr List1</em>}</li>
 *   <li>{@link org.xtext.go.impl.assignmentImpl#getOperation <em>Operation</em>}</li>
 *   <li>{@link org.xtext.go.impl.assignmentImpl#getExprList2 <em>Expr List2</em>}</li>
 * </ul>
 *
 * @generated
 */
public class assignmentImpl extends MinimalEObjectImpl.Container implements assignment
{
  /**
   * The cached value of the '{@link #getExprList1() <em>Expr List1</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExprList1()
   * @generated
   * @ordered
   */
  protected expressionList exprList1;

  /**
   * The default value of the '{@link #getOperation() <em>Operation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperation()
   * @generated
   * @ordered
   */
  protected static final String OPERATION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOperation() <em>Operation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperation()
   * @generated
   * @ordered
   */
  protected String operation = OPERATION_EDEFAULT;

  /**
   * The cached value of the '{@link #getExprList2() <em>Expr List2</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExprList2()
   * @generated
   * @ordered
   */
  protected expressionList exprList2;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected assignmentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.ASSIGNMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public expressionList getExprList1()
  {
    return exprList1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExprList1(expressionList newExprList1, NotificationChain msgs)
  {
    expressionList oldExprList1 = exprList1;
    exprList1 = newExprList1;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.ASSIGNMENT__EXPR_LIST1, oldExprList1, newExprList1);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExprList1(expressionList newExprList1)
  {
    if (newExprList1 != exprList1)
    {
      NotificationChain msgs = null;
      if (exprList1 != null)
        msgs = ((InternalEObject)exprList1).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.ASSIGNMENT__EXPR_LIST1, null, msgs);
      if (newExprList1 != null)
        msgs = ((InternalEObject)newExprList1).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.ASSIGNMENT__EXPR_LIST1, null, msgs);
      msgs = basicSetExprList1(newExprList1, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.ASSIGNMENT__EXPR_LIST1, newExprList1, newExprList1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getOperation()
  {
    return operation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOperation(String newOperation)
  {
    String oldOperation = operation;
    operation = newOperation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.ASSIGNMENT__OPERATION, oldOperation, operation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public expressionList getExprList2()
  {
    return exprList2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExprList2(expressionList newExprList2, NotificationChain msgs)
  {
    expressionList oldExprList2 = exprList2;
    exprList2 = newExprList2;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.ASSIGNMENT__EXPR_LIST2, oldExprList2, newExprList2);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExprList2(expressionList newExprList2)
  {
    if (newExprList2 != exprList2)
    {
      NotificationChain msgs = null;
      if (exprList2 != null)
        msgs = ((InternalEObject)exprList2).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.ASSIGNMENT__EXPR_LIST2, null, msgs);
      if (newExprList2 != null)
        msgs = ((InternalEObject)newExprList2).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.ASSIGNMENT__EXPR_LIST2, null, msgs);
      msgs = basicSetExprList2(newExprList2, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.ASSIGNMENT__EXPR_LIST2, newExprList2, newExprList2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.ASSIGNMENT__EXPR_LIST1:
        return basicSetExprList1(null, msgs);
      case GoPackage.ASSIGNMENT__EXPR_LIST2:
        return basicSetExprList2(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.ASSIGNMENT__EXPR_LIST1:
        return getExprList1();
      case GoPackage.ASSIGNMENT__OPERATION:
        return getOperation();
      case GoPackage.ASSIGNMENT__EXPR_LIST2:
        return getExprList2();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.ASSIGNMENT__EXPR_LIST1:
        setExprList1((expressionList)newValue);
        return;
      case GoPackage.ASSIGNMENT__OPERATION:
        setOperation((String)newValue);
        return;
      case GoPackage.ASSIGNMENT__EXPR_LIST2:
        setExprList2((expressionList)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.ASSIGNMENT__EXPR_LIST1:
        setExprList1((expressionList)null);
        return;
      case GoPackage.ASSIGNMENT__OPERATION:
        setOperation(OPERATION_EDEFAULT);
        return;
      case GoPackage.ASSIGNMENT__EXPR_LIST2:
        setExprList2((expressionList)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.ASSIGNMENT__EXPR_LIST1:
        return exprList1 != null;
      case GoPackage.ASSIGNMENT__OPERATION:
        return OPERATION_EDEFAULT == null ? operation != null : !OPERATION_EDEFAULT.equals(operation);
      case GoPackage.ASSIGNMENT__EXPR_LIST2:
        return exprList2 != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (operation: ");
    result.append(operation);
    result.append(')');
    return result.toString();
  }

} //assignmentImpl
