/**
 * generated by Xtext 2.13.0
 */
package org.xtext.go.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.go.GoPackage;
import org.xtext.go.block;
import org.xtext.go.expression;
import org.xtext.go.forClause;
import org.xtext.go.forStmt;
import org.xtext.go.rangeClause;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>for Stmt</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.go.impl.forStmtImpl#getExpression <em>Expression</em>}</li>
 *   <li>{@link org.xtext.go.impl.forStmtImpl#getForClause <em>For Clause</em>}</li>
 *   <li>{@link org.xtext.go.impl.forStmtImpl#getRangeClause <em>Range Clause</em>}</li>
 *   <li>{@link org.xtext.go.impl.forStmtImpl#getBlock <em>Block</em>}</li>
 * </ul>
 *
 * @generated
 */
public class forStmtImpl extends MinimalEObjectImpl.Container implements forStmt
{
  /**
   * The cached value of the '{@link #getExpression() <em>Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression()
   * @generated
   * @ordered
   */
  protected expression expression;

  /**
   * The cached value of the '{@link #getForClause() <em>For Clause</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getForClause()
   * @generated
   * @ordered
   */
  protected forClause forClause;

  /**
   * The cached value of the '{@link #getRangeClause() <em>Range Clause</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRangeClause()
   * @generated
   * @ordered
   */
  protected rangeClause rangeClause;

  /**
   * The cached value of the '{@link #getBlock() <em>Block</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBlock()
   * @generated
   * @ordered
   */
  protected block block;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected forStmtImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.FOR_STMT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public expression getExpression()
  {
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpression(expression newExpression, NotificationChain msgs)
  {
    expression oldExpression = expression;
    expression = newExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.FOR_STMT__EXPRESSION, oldExpression, newExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpression(expression newExpression)
  {
    if (newExpression != expression)
    {
      NotificationChain msgs = null;
      if (expression != null)
        msgs = ((InternalEObject)expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.FOR_STMT__EXPRESSION, null, msgs);
      if (newExpression != null)
        msgs = ((InternalEObject)newExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.FOR_STMT__EXPRESSION, null, msgs);
      msgs = basicSetExpression(newExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.FOR_STMT__EXPRESSION, newExpression, newExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public forClause getForClause()
  {
    return forClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetForClause(forClause newForClause, NotificationChain msgs)
  {
    forClause oldForClause = forClause;
    forClause = newForClause;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.FOR_STMT__FOR_CLAUSE, oldForClause, newForClause);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setForClause(forClause newForClause)
  {
    if (newForClause != forClause)
    {
      NotificationChain msgs = null;
      if (forClause != null)
        msgs = ((InternalEObject)forClause).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.FOR_STMT__FOR_CLAUSE, null, msgs);
      if (newForClause != null)
        msgs = ((InternalEObject)newForClause).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.FOR_STMT__FOR_CLAUSE, null, msgs);
      msgs = basicSetForClause(newForClause, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.FOR_STMT__FOR_CLAUSE, newForClause, newForClause));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public rangeClause getRangeClause()
  {
    return rangeClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRangeClause(rangeClause newRangeClause, NotificationChain msgs)
  {
    rangeClause oldRangeClause = rangeClause;
    rangeClause = newRangeClause;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.FOR_STMT__RANGE_CLAUSE, oldRangeClause, newRangeClause);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRangeClause(rangeClause newRangeClause)
  {
    if (newRangeClause != rangeClause)
    {
      NotificationChain msgs = null;
      if (rangeClause != null)
        msgs = ((InternalEObject)rangeClause).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.FOR_STMT__RANGE_CLAUSE, null, msgs);
      if (newRangeClause != null)
        msgs = ((InternalEObject)newRangeClause).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.FOR_STMT__RANGE_CLAUSE, null, msgs);
      msgs = basicSetRangeClause(newRangeClause, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.FOR_STMT__RANGE_CLAUSE, newRangeClause, newRangeClause));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public block getBlock()
  {
    return block;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBlock(block newBlock, NotificationChain msgs)
  {
    block oldBlock = block;
    block = newBlock;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.FOR_STMT__BLOCK, oldBlock, newBlock);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBlock(block newBlock)
  {
    if (newBlock != block)
    {
      NotificationChain msgs = null;
      if (block != null)
        msgs = ((InternalEObject)block).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.FOR_STMT__BLOCK, null, msgs);
      if (newBlock != null)
        msgs = ((InternalEObject)newBlock).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.FOR_STMT__BLOCK, null, msgs);
      msgs = basicSetBlock(newBlock, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.FOR_STMT__BLOCK, newBlock, newBlock));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.FOR_STMT__EXPRESSION:
        return basicSetExpression(null, msgs);
      case GoPackage.FOR_STMT__FOR_CLAUSE:
        return basicSetForClause(null, msgs);
      case GoPackage.FOR_STMT__RANGE_CLAUSE:
        return basicSetRangeClause(null, msgs);
      case GoPackage.FOR_STMT__BLOCK:
        return basicSetBlock(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.FOR_STMT__EXPRESSION:
        return getExpression();
      case GoPackage.FOR_STMT__FOR_CLAUSE:
        return getForClause();
      case GoPackage.FOR_STMT__RANGE_CLAUSE:
        return getRangeClause();
      case GoPackage.FOR_STMT__BLOCK:
        return getBlock();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.FOR_STMT__EXPRESSION:
        setExpression((expression)newValue);
        return;
      case GoPackage.FOR_STMT__FOR_CLAUSE:
        setForClause((forClause)newValue);
        return;
      case GoPackage.FOR_STMT__RANGE_CLAUSE:
        setRangeClause((rangeClause)newValue);
        return;
      case GoPackage.FOR_STMT__BLOCK:
        setBlock((block)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.FOR_STMT__EXPRESSION:
        setExpression((expression)null);
        return;
      case GoPackage.FOR_STMT__FOR_CLAUSE:
        setForClause((forClause)null);
        return;
      case GoPackage.FOR_STMT__RANGE_CLAUSE:
        setRangeClause((rangeClause)null);
        return;
      case GoPackage.FOR_STMT__BLOCK:
        setBlock((block)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.FOR_STMT__EXPRESSION:
        return expression != null;
      case GoPackage.FOR_STMT__FOR_CLAUSE:
        return forClause != null;
      case GoPackage.FOR_STMT__RANGE_CLAUSE:
        return rangeClause != null;
      case GoPackage.FOR_STMT__BLOCK:
        return block != null;
    }
    return super.eIsSet(featureID);
  }

} //forStmtImpl
