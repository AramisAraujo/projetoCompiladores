/**
 * generated by Xtext 2.13.0
 */
package org.xtext.go;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

/**
 * <!-- begin-user-doc -->
 * The <b>Package</b> for the model.
 * It contains accessors for the meta objects to represent
 * <ul>
 *   <li>each class,</li>
 *   <li>each feature of each class,</li>
 *   <li>each enum,</li>
 *   <li>and each data type</li>
 * </ul>
 * <!-- end-user-doc -->
 * @see org.xtext.go.GoFactory
 * @model kind="package"
 * @generated
 */
public interface GoPackage extends EPackage
{
  /**
   * The package name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNAME = "go";

  /**
   * The package namespace URI.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNS_URI = "http://www.xtext.org/Go";

  /**
   * The package namespace name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNS_PREFIX = "go";

  /**
   * The singleton instance of the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  GoPackage eINSTANCE = org.xtext.go.impl.GoPackageImpl.init();

  /**
   * The meta object id for the '{@link org.xtext.go.impl.ModelImpl <em>Model</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.go.impl.ModelImpl
   * @see org.xtext.go.impl.GoPackageImpl#getModel()
   * @generated
   */
  int MODEL = 0;

  /**
   * The feature id for the '<em><b>Greetings</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MODEL__GREETINGS = 0;

  /**
   * The number of structural features of the '<em>Model</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MODEL_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link org.xtext.go.impl.programImpl <em>program</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.go.impl.programImpl
   * @see org.xtext.go.impl.GoPackageImpl#getprogram()
   * @generated
   */
  int PROGRAM = 1;

  /**
   * The number of structural features of the '<em>program</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PROGRAM_FEATURE_COUNT = 0;

  /**
   * The meta object id for the '{@link org.xtext.go.impl.Function_declImpl <em>Function decl</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.go.impl.Function_declImpl
   * @see org.xtext.go.impl.GoPackageImpl#getFunction_decl()
   * @generated
   */
  int FUNCTION_DECL = 11;

  /**
   * The number of structural features of the '<em>Function decl</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION_DECL_FEATURE_COUNT = PROGRAM_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link org.xtext.go.impl.Function_bodyImpl <em>Function body</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.go.impl.Function_bodyImpl
   * @see org.xtext.go.impl.GoPackageImpl#getFunction_body()
   * @generated
   */
  int FUNCTION_BODY = 12;

  /**
   * The number of structural features of the '<em>Function body</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FUNCTION_BODY_FEATURE_COUNT = FUNCTION_DECL_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link org.xtext.go.impl.BlockImpl <em>Block</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.go.impl.BlockImpl
   * @see org.xtext.go.impl.GoPackageImpl#getBlock()
   * @generated
   */
  int BLOCK = 2;

  /**
   * The number of structural features of the '<em>Block</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int BLOCK_FEATURE_COUNT = FUNCTION_BODY_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link org.xtext.go.impl.Statement_listImpl <em>Statement list</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.go.impl.Statement_listImpl
   * @see org.xtext.go.impl.GoPackageImpl#getStatement_list()
   * @generated
   */
  int STATEMENT_LIST = 3;

  /**
   * The feature id for the '<em><b>Statement</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int STATEMENT_LIST__STATEMENT = BLOCK_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>Statement list</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int STATEMENT_LIST_FEATURE_COUNT = BLOCK_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link org.xtext.go.impl.StatementImpl <em>Statement</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.go.impl.StatementImpl
   * @see org.xtext.go.impl.GoPackageImpl#getStatement()
   * @generated
   */
  int STATEMENT = 18;

  /**
   * The number of structural features of the '<em>Statement</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int STATEMENT_FEATURE_COUNT = 0;

  /**
   * The meta object id for the '{@link org.xtext.go.impl.DeclarationImpl <em>Declaration</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.go.impl.DeclarationImpl
   * @see org.xtext.go.impl.GoPackageImpl#getDeclaration()
   * @generated
   */
  int DECLARATION = 4;

  /**
   * The number of structural features of the '<em>Declaration</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DECLARATION_FEATURE_COUNT = STATEMENT_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link org.xtext.go.impl.Const_declImpl <em>Const decl</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.go.impl.Const_declImpl
   * @see org.xtext.go.impl.GoPackageImpl#getConst_decl()
   * @generated
   */
  int CONST_DECL = 5;

  /**
   * The feature id for the '<em><b>Const spec</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONST_DECL__CONST_SPEC = DECLARATION_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>Const decl</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONST_DECL_FEATURE_COUNT = DECLARATION_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link org.xtext.go.impl.Const_specImpl <em>Const spec</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.go.impl.Const_specImpl
   * @see org.xtext.go.impl.GoPackageImpl#getConst_spec()
   * @generated
   */
  int CONST_SPEC = 6;

  /**
   * The feature id for the '<em><b>Const spec</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONST_SPEC__CONST_SPEC = CONST_DECL__CONST_SPEC;

  /**
   * The number of structural features of the '<em>Const spec</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONST_SPEC_FEATURE_COUNT = CONST_DECL_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link org.xtext.go.impl.Expression_listImpl <em>Expression list</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.go.impl.Expression_listImpl
   * @see org.xtext.go.impl.GoPackageImpl#getExpression_list()
   * @generated
   */
  int EXPRESSION_LIST = 7;

  /**
   * The feature id for the '<em><b>Const spec</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION_LIST__CONST_SPEC = CONST_SPEC__CONST_SPEC;

  /**
   * The feature id for the '<em><b>Expression</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION_LIST__EXPRESSION = CONST_SPEC_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>Block</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION_LIST__BLOCK = CONST_SPEC_FEATURE_COUNT + 1;

  /**
   * The feature id for the '<em><b>If stmt</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION_LIST__IF_STMT = CONST_SPEC_FEATURE_COUNT + 2;

  /**
   * The number of structural features of the '<em>Expression list</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION_LIST_FEATURE_COUNT = CONST_SPEC_FEATURE_COUNT + 3;

  /**
   * The meta object id for the '{@link org.xtext.go.impl.Var_declImpl <em>Var decl</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.go.impl.Var_declImpl
   * @see org.xtext.go.impl.GoPackageImpl#getVar_decl()
   * @generated
   */
  int VAR_DECL = 8;

  /**
   * The feature id for the '<em><b>Var spec</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VAR_DECL__VAR_SPEC = DECLARATION_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>Var decl</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VAR_DECL_FEATURE_COUNT = DECLARATION_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link org.xtext.go.impl.Var_specImpl <em>Var spec</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.go.impl.Var_specImpl
   * @see org.xtext.go.impl.GoPackageImpl#getVar_spec()
   * @generated
   */
  int VAR_SPEC = 9;

  /**
   * The number of structural features of the '<em>Var spec</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VAR_SPEC_FEATURE_COUNT = 0;

  /**
   * The meta object id for the '{@link org.xtext.go.impl.Simple_stmtImpl <em>Simple stmt</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.go.impl.Simple_stmtImpl
   * @see org.xtext.go.impl.GoPackageImpl#getSimple_stmt()
   * @generated
   */
  int SIMPLE_STMT = 19;

  /**
   * The feature id for the '<em><b>Expression</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_STMT__EXPRESSION = STATEMENT_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>Block</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_STMT__BLOCK = STATEMENT_FEATURE_COUNT + 1;

  /**
   * The feature id for the '<em><b>If stmt</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_STMT__IF_STMT = STATEMENT_FEATURE_COUNT + 2;

  /**
   * The number of structural features of the '<em>Simple stmt</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_STMT_FEATURE_COUNT = STATEMENT_FEATURE_COUNT + 3;

  /**
   * The meta object id for the '{@link org.xtext.go.impl.Short_var_declImpl <em>Short var decl</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.go.impl.Short_var_declImpl
   * @see org.xtext.go.impl.GoPackageImpl#getShort_var_decl()
   * @generated
   */
  int SHORT_VAR_DECL = 10;

  /**
   * The feature id for the '<em><b>Expression</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SHORT_VAR_DECL__EXPRESSION = SIMPLE_STMT__EXPRESSION;

  /**
   * The feature id for the '<em><b>Block</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SHORT_VAR_DECL__BLOCK = SIMPLE_STMT__BLOCK;

  /**
   * The feature id for the '<em><b>If stmt</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SHORT_VAR_DECL__IF_STMT = SIMPLE_STMT__IF_STMT;

  /**
   * The number of structural features of the '<em>Short var decl</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SHORT_VAR_DECL_FEATURE_COUNT = SIMPLE_STMT_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link org.xtext.go.impl.Primary_exprImpl <em>Primary expr</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.go.impl.Primary_exprImpl
   * @see org.xtext.go.impl.GoPackageImpl#getPrimary_expr()
   * @generated
   */
  int PRIMARY_EXPR = 14;

  /**
   * The number of structural features of the '<em>Primary expr</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PRIMARY_EXPR_FEATURE_COUNT = 0;

  /**
   * The meta object id for the '{@link org.xtext.go.impl.OperandImpl <em>Operand</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.go.impl.OperandImpl
   * @see org.xtext.go.impl.GoPackageImpl#getOperand()
   * @generated
   */
  int OPERAND = 13;

  /**
   * The number of structural features of the '<em>Operand</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int OPERAND_FEATURE_COUNT = PRIMARY_EXPR_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link org.xtext.go.impl.ExpressionImpl <em>Expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.go.impl.ExpressionImpl
   * @see org.xtext.go.impl.GoPackageImpl#getExpression()
   * @generated
   */
  int EXPRESSION = 15;

  /**
   * The feature id for the '<em><b>Unary expr</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION__UNARY_EXPR = OPERAND_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>Expression line</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION__EXPRESSION_LINE = OPERAND_FEATURE_COUNT + 1;

  /**
   * The number of structural features of the '<em>Expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION_FEATURE_COUNT = OPERAND_FEATURE_COUNT + 2;

  /**
   * The meta object id for the '{@link org.xtext.go.impl.Expression_lineImpl <em>Expression line</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.go.impl.Expression_lineImpl
   * @see org.xtext.go.impl.GoPackageImpl#getExpression_line()
   * @generated
   */
  int EXPRESSION_LINE = 16;

  /**
   * The feature id for the '<em><b>Binary op</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION_LINE__BINARY_OP = 0;

  /**
   * The feature id for the '<em><b>Expression</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION_LINE__EXPRESSION = 1;

  /**
   * The feature id for the '<em><b>Expression line</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION_LINE__EXPRESSION_LINE = 2;

  /**
   * The number of structural features of the '<em>Expression line</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION_LINE_FEATURE_COUNT = 3;

  /**
   * The meta object id for the '{@link org.xtext.go.impl.Unary_exprImpl <em>Unary expr</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.go.impl.Unary_exprImpl
   * @see org.xtext.go.impl.GoPackageImpl#getUnary_expr()
   * @generated
   */
  int UNARY_EXPR = 17;

  /**
   * The feature id for the '<em><b>Primary expr</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNARY_EXPR__PRIMARY_EXPR = 0;

  /**
   * The feature id for the '<em><b>Unary op</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNARY_EXPR__UNARY_OP = 1;

  /**
   * The feature id for the '<em><b>Unary expr</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNARY_EXPR__UNARY_EXPR = 2;

  /**
   * The number of structural features of the '<em>Unary expr</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNARY_EXPR_FEATURE_COUNT = 3;

  /**
   * The meta object id for the '{@link org.xtext.go.impl.Labeled_stmtImpl <em>Labeled stmt</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.go.impl.Labeled_stmtImpl
   * @see org.xtext.go.impl.GoPackageImpl#getLabeled_stmt()
   * @generated
   */
  int LABELED_STMT = 20;

  /**
   * The feature id for the '<em><b>Id</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LABELED_STMT__ID = STATEMENT_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>Statement</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LABELED_STMT__STATEMENT = STATEMENT_FEATURE_COUNT + 1;

  /**
   * The number of structural features of the '<em>Labeled stmt</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LABELED_STMT_FEATURE_COUNT = STATEMENT_FEATURE_COUNT + 2;

  /**
   * The meta object id for the '{@link org.xtext.go.impl.Expression_stmtImpl <em>Expression stmt</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.go.impl.Expression_stmtImpl
   * @see org.xtext.go.impl.GoPackageImpl#getExpression_stmt()
   * @generated
   */
  int EXPRESSION_STMT = 21;

  /**
   * The number of structural features of the '<em>Expression stmt</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION_STMT_FEATURE_COUNT = 0;

  /**
   * The meta object id for the '{@link org.xtext.go.impl.If_stmtImpl <em>If stmt</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.go.impl.If_stmtImpl
   * @see org.xtext.go.impl.GoPackageImpl#getIf_stmt()
   * @generated
   */
  int IF_STMT = 22;

  /**
   * The feature id for the '<em><b>Expression</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int IF_STMT__EXPRESSION = STATEMENT_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>Block</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int IF_STMT__BLOCK = STATEMENT_FEATURE_COUNT + 1;

  /**
   * The feature id for the '<em><b>If stmt</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int IF_STMT__IF_STMT = STATEMENT_FEATURE_COUNT + 2;

  /**
   * The number of structural features of the '<em>If stmt</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int IF_STMT_FEATURE_COUNT = STATEMENT_FEATURE_COUNT + 3;

  /**
   * The meta object id for the '{@link org.xtext.go.impl.Go_stmtImpl <em>Go stmt</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.go.impl.Go_stmtImpl
   * @see org.xtext.go.impl.GoPackageImpl#getGo_stmt()
   * @generated
   */
  int GO_STMT = 23;

  /**
   * The number of structural features of the '<em>Go stmt</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int GO_STMT_FEATURE_COUNT = STATEMENT_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link org.xtext.go.impl.Return_stmtImpl <em>Return stmt</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.go.impl.Return_stmtImpl
   * @see org.xtext.go.impl.GoPackageImpl#getReturn_stmt()
   * @generated
   */
  int RETURN_STMT = 24;

  /**
   * The number of structural features of the '<em>Return stmt</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int RETURN_STMT_FEATURE_COUNT = STATEMENT_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link org.xtext.go.impl.Defer_stmtImpl <em>Defer stmt</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.xtext.go.impl.Defer_stmtImpl
   * @see org.xtext.go.impl.GoPackageImpl#getDefer_stmt()
   * @generated
   */
  int DEFER_STMT = 25;

  /**
   * The number of structural features of the '<em>Defer stmt</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DEFER_STMT_FEATURE_COUNT = STATEMENT_FEATURE_COUNT + 0;


  /**
   * Returns the meta object for class '{@link org.xtext.go.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Model</em>'.
   * @see org.xtext.go.Model
   * @generated
   */
  EClass getModel();

  /**
   * Returns the meta object for the containment reference list '{@link org.xtext.go.Model#getGreetings <em>Greetings</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Greetings</em>'.
   * @see org.xtext.go.Model#getGreetings()
   * @see #getModel()
   * @generated
   */
  EReference getModel_Greetings();

  /**
   * Returns the meta object for class '{@link org.xtext.go.program <em>program</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>program</em>'.
   * @see org.xtext.go.program
   * @generated
   */
  EClass getprogram();

  /**
   * Returns the meta object for class '{@link org.xtext.go.Block <em>Block</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Block</em>'.
   * @see org.xtext.go.Block
   * @generated
   */
  EClass getBlock();

  /**
   * Returns the meta object for class '{@link org.xtext.go.Statement_list <em>Statement list</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Statement list</em>'.
   * @see org.xtext.go.Statement_list
   * @generated
   */
  EClass getStatement_list();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.go.Statement_list#getStatement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Statement</em>'.
   * @see org.xtext.go.Statement_list#getStatement()
   * @see #getStatement_list()
   * @generated
   */
  EReference getStatement_list_Statement();

  /**
   * Returns the meta object for class '{@link org.xtext.go.Declaration <em>Declaration</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Declaration</em>'.
   * @see org.xtext.go.Declaration
   * @generated
   */
  EClass getDeclaration();

  /**
   * Returns the meta object for class '{@link org.xtext.go.Const_decl <em>Const decl</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Const decl</em>'.
   * @see org.xtext.go.Const_decl
   * @generated
   */
  EClass getConst_decl();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.go.Const_decl#getConst_spec <em>Const spec</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Const spec</em>'.
   * @see org.xtext.go.Const_decl#getConst_spec()
   * @see #getConst_decl()
   * @generated
   */
  EReference getConst_decl_Const_spec();

  /**
   * Returns the meta object for class '{@link org.xtext.go.Const_spec <em>Const spec</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Const spec</em>'.
   * @see org.xtext.go.Const_spec
   * @generated
   */
  EClass getConst_spec();

  /**
   * Returns the meta object for class '{@link org.xtext.go.Expression_list <em>Expression list</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Expression list</em>'.
   * @see org.xtext.go.Expression_list
   * @generated
   */
  EClass getExpression_list();

  /**
   * Returns the meta object for class '{@link org.xtext.go.Var_decl <em>Var decl</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Var decl</em>'.
   * @see org.xtext.go.Var_decl
   * @generated
   */
  EClass getVar_decl();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.go.Var_decl#getVar_spec <em>Var spec</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Var spec</em>'.
   * @see org.xtext.go.Var_decl#getVar_spec()
   * @see #getVar_decl()
   * @generated
   */
  EReference getVar_decl_Var_spec();

  /**
   * Returns the meta object for class '{@link org.xtext.go.Var_spec <em>Var spec</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Var spec</em>'.
   * @see org.xtext.go.Var_spec
   * @generated
   */
  EClass getVar_spec();

  /**
   * Returns the meta object for class '{@link org.xtext.go.Short_var_decl <em>Short var decl</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Short var decl</em>'.
   * @see org.xtext.go.Short_var_decl
   * @generated
   */
  EClass getShort_var_decl();

  /**
   * Returns the meta object for class '{@link org.xtext.go.Function_decl <em>Function decl</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Function decl</em>'.
   * @see org.xtext.go.Function_decl
   * @generated
   */
  EClass getFunction_decl();

  /**
   * Returns the meta object for class '{@link org.xtext.go.Function_body <em>Function body</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Function body</em>'.
   * @see org.xtext.go.Function_body
   * @generated
   */
  EClass getFunction_body();

  /**
   * Returns the meta object for class '{@link org.xtext.go.Operand <em>Operand</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Operand</em>'.
   * @see org.xtext.go.Operand
   * @generated
   */
  EClass getOperand();

  /**
   * Returns the meta object for class '{@link org.xtext.go.Primary_expr <em>Primary expr</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Primary expr</em>'.
   * @see org.xtext.go.Primary_expr
   * @generated
   */
  EClass getPrimary_expr();

  /**
   * Returns the meta object for class '{@link org.xtext.go.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Expression</em>'.
   * @see org.xtext.go.Expression
   * @generated
   */
  EClass getExpression();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.go.Expression#getUnary_expr <em>Unary expr</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Unary expr</em>'.
   * @see org.xtext.go.Expression#getUnary_expr()
   * @see #getExpression()
   * @generated
   */
  EReference getExpression_Unary_expr();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.go.Expression#getExpression_line <em>Expression line</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Expression line</em>'.
   * @see org.xtext.go.Expression#getExpression_line()
   * @see #getExpression()
   * @generated
   */
  EReference getExpression_Expression_line();

  /**
   * Returns the meta object for class '{@link org.xtext.go.Expression_line <em>Expression line</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Expression line</em>'.
   * @see org.xtext.go.Expression_line
   * @generated
   */
  EClass getExpression_line();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.go.Expression_line#getBinary_op <em>Binary op</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Binary op</em>'.
   * @see org.xtext.go.Expression_line#getBinary_op()
   * @see #getExpression_line()
   * @generated
   */
  EAttribute getExpression_line_Binary_op();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.go.Expression_line#getExpression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Expression</em>'.
   * @see org.xtext.go.Expression_line#getExpression()
   * @see #getExpression_line()
   * @generated
   */
  EReference getExpression_line_Expression();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.go.Expression_line#getExpression_line <em>Expression line</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Expression line</em>'.
   * @see org.xtext.go.Expression_line#getExpression_line()
   * @see #getExpression_line()
   * @generated
   */
  EReference getExpression_line_Expression_line();

  /**
   * Returns the meta object for class '{@link org.xtext.go.Unary_expr <em>Unary expr</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Unary expr</em>'.
   * @see org.xtext.go.Unary_expr
   * @generated
   */
  EClass getUnary_expr();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.go.Unary_expr#getPrimary_expr <em>Primary expr</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Primary expr</em>'.
   * @see org.xtext.go.Unary_expr#getPrimary_expr()
   * @see #getUnary_expr()
   * @generated
   */
  EReference getUnary_expr_Primary_expr();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.go.Unary_expr#getUnary_op <em>Unary op</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Unary op</em>'.
   * @see org.xtext.go.Unary_expr#getUnary_op()
   * @see #getUnary_expr()
   * @generated
   */
  EAttribute getUnary_expr_Unary_op();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.go.Unary_expr#getUnary_expr <em>Unary expr</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Unary expr</em>'.
   * @see org.xtext.go.Unary_expr#getUnary_expr()
   * @see #getUnary_expr()
   * @generated
   */
  EReference getUnary_expr_Unary_expr();

  /**
   * Returns the meta object for class '{@link org.xtext.go.Statement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Statement</em>'.
   * @see org.xtext.go.Statement
   * @generated
   */
  EClass getStatement();

  /**
   * Returns the meta object for class '{@link org.xtext.go.Simple_stmt <em>Simple stmt</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Simple stmt</em>'.
   * @see org.xtext.go.Simple_stmt
   * @generated
   */
  EClass getSimple_stmt();

  /**
   * Returns the meta object for class '{@link org.xtext.go.Labeled_stmt <em>Labeled stmt</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Labeled stmt</em>'.
   * @see org.xtext.go.Labeled_stmt
   * @generated
   */
  EClass getLabeled_stmt();

  /**
   * Returns the meta object for the attribute '{@link org.xtext.go.Labeled_stmt#getId <em>Id</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Id</em>'.
   * @see org.xtext.go.Labeled_stmt#getId()
   * @see #getLabeled_stmt()
   * @generated
   */
  EAttribute getLabeled_stmt_Id();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.go.Labeled_stmt#getStatement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Statement</em>'.
   * @see org.xtext.go.Labeled_stmt#getStatement()
   * @see #getLabeled_stmt()
   * @generated
   */
  EReference getLabeled_stmt_Statement();

  /**
   * Returns the meta object for class '{@link org.xtext.go.Expression_stmt <em>Expression stmt</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Expression stmt</em>'.
   * @see org.xtext.go.Expression_stmt
   * @generated
   */
  EClass getExpression_stmt();

  /**
   * Returns the meta object for class '{@link org.xtext.go.If_stmt <em>If stmt</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>If stmt</em>'.
   * @see org.xtext.go.If_stmt
   * @generated
   */
  EClass getIf_stmt();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.go.If_stmt#getExpression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Expression</em>'.
   * @see org.xtext.go.If_stmt#getExpression()
   * @see #getIf_stmt()
   * @generated
   */
  EReference getIf_stmt_Expression();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.go.If_stmt#getBlock <em>Block</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Block</em>'.
   * @see org.xtext.go.If_stmt#getBlock()
   * @see #getIf_stmt()
   * @generated
   */
  EReference getIf_stmt_Block();

  /**
   * Returns the meta object for the containment reference '{@link org.xtext.go.If_stmt#getIf_stmt <em>If stmt</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>If stmt</em>'.
   * @see org.xtext.go.If_stmt#getIf_stmt()
   * @see #getIf_stmt()
   * @generated
   */
  EReference getIf_stmt_If_stmt();

  /**
   * Returns the meta object for class '{@link org.xtext.go.Go_stmt <em>Go stmt</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Go stmt</em>'.
   * @see org.xtext.go.Go_stmt
   * @generated
   */
  EClass getGo_stmt();

  /**
   * Returns the meta object for class '{@link org.xtext.go.Return_stmt <em>Return stmt</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Return stmt</em>'.
   * @see org.xtext.go.Return_stmt
   * @generated
   */
  EClass getReturn_stmt();

  /**
   * Returns the meta object for class '{@link org.xtext.go.Defer_stmt <em>Defer stmt</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Defer stmt</em>'.
   * @see org.xtext.go.Defer_stmt
   * @generated
   */
  EClass getDefer_stmt();

  /**
   * Returns the factory that creates the instances of the model.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the factory that creates the instances of the model.
   * @generated
   */
  GoFactory getGoFactory();

  /**
   * <!-- begin-user-doc -->
   * Defines literals for the meta objects that represent
   * <ul>
   *   <li>each class,</li>
   *   <li>each feature of each class,</li>
   *   <li>each enum,</li>
   *   <li>and each data type</li>
   * </ul>
   * <!-- end-user-doc -->
   * @generated
   */
  interface Literals
  {
    /**
     * The meta object literal for the '{@link org.xtext.go.impl.ModelImpl <em>Model</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.go.impl.ModelImpl
     * @see org.xtext.go.impl.GoPackageImpl#getModel()
     * @generated
     */
    EClass MODEL = eINSTANCE.getModel();

    /**
     * The meta object literal for the '<em><b>Greetings</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference MODEL__GREETINGS = eINSTANCE.getModel_Greetings();

    /**
     * The meta object literal for the '{@link org.xtext.go.impl.programImpl <em>program</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.go.impl.programImpl
     * @see org.xtext.go.impl.GoPackageImpl#getprogram()
     * @generated
     */
    EClass PROGRAM = eINSTANCE.getprogram();

    /**
     * The meta object literal for the '{@link org.xtext.go.impl.BlockImpl <em>Block</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.go.impl.BlockImpl
     * @see org.xtext.go.impl.GoPackageImpl#getBlock()
     * @generated
     */
    EClass BLOCK = eINSTANCE.getBlock();

    /**
     * The meta object literal for the '{@link org.xtext.go.impl.Statement_listImpl <em>Statement list</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.go.impl.Statement_listImpl
     * @see org.xtext.go.impl.GoPackageImpl#getStatement_list()
     * @generated
     */
    EClass STATEMENT_LIST = eINSTANCE.getStatement_list();

    /**
     * The meta object literal for the '<em><b>Statement</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference STATEMENT_LIST__STATEMENT = eINSTANCE.getStatement_list_Statement();

    /**
     * The meta object literal for the '{@link org.xtext.go.impl.DeclarationImpl <em>Declaration</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.go.impl.DeclarationImpl
     * @see org.xtext.go.impl.GoPackageImpl#getDeclaration()
     * @generated
     */
    EClass DECLARATION = eINSTANCE.getDeclaration();

    /**
     * The meta object literal for the '{@link org.xtext.go.impl.Const_declImpl <em>Const decl</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.go.impl.Const_declImpl
     * @see org.xtext.go.impl.GoPackageImpl#getConst_decl()
     * @generated
     */
    EClass CONST_DECL = eINSTANCE.getConst_decl();

    /**
     * The meta object literal for the '<em><b>Const spec</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference CONST_DECL__CONST_SPEC = eINSTANCE.getConst_decl_Const_spec();

    /**
     * The meta object literal for the '{@link org.xtext.go.impl.Const_specImpl <em>Const spec</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.go.impl.Const_specImpl
     * @see org.xtext.go.impl.GoPackageImpl#getConst_spec()
     * @generated
     */
    EClass CONST_SPEC = eINSTANCE.getConst_spec();

    /**
     * The meta object literal for the '{@link org.xtext.go.impl.Expression_listImpl <em>Expression list</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.go.impl.Expression_listImpl
     * @see org.xtext.go.impl.GoPackageImpl#getExpression_list()
     * @generated
     */
    EClass EXPRESSION_LIST = eINSTANCE.getExpression_list();

    /**
     * The meta object literal for the '{@link org.xtext.go.impl.Var_declImpl <em>Var decl</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.go.impl.Var_declImpl
     * @see org.xtext.go.impl.GoPackageImpl#getVar_decl()
     * @generated
     */
    EClass VAR_DECL = eINSTANCE.getVar_decl();

    /**
     * The meta object literal for the '<em><b>Var spec</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference VAR_DECL__VAR_SPEC = eINSTANCE.getVar_decl_Var_spec();

    /**
     * The meta object literal for the '{@link org.xtext.go.impl.Var_specImpl <em>Var spec</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.go.impl.Var_specImpl
     * @see org.xtext.go.impl.GoPackageImpl#getVar_spec()
     * @generated
     */
    EClass VAR_SPEC = eINSTANCE.getVar_spec();

    /**
     * The meta object literal for the '{@link org.xtext.go.impl.Short_var_declImpl <em>Short var decl</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.go.impl.Short_var_declImpl
     * @see org.xtext.go.impl.GoPackageImpl#getShort_var_decl()
     * @generated
     */
    EClass SHORT_VAR_DECL = eINSTANCE.getShort_var_decl();

    /**
     * The meta object literal for the '{@link org.xtext.go.impl.Function_declImpl <em>Function decl</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.go.impl.Function_declImpl
     * @see org.xtext.go.impl.GoPackageImpl#getFunction_decl()
     * @generated
     */
    EClass FUNCTION_DECL = eINSTANCE.getFunction_decl();

    /**
     * The meta object literal for the '{@link org.xtext.go.impl.Function_bodyImpl <em>Function body</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.go.impl.Function_bodyImpl
     * @see org.xtext.go.impl.GoPackageImpl#getFunction_body()
     * @generated
     */
    EClass FUNCTION_BODY = eINSTANCE.getFunction_body();

    /**
     * The meta object literal for the '{@link org.xtext.go.impl.OperandImpl <em>Operand</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.go.impl.OperandImpl
     * @see org.xtext.go.impl.GoPackageImpl#getOperand()
     * @generated
     */
    EClass OPERAND = eINSTANCE.getOperand();

    /**
     * The meta object literal for the '{@link org.xtext.go.impl.Primary_exprImpl <em>Primary expr</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.go.impl.Primary_exprImpl
     * @see org.xtext.go.impl.GoPackageImpl#getPrimary_expr()
     * @generated
     */
    EClass PRIMARY_EXPR = eINSTANCE.getPrimary_expr();

    /**
     * The meta object literal for the '{@link org.xtext.go.impl.ExpressionImpl <em>Expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.go.impl.ExpressionImpl
     * @see org.xtext.go.impl.GoPackageImpl#getExpression()
     * @generated
     */
    EClass EXPRESSION = eINSTANCE.getExpression();

    /**
     * The meta object literal for the '<em><b>Unary expr</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference EXPRESSION__UNARY_EXPR = eINSTANCE.getExpression_Unary_expr();

    /**
     * The meta object literal for the '<em><b>Expression line</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference EXPRESSION__EXPRESSION_LINE = eINSTANCE.getExpression_Expression_line();

    /**
     * The meta object literal for the '{@link org.xtext.go.impl.Expression_lineImpl <em>Expression line</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.go.impl.Expression_lineImpl
     * @see org.xtext.go.impl.GoPackageImpl#getExpression_line()
     * @generated
     */
    EClass EXPRESSION_LINE = eINSTANCE.getExpression_line();

    /**
     * The meta object literal for the '<em><b>Binary op</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute EXPRESSION_LINE__BINARY_OP = eINSTANCE.getExpression_line_Binary_op();

    /**
     * The meta object literal for the '<em><b>Expression</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference EXPRESSION_LINE__EXPRESSION = eINSTANCE.getExpression_line_Expression();

    /**
     * The meta object literal for the '<em><b>Expression line</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference EXPRESSION_LINE__EXPRESSION_LINE = eINSTANCE.getExpression_line_Expression_line();

    /**
     * The meta object literal for the '{@link org.xtext.go.impl.Unary_exprImpl <em>Unary expr</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.go.impl.Unary_exprImpl
     * @see org.xtext.go.impl.GoPackageImpl#getUnary_expr()
     * @generated
     */
    EClass UNARY_EXPR = eINSTANCE.getUnary_expr();

    /**
     * The meta object literal for the '<em><b>Primary expr</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference UNARY_EXPR__PRIMARY_EXPR = eINSTANCE.getUnary_expr_Primary_expr();

    /**
     * The meta object literal for the '<em><b>Unary op</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute UNARY_EXPR__UNARY_OP = eINSTANCE.getUnary_expr_Unary_op();

    /**
     * The meta object literal for the '<em><b>Unary expr</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference UNARY_EXPR__UNARY_EXPR = eINSTANCE.getUnary_expr_Unary_expr();

    /**
     * The meta object literal for the '{@link org.xtext.go.impl.StatementImpl <em>Statement</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.go.impl.StatementImpl
     * @see org.xtext.go.impl.GoPackageImpl#getStatement()
     * @generated
     */
    EClass STATEMENT = eINSTANCE.getStatement();

    /**
     * The meta object literal for the '{@link org.xtext.go.impl.Simple_stmtImpl <em>Simple stmt</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.go.impl.Simple_stmtImpl
     * @see org.xtext.go.impl.GoPackageImpl#getSimple_stmt()
     * @generated
     */
    EClass SIMPLE_STMT = eINSTANCE.getSimple_stmt();

    /**
     * The meta object literal for the '{@link org.xtext.go.impl.Labeled_stmtImpl <em>Labeled stmt</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.go.impl.Labeled_stmtImpl
     * @see org.xtext.go.impl.GoPackageImpl#getLabeled_stmt()
     * @generated
     */
    EClass LABELED_STMT = eINSTANCE.getLabeled_stmt();

    /**
     * The meta object literal for the '<em><b>Id</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute LABELED_STMT__ID = eINSTANCE.getLabeled_stmt_Id();

    /**
     * The meta object literal for the '<em><b>Statement</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference LABELED_STMT__STATEMENT = eINSTANCE.getLabeled_stmt_Statement();

    /**
     * The meta object literal for the '{@link org.xtext.go.impl.Expression_stmtImpl <em>Expression stmt</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.go.impl.Expression_stmtImpl
     * @see org.xtext.go.impl.GoPackageImpl#getExpression_stmt()
     * @generated
     */
    EClass EXPRESSION_STMT = eINSTANCE.getExpression_stmt();

    /**
     * The meta object literal for the '{@link org.xtext.go.impl.If_stmtImpl <em>If stmt</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.go.impl.If_stmtImpl
     * @see org.xtext.go.impl.GoPackageImpl#getIf_stmt()
     * @generated
     */
    EClass IF_STMT = eINSTANCE.getIf_stmt();

    /**
     * The meta object literal for the '<em><b>Expression</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference IF_STMT__EXPRESSION = eINSTANCE.getIf_stmt_Expression();

    /**
     * The meta object literal for the '<em><b>Block</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference IF_STMT__BLOCK = eINSTANCE.getIf_stmt_Block();

    /**
     * The meta object literal for the '<em><b>If stmt</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference IF_STMT__IF_STMT = eINSTANCE.getIf_stmt_If_stmt();

    /**
     * The meta object literal for the '{@link org.xtext.go.impl.Go_stmtImpl <em>Go stmt</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.go.impl.Go_stmtImpl
     * @see org.xtext.go.impl.GoPackageImpl#getGo_stmt()
     * @generated
     */
    EClass GO_STMT = eINSTANCE.getGo_stmt();

    /**
     * The meta object literal for the '{@link org.xtext.go.impl.Return_stmtImpl <em>Return stmt</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.go.impl.Return_stmtImpl
     * @see org.xtext.go.impl.GoPackageImpl#getReturn_stmt()
     * @generated
     */
    EClass RETURN_STMT = eINSTANCE.getReturn_stmt();

    /**
     * The meta object literal for the '{@link org.xtext.go.impl.Defer_stmtImpl <em>Defer stmt</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see org.xtext.go.impl.Defer_stmtImpl
     * @see org.xtext.go.impl.GoPackageImpl#getDefer_stmt()
     * @generated
     */
    EClass DEFER_STMT = eINSTANCE.getDefer_stmt();

  }

} //GoPackage
