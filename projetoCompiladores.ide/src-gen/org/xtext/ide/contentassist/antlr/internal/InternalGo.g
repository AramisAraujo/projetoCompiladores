/*
 * generated by Xtext 2.14.0
 */
grammar InternalGo;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package org.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.services.GoGrammarAccess;

}
@parser::members {
	private GoGrammarAccess grammarAccess;

	public void setGrammarAccess(GoGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGreetingsAssignment()); }
		(rule__Model__GreetingsAssignment)
		{ after(grammarAccess.getModelAccess().getGreetingsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulesourceFile
entryRulesourceFile
:
{ before(grammarAccess.getSourceFileRule()); }
	 rulesourceFile
{ after(grammarAccess.getSourceFileRule()); } 
	 EOF 
;

// Rule sourceFile
rulesourceFile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSourceFileAccess().getGroup()); }
		(rule__SourceFile__Group__0)
		{ after(grammarAccess.getSourceFileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulepackageClause
entryRulepackageClause
:
{ before(grammarAccess.getPackageClauseRule()); }
	 rulepackageClause
{ after(grammarAccess.getPackageClauseRule()); } 
	 EOF 
;

// Rule packageClause
rulepackageClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPackageClauseAccess().getGroup()); }
		(rule__PackageClause__Group__0)
		{ after(grammarAccess.getPackageClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleimportDecl
entryRuleimportDecl
:
{ before(grammarAccess.getImportDeclRule()); }
	 ruleimportDecl
{ after(grammarAccess.getImportDeclRule()); } 
	 EOF 
;

// Rule importDecl
ruleimportDecl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImportDeclAccess().getGroup()); }
		(rule__ImportDecl__Group__0)
		{ after(grammarAccess.getImportDeclAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleimportSpec
entryRuleimportSpec
:
{ before(grammarAccess.getImportSpecRule()); }
	 ruleimportSpec
{ after(grammarAccess.getImportSpecRule()); } 
	 EOF 
;

// Rule importSpec
ruleimportSpec 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImportSpecAccess().getGroup()); }
		(rule__ImportSpec__Group__0)
		{ after(grammarAccess.getImportSpecAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleimportPath
entryRuleimportPath
:
{ before(grammarAccess.getImportPathRule()); }
	 ruleimportPath
{ after(grammarAccess.getImportPathRule()); } 
	 EOF 
;

// Rule importPath
ruleimportPath 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImportPathAccess().getSTRING_LITTerminalRuleCall()); }
		RULE_STRING_LIT
		{ after(grammarAccess.getImportPathAccess().getSTRING_LITTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuletopLevelDecl
entryRuletopLevelDecl
:
{ before(grammarAccess.getTopLevelDeclRule()); }
	 ruletopLevelDecl
{ after(grammarAccess.getTopLevelDeclRule()); } 
	 EOF 
;

// Rule topLevelDecl
ruletopLevelDecl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTopLevelDeclAccess().getAlternatives()); }
		(rule__TopLevelDecl__Alternatives)
		{ after(grammarAccess.getTopLevelDeclAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuledeclaration
entryRuledeclaration
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruledeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule declaration
ruledeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeclarationAccess().getAlternatives()); }
		(rule__Declaration__Alternatives)
		{ after(grammarAccess.getDeclarationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleconstDecl
entryRuleconstDecl
:
{ before(grammarAccess.getConstDeclRule()); }
	 ruleconstDecl
{ after(grammarAccess.getConstDeclRule()); } 
	 EOF 
;

// Rule constDecl
ruleconstDecl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstDeclAccess().getGroup()); }
		(rule__ConstDecl__Group__0)
		{ after(grammarAccess.getConstDeclAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleconstSpec
entryRuleconstSpec
:
{ before(grammarAccess.getConstSpecRule()); }
	 ruleconstSpec
{ after(grammarAccess.getConstSpecRule()); } 
	 EOF 
;

// Rule constSpec
ruleconstSpec 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstSpecAccess().getGroup()); }
		(rule__ConstSpec__Group__0)
		{ after(grammarAccess.getConstSpecAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleidentifierList
entryRuleidentifierList
:
{ before(grammarAccess.getIdentifierListRule()); }
	 ruleidentifierList
{ after(grammarAccess.getIdentifierListRule()); } 
	 EOF 
;

// Rule identifierList
ruleidentifierList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIdentifierListAccess().getGroup()); }
		(rule__IdentifierList__Group__0)
		{ after(grammarAccess.getIdentifierListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleexpressionList
entryRuleexpressionList
:
{ before(grammarAccess.getExpressionListRule()); }
	 ruleexpressionList
{ after(grammarAccess.getExpressionListRule()); } 
	 EOF 
;

// Rule expressionList
ruleexpressionList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionListAccess().getGroup()); }
		(rule__ExpressionList__Group__0)
		{ after(grammarAccess.getExpressionListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuletypeDecl
entryRuletypeDecl
:
{ before(grammarAccess.getTypeDeclRule()); }
	 ruletypeDecl
{ after(grammarAccess.getTypeDeclRule()); } 
	 EOF 
;

// Rule typeDecl
ruletypeDecl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeDeclAccess().getGroup()); }
		(rule__TypeDecl__Group__0)
		{ after(grammarAccess.getTypeDeclAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuletypeSpec
entryRuletypeSpec
:
{ before(grammarAccess.getTypeSpecRule()); }
	 ruletypeSpec
{ after(grammarAccess.getTypeSpecRule()); } 
	 EOF 
;

// Rule typeSpec
ruletypeSpec 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeSpecAccess().getGroup()); }
		(rule__TypeSpec__Group__0)
		{ after(grammarAccess.getTypeSpecAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulefunctionDecl
entryRulefunctionDecl
:
{ before(grammarAccess.getFunctionDeclRule()); }
	 rulefunctionDecl
{ after(grammarAccess.getFunctionDeclRule()); } 
	 EOF 
;

// Rule functionDecl
rulefunctionDecl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionDeclAccess().getGroup()); }
		(rule__FunctionDecl__Group__0)
		{ after(grammarAccess.getFunctionDeclAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulefunction
entryRulefunction
:
{ before(grammarAccess.getFunctionRule()); }
	 rulefunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule function
rulefunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionAccess().getGroup()); }
		(rule__Function__Group__0)
		{ after(grammarAccess.getFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulemethodDecl
entryRulemethodDecl
:
{ before(grammarAccess.getMethodDeclRule()); }
	 rulemethodDecl
{ after(grammarAccess.getMethodDeclRule()); } 
	 EOF 
;

// Rule methodDecl
rulemethodDecl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMethodDeclAccess().getGroup()); }
		(rule__MethodDecl__Group__0)
		{ after(grammarAccess.getMethodDeclAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulereceiver
entryRulereceiver
:
{ before(grammarAccess.getReceiverRule()); }
	 rulereceiver
{ after(grammarAccess.getReceiverRule()); } 
	 EOF 
;

// Rule receiver
rulereceiver 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReceiverAccess().getParametersParserRuleCall()); }
		ruleparameters
		{ after(grammarAccess.getReceiverAccess().getParametersParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulevarDecl
entryRulevarDecl
:
{ before(grammarAccess.getVarDeclRule()); }
	 rulevarDecl
{ after(grammarAccess.getVarDeclRule()); } 
	 EOF 
;

// Rule varDecl
rulevarDecl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarDeclAccess().getGroup()); }
		(rule__VarDecl__Group__0)
		{ after(grammarAccess.getVarDeclAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulevarSpec
entryRulevarSpec
:
{ before(grammarAccess.getVarSpecRule()); }
	 rulevarSpec
{ after(grammarAccess.getVarSpecRule()); } 
	 EOF 
;

// Rule varSpec
rulevarSpec 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarSpecAccess().getGroup()); }
		(rule__VarSpec__Group__0)
		{ after(grammarAccess.getVarSpecAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleblock
entryRuleblock
:
{ before(grammarAccess.getBlockRule()); }
	 ruleblock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule block
ruleblock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockAccess().getGroup()); }
		(rule__Block__Group__0)
		{ after(grammarAccess.getBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulestatementList
entryRulestatementList
:
{ before(grammarAccess.getStatementListRule()); }
	 rulestatementList
{ after(grammarAccess.getStatementListRule()); } 
	 EOF 
;

// Rule statementList
rulestatementList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementListAccess().getGroup()); }
		(rule__StatementList__Group__0)*
		{ after(grammarAccess.getStatementListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulestatement
entryRulestatement
:
{ before(grammarAccess.getStatementRule()); }
	 rulestatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule statement
rulestatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulesimpleStmt
entryRulesimpleStmt
:
{ before(grammarAccess.getSimpleStmtRule()); }
	 rulesimpleStmt
{ after(grammarAccess.getSimpleStmtRule()); } 
	 EOF 
;

// Rule simpleStmt
rulesimpleStmt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleStmtAccess().getAlternatives()); }
		(rule__SimpleStmt__Alternatives)
		{ after(grammarAccess.getSimpleStmtAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleexpressionStmt
entryRuleexpressionStmt
:
{ before(grammarAccess.getExpressionStmtRule()); }
	 ruleexpressionStmt
{ after(grammarAccess.getExpressionStmtRule()); } 
	 EOF 
;

// Rule expressionStmt
ruleexpressionStmt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionStmtAccess().getExpressionParserRuleCall()); }
		ruleexpression
		{ after(grammarAccess.getExpressionStmtAccess().getExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulesendStmt
entryRulesendStmt
:
{ before(grammarAccess.getSendStmtRule()); }
	 rulesendStmt
{ after(grammarAccess.getSendStmtRule()); } 
	 EOF 
;

// Rule sendStmt
rulesendStmt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSendStmtAccess().getGroup()); }
		(rule__SendStmt__Group__0)
		{ after(grammarAccess.getSendStmtAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleincDecStmt
entryRuleincDecStmt
:
{ before(grammarAccess.getIncDecStmtRule()); }
	 ruleincDecStmt
{ after(grammarAccess.getIncDecStmtRule()); } 
	 EOF 
;

// Rule incDecStmt
ruleincDecStmt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIncDecStmtAccess().getGroup()); }
		(rule__IncDecStmt__Group__0)
		{ after(grammarAccess.getIncDecStmtAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleassignment
entryRuleassignment
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleassignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule assignment
ruleassignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignmentAccess().getGroup()); }
		(rule__Assignment__Group__0)
		{ after(grammarAccess.getAssignmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleassign_op
entryRuleassign_op
:
{ before(grammarAccess.getAssign_opRule()); }
	 ruleassign_op
{ after(grammarAccess.getAssign_opRule()); } 
	 EOF 
;

// Rule assign_op
ruleassign_op 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssign_opAccess().getGroup()); }
		(rule__Assign_op__Group__0)
		{ after(grammarAccess.getAssign_opAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleshortVarDecl
entryRuleshortVarDecl
:
{ before(grammarAccess.getShortVarDeclRule()); }
	 ruleshortVarDecl
{ after(grammarAccess.getShortVarDeclRule()); } 
	 EOF 
;

// Rule shortVarDecl
ruleshortVarDecl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShortVarDeclAccess().getGroup()); }
		(rule__ShortVarDecl__Group__0)
		{ after(grammarAccess.getShortVarDeclAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleemptyStmt
entryRuleemptyStmt
:
{ before(grammarAccess.getEmptyStmtRule()); }
	 ruleemptyStmt
{ after(grammarAccess.getEmptyStmtRule()); } 
	 EOF 
;

// Rule emptyStmt
ruleemptyStmt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEmptyStmtAccess().getSemicolonKeyword()); }
		';'
		{ after(grammarAccess.getEmptyStmtAccess().getSemicolonKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulelabeledStmt
entryRulelabeledStmt
:
{ before(grammarAccess.getLabeledStmtRule()); }
	 rulelabeledStmt
{ after(grammarAccess.getLabeledStmtRule()); } 
	 EOF 
;

// Rule labeledStmt
rulelabeledStmt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLabeledStmtAccess().getGroup()); }
		(rule__LabeledStmt__Group__0)
		{ after(grammarAccess.getLabeledStmtAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulereturnStmt
entryRulereturnStmt
:
{ before(grammarAccess.getReturnStmtRule()); }
	 rulereturnStmt
{ after(grammarAccess.getReturnStmtRule()); } 
	 EOF 
;

// Rule returnStmt
rulereturnStmt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReturnStmtAccess().getGroup()); }
		(rule__ReturnStmt__Group__0)
		{ after(grammarAccess.getReturnStmtAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulebreakStmt
entryRulebreakStmt
:
{ before(grammarAccess.getBreakStmtRule()); }
	 rulebreakStmt
{ after(grammarAccess.getBreakStmtRule()); } 
	 EOF 
;

// Rule breakStmt
rulebreakStmt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBreakStmtAccess().getGroup()); }
		(rule__BreakStmt__Group__0)
		{ after(grammarAccess.getBreakStmtAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulecontinueStmt
entryRulecontinueStmt
:
{ before(grammarAccess.getContinueStmtRule()); }
	 rulecontinueStmt
{ after(grammarAccess.getContinueStmtRule()); } 
	 EOF 
;

// Rule continueStmt
rulecontinueStmt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getContinueStmtAccess().getGroup()); }
		(rule__ContinueStmt__Group__0)
		{ after(grammarAccess.getContinueStmtAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulegotoStmt
entryRulegotoStmt
:
{ before(grammarAccess.getGotoStmtRule()); }
	 rulegotoStmt
{ after(grammarAccess.getGotoStmtRule()); } 
	 EOF 
;

// Rule gotoStmt
rulegotoStmt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGotoStmtAccess().getGroup()); }
		(rule__GotoStmt__Group__0)
		{ after(grammarAccess.getGotoStmtAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulefallthroughStmt
entryRulefallthroughStmt
:
{ before(grammarAccess.getFallthroughStmtRule()); }
	 rulefallthroughStmt
{ after(grammarAccess.getFallthroughStmtRule()); } 
	 EOF 
;

// Rule fallthroughStmt
rulefallthroughStmt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFallthroughStmtAccess().getFallthroughKeyword()); }
		'fallthrough'
		{ after(grammarAccess.getFallthroughStmtAccess().getFallthroughKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuledeferStmt
entryRuledeferStmt
:
{ before(grammarAccess.getDeferStmtRule()); }
	 ruledeferStmt
{ after(grammarAccess.getDeferStmtRule()); } 
	 EOF 
;

// Rule deferStmt
ruledeferStmt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeferStmtAccess().getGroup()); }
		(rule__DeferStmt__Group__0)
		{ after(grammarAccess.getDeferStmtAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleifStmt
entryRuleifStmt
:
{ before(grammarAccess.getIfStmtRule()); }
	 ruleifStmt
{ after(grammarAccess.getIfStmtRule()); } 
	 EOF 
;

// Rule ifStmt
ruleifStmt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfStmtAccess().getGroup()); }
		(rule__IfStmt__Group__0)
		{ after(grammarAccess.getIfStmtAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleswitchStmt
entryRuleswitchStmt
:
{ before(grammarAccess.getSwitchStmtRule()); }
	 ruleswitchStmt
{ after(grammarAccess.getSwitchStmtRule()); } 
	 EOF 
;

// Rule switchStmt
ruleswitchStmt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSwitchStmtAccess().getAlternatives()); }
		(rule__SwitchStmt__Alternatives)
		{ after(grammarAccess.getSwitchStmtAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleexprSwitchStmt
entryRuleexprSwitchStmt
:
{ before(grammarAccess.getExprSwitchStmtRule()); }
	 ruleexprSwitchStmt
{ after(grammarAccess.getExprSwitchStmtRule()); } 
	 EOF 
;

// Rule exprSwitchStmt
ruleexprSwitchStmt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExprSwitchStmtAccess().getGroup()); }
		(rule__ExprSwitchStmt__Group__0)
		{ after(grammarAccess.getExprSwitchStmtAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleexprCaseClause
entryRuleexprCaseClause
:
{ before(grammarAccess.getExprCaseClauseRule()); }
	 ruleexprCaseClause
{ after(grammarAccess.getExprCaseClauseRule()); } 
	 EOF 
;

// Rule exprCaseClause
ruleexprCaseClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExprCaseClauseAccess().getGroup()); }
		(rule__ExprCaseClause__Group__0)
		{ after(grammarAccess.getExprCaseClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleexprSwitchCase
entryRuleexprSwitchCase
:
{ before(grammarAccess.getExprSwitchCaseRule()); }
	 ruleexprSwitchCase
{ after(grammarAccess.getExprSwitchCaseRule()); } 
	 EOF 
;

// Rule exprSwitchCase
ruleexprSwitchCase 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExprSwitchCaseAccess().getAlternatives()); }
		(rule__ExprSwitchCase__Alternatives)
		{ after(grammarAccess.getExprSwitchCaseAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuletypeSwitchStmt
entryRuletypeSwitchStmt
:
{ before(grammarAccess.getTypeSwitchStmtRule()); }
	 ruletypeSwitchStmt
{ after(grammarAccess.getTypeSwitchStmtRule()); } 
	 EOF 
;

// Rule typeSwitchStmt
ruletypeSwitchStmt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeSwitchStmtAccess().getGroup()); }
		(rule__TypeSwitchStmt__Group__0)
		{ after(grammarAccess.getTypeSwitchStmtAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuletypeSwitchGuard
entryRuletypeSwitchGuard
:
{ before(grammarAccess.getTypeSwitchGuardRule()); }
	 ruletypeSwitchGuard
{ after(grammarAccess.getTypeSwitchGuardRule()); } 
	 EOF 
;

// Rule typeSwitchGuard
ruletypeSwitchGuard 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeSwitchGuardAccess().getGroup()); }
		(rule__TypeSwitchGuard__Group__0)
		{ after(grammarAccess.getTypeSwitchGuardAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuletypeCaseClause
entryRuletypeCaseClause
:
{ before(grammarAccess.getTypeCaseClauseRule()); }
	 ruletypeCaseClause
{ after(grammarAccess.getTypeCaseClauseRule()); } 
	 EOF 
;

// Rule typeCaseClause
ruletypeCaseClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeCaseClauseAccess().getGroup()); }
		(rule__TypeCaseClause__Group__0)
		{ after(grammarAccess.getTypeCaseClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuletypeSwitchCase
entryRuletypeSwitchCase
:
{ before(grammarAccess.getTypeSwitchCaseRule()); }
	 ruletypeSwitchCase
{ after(grammarAccess.getTypeSwitchCaseRule()); } 
	 EOF 
;

// Rule typeSwitchCase
ruletypeSwitchCase 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeSwitchCaseAccess().getAlternatives()); }
		(rule__TypeSwitchCase__Alternatives)
		{ after(grammarAccess.getTypeSwitchCaseAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuletypeList
entryRuletypeList
:
{ before(grammarAccess.getTypeListRule()); }
	 ruletypeList
{ after(grammarAccess.getTypeListRule()); } 
	 EOF 
;

// Rule typeList
ruletypeList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeListAccess().getGroup()); }
		(rule__TypeList__Group__0)
		{ after(grammarAccess.getTypeListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleselectStmt
entryRuleselectStmt
:
{ before(grammarAccess.getSelectStmtRule()); }
	 ruleselectStmt
{ after(grammarAccess.getSelectStmtRule()); } 
	 EOF 
;

// Rule selectStmt
ruleselectStmt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectStmtAccess().getGroup()); }
		(rule__SelectStmt__Group__0)
		{ after(grammarAccess.getSelectStmtAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulecommClause
entryRulecommClause
:
{ before(grammarAccess.getCommClauseRule()); }
	 rulecommClause
{ after(grammarAccess.getCommClauseRule()); } 
	 EOF 
;

// Rule commClause
rulecommClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommClauseAccess().getGroup()); }
		(rule__CommClause__Group__0)
		{ after(grammarAccess.getCommClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulecommCase
entryRulecommCase
:
{ before(grammarAccess.getCommCaseRule()); }
	 rulecommCase
{ after(grammarAccess.getCommCaseRule()); } 
	 EOF 
;

// Rule commCase
rulecommCase 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommCaseAccess().getAlternatives()); }
		(rule__CommCase__Alternatives)
		{ after(grammarAccess.getCommCaseAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulerecvStmt
entryRulerecvStmt
:
{ before(grammarAccess.getRecvStmtRule()); }
	 rulerecvStmt
{ after(grammarAccess.getRecvStmtRule()); } 
	 EOF 
;

// Rule recvStmt
rulerecvStmt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRecvStmtAccess().getGroup()); }
		(rule__RecvStmt__Group__0)
		{ after(grammarAccess.getRecvStmtAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleforStmt
entryRuleforStmt
:
{ before(grammarAccess.getForStmtRule()); }
	 ruleforStmt
{ after(grammarAccess.getForStmtRule()); } 
	 EOF 
;

// Rule forStmt
ruleforStmt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForStmtAccess().getGroup()); }
		(rule__ForStmt__Group__0)
		{ after(grammarAccess.getForStmtAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleforClause
entryRuleforClause
:
{ before(grammarAccess.getForClauseRule()); }
	 ruleforClause
{ after(grammarAccess.getForClauseRule()); } 
	 EOF 
;

// Rule forClause
ruleforClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForClauseAccess().getGroup()); }
		(rule__ForClause__Group__0)
		{ after(grammarAccess.getForClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulerangeClause
entryRulerangeClause
:
{ before(grammarAccess.getRangeClauseRule()); }
	 rulerangeClause
{ after(grammarAccess.getRangeClauseRule()); } 
	 EOF 
;

// Rule rangeClause
rulerangeClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRangeClauseAccess().getGroup()); }
		(rule__RangeClause__Group__0)
		{ after(grammarAccess.getRangeClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulegoStmt
entryRulegoStmt
:
{ before(grammarAccess.getGoStmtRule()); }
	 rulegoStmt
{ after(grammarAccess.getGoStmtRule()); } 
	 EOF 
;

// Rule goStmt
rulegoStmt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGoStmtAccess().getGroup()); }
		(rule__GoStmt__Group__0)
		{ after(grammarAccess.getGoStmtAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuletype
entryRuletype
:
{ before(grammarAccess.getTypeRule()); }
	 ruletype
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule type
ruletype 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAccess().getAlternatives()); }
		(rule__Type__Alternatives)
		{ after(grammarAccess.getTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuletypeName
entryRuletypeName
:
{ before(grammarAccess.getTypeNameRule()); }
	 ruletypeName
{ after(grammarAccess.getTypeNameRule()); } 
	 EOF 
;

// Rule typeName
ruletypeName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeNameAccess().getAlternatives()); }
		(rule__TypeName__Alternatives)
		{ after(grammarAccess.getTypeNameAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuletypeLit
entryRuletypeLit
:
{ before(grammarAccess.getTypeLitRule()); }
	 ruletypeLit
{ after(grammarAccess.getTypeLitRule()); } 
	 EOF 
;

// Rule typeLit
ruletypeLit 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeLitAccess().getAlternatives()); }
		(rule__TypeLit__Alternatives)
		{ after(grammarAccess.getTypeLitAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulearrayType
entryRulearrayType
:
{ before(grammarAccess.getArrayTypeRule()); }
	 rulearrayType
{ after(grammarAccess.getArrayTypeRule()); } 
	 EOF 
;

// Rule arrayType
rulearrayType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArrayTypeAccess().getGroup()); }
		(rule__ArrayType__Group__0)
		{ after(grammarAccess.getArrayTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulearrayLength
entryRulearrayLength
:
{ before(grammarAccess.getArrayLengthRule()); }
	 rulearrayLength
{ after(grammarAccess.getArrayLengthRule()); } 
	 EOF 
;

// Rule arrayLength
rulearrayLength 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArrayLengthAccess().getExpressionParserRuleCall()); }
		ruleexpression
		{ after(grammarAccess.getArrayLengthAccess().getExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleelementType
entryRuleelementType
:
{ before(grammarAccess.getElementTypeRule()); }
	 ruleelementType
{ after(grammarAccess.getElementTypeRule()); } 
	 EOF 
;

// Rule elementType
ruleelementType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElementTypeAccess().getTypeParserRuleCall()); }
		ruletype
		{ after(grammarAccess.getElementTypeAccess().getTypeParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulepointerType
entryRulepointerType
:
{ before(grammarAccess.getPointerTypeRule()); }
	 rulepointerType
{ after(grammarAccess.getPointerTypeRule()); } 
	 EOF 
;

// Rule pointerType
rulepointerType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPointerTypeAccess().getGroup()); }
		(rule__PointerType__Group__0)
		{ after(grammarAccess.getPointerTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleinterfaceType
entryRuleinterfaceType
:
{ before(grammarAccess.getInterfaceTypeRule()); }
	 ruleinterfaceType
{ after(grammarAccess.getInterfaceTypeRule()); } 
	 EOF 
;

// Rule interfaceType
ruleinterfaceType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInterfaceTypeAccess().getGroup()); }
		(rule__InterfaceType__Group__0)
		{ after(grammarAccess.getInterfaceTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulesliceType
entryRulesliceType
:
{ before(grammarAccess.getSliceTypeRule()); }
	 rulesliceType
{ after(grammarAccess.getSliceTypeRule()); } 
	 EOF 
;

// Rule sliceType
rulesliceType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSliceTypeAccess().getGroup()); }
		(rule__SliceType__Group__0)
		{ after(grammarAccess.getSliceTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulemapType
entryRulemapType
:
{ before(grammarAccess.getMapTypeRule()); }
	 rulemapType
{ after(grammarAccess.getMapTypeRule()); } 
	 EOF 
;

// Rule mapType
rulemapType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMapTypeAccess().getGroup()); }
		(rule__MapType__Group__0)
		{ after(grammarAccess.getMapTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulechannelType
entryRulechannelType
:
{ before(grammarAccess.getChannelTypeRule()); }
	 rulechannelType
{ after(grammarAccess.getChannelTypeRule()); } 
	 EOF 
;

// Rule channelType
rulechannelType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getChannelTypeAccess().getGroup()); }
		(rule__ChannelType__Group__0)
		{ after(grammarAccess.getChannelTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulemethodSpec
entryRulemethodSpec
:
{ before(grammarAccess.getMethodSpecRule()); }
	 rulemethodSpec
{ after(grammarAccess.getMethodSpecRule()); } 
	 EOF 
;

// Rule methodSpec
rulemethodSpec 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMethodSpecAccess().getAlternatives()); }
		(rule__MethodSpec__Alternatives)
		{ after(grammarAccess.getMethodSpecAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulefunctionType
entryRulefunctionType
:
{ before(grammarAccess.getFunctionTypeRule()); }
	 rulefunctionType
{ after(grammarAccess.getFunctionTypeRule()); } 
	 EOF 
;

// Rule functionType
rulefunctionType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionTypeAccess().getGroup()); }
		(rule__FunctionType__Group__0)
		{ after(grammarAccess.getFunctionTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulesignature
entryRulesignature
:
{ before(grammarAccess.getSignatureRule()); }
	 rulesignature
{ after(grammarAccess.getSignatureRule()); } 
	 EOF 
;

// Rule signature
rulesignature 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSignatureAccess().getGroup()); }
		(rule__Signature__Group__0)
		{ after(grammarAccess.getSignatureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleresult
entryRuleresult
:
{ before(grammarAccess.getResultRule()); }
	 ruleresult
{ after(grammarAccess.getResultRule()); } 
	 EOF 
;

// Rule result
ruleresult 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getResultAccess().getAlternatives()); }
		(rule__Result__Alternatives)
		{ after(grammarAccess.getResultAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleparameters
entryRuleparameters
:
{ before(grammarAccess.getParametersRule()); }
	 ruleparameters
{ after(grammarAccess.getParametersRule()); } 
	 EOF 
;

// Rule parameters
ruleparameters 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParametersAccess().getGroup()); }
		(rule__Parameters__Group__0)
		{ after(grammarAccess.getParametersAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleparameterList
entryRuleparameterList
:
{ before(grammarAccess.getParameterListRule()); }
	 ruleparameterList
{ after(grammarAccess.getParameterListRule()); } 
	 EOF 
;

// Rule parameterList
ruleparameterList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterListAccess().getGroup()); }
		(rule__ParameterList__Group__0)
		{ after(grammarAccess.getParameterListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleparameterDecl
entryRuleparameterDecl
:
{ before(grammarAccess.getParameterDeclRule()); }
	 ruleparameterDecl
{ after(grammarAccess.getParameterDeclRule()); } 
	 EOF 
;

// Rule parameterDecl
ruleparameterDecl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterDeclAccess().getGroup()); }
		(rule__ParameterDecl__Group__0)
		{ after(grammarAccess.getParameterDeclAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleoperand
entryRuleoperand
:
{ before(grammarAccess.getOperandRule()); }
	 ruleoperand
{ after(grammarAccess.getOperandRule()); } 
	 EOF 
;

// Rule operand
ruleoperand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperandAccess().getAlternatives()); }
		(rule__Operand__Alternatives)
		{ after(grammarAccess.getOperandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleliteral
entryRuleliteral
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleliteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule literal
ruleliteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
		(rule__Literal__Alternatives)
		{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulebasicLit
entryRulebasicLit
:
{ before(grammarAccess.getBasicLitRule()); }
	 rulebasicLit
{ after(grammarAccess.getBasicLitRule()); } 
	 EOF 
;

// Rule basicLit
rulebasicLit 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBasicLitAccess().getAlternatives()); }
		(rule__BasicLit__Alternatives)
		{ after(grammarAccess.getBasicLitAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleoperandName
entryRuleoperandName
:
{ before(grammarAccess.getOperandNameRule()); }
	 ruleoperandName
{ after(grammarAccess.getOperandNameRule()); } 
	 EOF 
;

// Rule operandName
ruleoperandName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperandNameAccess().getAlternatives()); }
		(rule__OperandName__Alternatives)
		{ after(grammarAccess.getOperandNameAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulequalifiedIdent
entryRulequalifiedIdent
:
{ before(grammarAccess.getQualifiedIdentRule()); }
	 rulequalifiedIdent
{ after(grammarAccess.getQualifiedIdentRule()); } 
	 EOF 
;

// Rule qualifiedIdent
rulequalifiedIdent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedIdentAccess().getGroup()); }
		(rule__QualifiedIdent__Group__0)
		{ after(grammarAccess.getQualifiedIdentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulecompositeLit
entryRulecompositeLit
:
{ before(grammarAccess.getCompositeLitRule()); }
	 rulecompositeLit
{ after(grammarAccess.getCompositeLitRule()); } 
	 EOF 
;

// Rule compositeLit
rulecompositeLit 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompositeLitAccess().getGroup()); }
		(rule__CompositeLit__Group__0)
		{ after(grammarAccess.getCompositeLitAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleliteralType
entryRuleliteralType
:
{ before(grammarAccess.getLiteralTypeRule()); }
	 ruleliteralType
{ after(grammarAccess.getLiteralTypeRule()); } 
	 EOF 
;

// Rule literalType
ruleliteralType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralTypeAccess().getAlternatives()); }
		(rule__LiteralType__Alternatives)
		{ after(grammarAccess.getLiteralTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleliteralValue
entryRuleliteralValue
:
{ before(grammarAccess.getLiteralValueRule()); }
	 ruleliteralValue
{ after(grammarAccess.getLiteralValueRule()); } 
	 EOF 
;

// Rule literalValue
ruleliteralValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralValueAccess().getGroup()); }
		(rule__LiteralValue__Group__0)
		{ after(grammarAccess.getLiteralValueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleelementList
entryRuleelementList
:
{ before(grammarAccess.getElementListRule()); }
	 ruleelementList
{ after(grammarAccess.getElementListRule()); } 
	 EOF 
;

// Rule elementList
ruleelementList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElementListAccess().getGroup()); }
		(rule__ElementList__Group__0)
		{ after(grammarAccess.getElementListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulekeyedElement
entryRulekeyedElement
:
{ before(grammarAccess.getKeyedElementRule()); }
	 rulekeyedElement
{ after(grammarAccess.getKeyedElementRule()); } 
	 EOF 
;

// Rule keyedElement
rulekeyedElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getKeyedElementAccess().getGroup()); }
		(rule__KeyedElement__Group__0)
		{ after(grammarAccess.getKeyedElementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulekey
entryRulekey
:
{ before(grammarAccess.getKeyRule()); }
	 rulekey
{ after(grammarAccess.getKeyRule()); } 
	 EOF 
;

// Rule key
rulekey 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getKeyAccess().getAlternatives()); }
		(rule__Key__Alternatives)
		{ after(grammarAccess.getKeyAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleelement
entryRuleelement
:
{ before(grammarAccess.getElementRule()); }
	 ruleelement
{ after(grammarAccess.getElementRule()); } 
	 EOF 
;

// Rule element
ruleelement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElementAccess().getAlternatives()); }
		(rule__Element__Alternatives)
		{ after(grammarAccess.getElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulestructType
entryRulestructType
:
{ before(grammarAccess.getStructTypeRule()); }
	 rulestructType
{ after(grammarAccess.getStructTypeRule()); } 
	 EOF 
;

// Rule structType
rulestructType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStructTypeAccess().getGroup()); }
		(rule__StructType__Group__0)
		{ after(grammarAccess.getStructTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulefieldDecl
entryRulefieldDecl
:
{ before(grammarAccess.getFieldDeclRule()); }
	 rulefieldDecl
{ after(grammarAccess.getFieldDeclRule()); } 
	 EOF 
;

// Rule fieldDecl
rulefieldDecl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFieldDeclAccess().getGroup()); }
		(rule__FieldDecl__Group__0)
		{ after(grammarAccess.getFieldDeclAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleanonymousField
entryRuleanonymousField
:
{ before(grammarAccess.getAnonymousFieldRule()); }
	 ruleanonymousField
{ after(grammarAccess.getAnonymousFieldRule()); } 
	 EOF 
;

// Rule anonymousField
ruleanonymousField 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAnonymousFieldAccess().getGroup()); }
		(rule__AnonymousField__Group__0)
		{ after(grammarAccess.getAnonymousFieldAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulefunctionLit
entryRulefunctionLit
:
{ before(grammarAccess.getFunctionLitRule()); }
	 rulefunctionLit
{ after(grammarAccess.getFunctionLitRule()); } 
	 EOF 
;

// Rule functionLit
rulefunctionLit 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionLitAccess().getGroup()); }
		(rule__FunctionLit__Group__0)
		{ after(grammarAccess.getFunctionLitAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleprimaryExpr
entryRuleprimaryExpr
:
{ before(grammarAccess.getPrimaryExprRule()); }
	 ruleprimaryExpr
{ after(grammarAccess.getPrimaryExprRule()); } 
	 EOF 
;

// Rule primaryExpr
ruleprimaryExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExprAccess().getAlternatives()); }
		(rule__PrimaryExpr__Alternatives)
		{ after(grammarAccess.getPrimaryExprAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleprimaryExprStuff
entryRuleprimaryExprStuff
:
{ before(grammarAccess.getPrimaryExprStuffRule()); }
	 ruleprimaryExprStuff
{ after(grammarAccess.getPrimaryExprStuffRule()); } 
	 EOF 
;

// Rule primaryExprStuff
ruleprimaryExprStuff 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExprStuffAccess().getAlternatives()); }
		(rule__PrimaryExprStuff__Alternatives)
		{ after(grammarAccess.getPrimaryExprStuffAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleprimaryExprSelector
entryRuleprimaryExprSelector
:
{ before(grammarAccess.getPrimaryExprSelectorRule()); }
	 ruleprimaryExprSelector
{ after(grammarAccess.getPrimaryExprSelectorRule()); } 
	 EOF 
;

// Rule primaryExprSelector
ruleprimaryExprSelector 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExprSelectorAccess().getGroup()); }
		(rule__PrimaryExprSelector__Group__0)?
		{ after(grammarAccess.getPrimaryExprSelectorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleprimaryExprIndex
entryRuleprimaryExprIndex
:
{ before(grammarAccess.getPrimaryExprIndexRule()); }
	 ruleprimaryExprIndex
{ after(grammarAccess.getPrimaryExprIndexRule()); } 
	 EOF 
;

// Rule primaryExprIndex
ruleprimaryExprIndex 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExprIndexAccess().getGroup()); }
		(rule__PrimaryExprIndex__Group__0)?
		{ after(grammarAccess.getPrimaryExprIndexAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleprimaryExprSlice
entryRuleprimaryExprSlice
:
{ before(grammarAccess.getPrimaryExprSliceRule()); }
	 ruleprimaryExprSlice
{ after(grammarAccess.getPrimaryExprSliceRule()); } 
	 EOF 
;

// Rule primaryExprSlice
ruleprimaryExprSlice 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExprSliceAccess().getGroup()); }
		(rule__PrimaryExprSlice__Group__0)?
		{ after(grammarAccess.getPrimaryExprSliceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleprimaryExprTypeAssertion
entryRuleprimaryExprTypeAssertion
:
{ before(grammarAccess.getPrimaryExprTypeAssertionRule()); }
	 ruleprimaryExprTypeAssertion
{ after(grammarAccess.getPrimaryExprTypeAssertionRule()); } 
	 EOF 
;

// Rule primaryExprTypeAssertion
ruleprimaryExprTypeAssertion 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExprTypeAssertionAccess().getGroup()); }
		(rule__PrimaryExprTypeAssertion__Group__0)?
		{ after(grammarAccess.getPrimaryExprTypeAssertionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleprimaryExprArguments
entryRuleprimaryExprArguments
:
{ before(grammarAccess.getPrimaryExprArgumentsRule()); }
	 ruleprimaryExprArguments
{ after(grammarAccess.getPrimaryExprArgumentsRule()); } 
	 EOF 
;

// Rule primaryExprArguments
ruleprimaryExprArguments 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExprArgumentsAccess().getGroup()); }
		(rule__PrimaryExprArguments__Group__0)?
		{ after(grammarAccess.getPrimaryExprArgumentsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleselector
entryRuleselector
:
{ before(grammarAccess.getSelectorRule()); }
	 ruleselector
{ after(grammarAccess.getSelectorRule()); } 
	 EOF 
;

// Rule selector
ruleselector 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectorAccess().getGroup()); }
		(rule__Selector__Group__0)
		{ after(grammarAccess.getSelectorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleindex
entryRuleindex
:
{ before(grammarAccess.getIndexRule()); }
	 ruleindex
{ after(grammarAccess.getIndexRule()); } 
	 EOF 
;

// Rule index
ruleindex 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIndexAccess().getGroup()); }
		(rule__Index__Group__0)
		{ after(grammarAccess.getIndexAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleslice
entryRuleslice
:
{ before(grammarAccess.getSliceRule()); }
	 ruleslice
{ after(grammarAccess.getSliceRule()); } 
	 EOF 
;

// Rule slice
ruleslice 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSliceAccess().getGroup()); }
		(rule__Slice__Group__0)
		{ after(grammarAccess.getSliceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuletypeAssertion
entryRuletypeAssertion
:
{ before(grammarAccess.getTypeAssertionRule()); }
	 ruletypeAssertion
{ after(grammarAccess.getTypeAssertionRule()); } 
	 EOF 
;

// Rule typeAssertion
ruletypeAssertion 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAssertionAccess().getGroup()); }
		(rule__TypeAssertion__Group__0)
		{ after(grammarAccess.getTypeAssertionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulearguments
entryRulearguments
:
{ before(grammarAccess.getArgumentsRule()); }
	 rulearguments
{ after(grammarAccess.getArgumentsRule()); } 
	 EOF 
;

// Rule arguments
rulearguments 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArgumentsAccess().getGroup()); }
		(rule__Arguments__Group__0)
		{ after(grammarAccess.getArgumentsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulemethodExpr
entryRulemethodExpr
:
{ before(grammarAccess.getMethodExprRule()); }
	 rulemethodExpr
{ after(grammarAccess.getMethodExprRule()); } 
	 EOF 
;

// Rule methodExpr
rulemethodExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMethodExprAccess().getGroup()); }
		(rule__MethodExpr__Group__0)
		{ after(grammarAccess.getMethodExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulereceiverType
entryRulereceiverType
:
{ before(grammarAccess.getReceiverTypeRule()); }
	 rulereceiverType
{ after(grammarAccess.getReceiverTypeRule()); } 
	 EOF 
;

// Rule receiverType
rulereceiverType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReceiverTypeAccess().getAlternatives()); }
		(rule__ReceiverType__Alternatives)
		{ after(grammarAccess.getReceiverTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleexpression
entryRuleexpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleexpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule expression
ruleexpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getGroup()); }
		(rule__Expression__Group__0)
		{ after(grammarAccess.getExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleexpressionMatched
entryRuleexpressionMatched
:
{ before(grammarAccess.getExpressionMatchedRule()); }
	 ruleexpressionMatched
{ after(grammarAccess.getExpressionMatchedRule()); } 
	 EOF 
;

// Rule expressionMatched
ruleexpressionMatched 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionMatchedAccess().getGroup()); }
		(rule__ExpressionMatched__Group__0)?
		{ after(grammarAccess.getExpressionMatchedAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleunaryExpr
entryRuleunaryExpr
:
{ before(grammarAccess.getUnaryExprRule()); }
	 ruleunaryExpr
{ after(grammarAccess.getUnaryExprRule()); } 
	 EOF 
;

// Rule unaryExpr
ruleunaryExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryExprAccess().getAlternatives()); }
		(rule__UnaryExpr__Alternatives)
		{ after(grammarAccess.getUnaryExprAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleconversion
entryRuleconversion
:
{ before(grammarAccess.getConversionRule()); }
	 ruleconversion
{ after(grammarAccess.getConversionRule()); } 
	 EOF 
;

// Rule conversion
ruleconversion 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConversionAccess().getGroup()); }
		(rule__Conversion__Group__0)
		{ after(grammarAccess.getConversionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleeos
entryRuleeos
:
{ before(grammarAccess.getEosRule()); }
	 ruleeos
{ after(grammarAccess.getEosRule()); } 
	 EOF 
;

// Rule eos
ruleeos 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEosAccess().getSemicolonKeyword()); }
		';'
		{ after(grammarAccess.getEosAccess().getSemicolonKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDecl__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportDeclAccess().getImportSpecParserRuleCall_1_0()); }
		ruleimportSpec
		{ after(grammarAccess.getImportDeclAccess().getImportSpecParserRuleCall_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getImportDeclAccess().getGroup_1_1()); }
		(rule__ImportDecl__Group_1_1__0)
		{ after(grammarAccess.getImportDeclAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportSpec__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportSpecAccess().getFullStopKeyword_0_0()); }
		'.'
		{ after(grammarAccess.getImportSpecAccess().getFullStopKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getImportSpecAccess().getIDENTIFIERTerminalRuleCall_0_1()); }
		RULE_IDENTIFIER
		{ after(grammarAccess.getImportSpecAccess().getIDENTIFIERTerminalRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TopLevelDecl__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTopLevelDeclAccess().getDeclarationParserRuleCall_0()); }
		ruledeclaration
		{ after(grammarAccess.getTopLevelDeclAccess().getDeclarationParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTopLevelDeclAccess().getFunctionDeclParserRuleCall_1()); }
		rulefunctionDecl
		{ after(grammarAccess.getTopLevelDeclAccess().getFunctionDeclParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTopLevelDeclAccess().getMethodDeclParserRuleCall_2()); }
		rulemethodDecl
		{ after(grammarAccess.getTopLevelDeclAccess().getMethodDeclParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclarationAccess().getConstDeclParserRuleCall_0()); }
		ruleconstDecl
		{ after(grammarAccess.getDeclarationAccess().getConstDeclParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getDeclarationAccess().getTypeDeclParserRuleCall_1()); }
		ruletypeDecl
		{ after(grammarAccess.getDeclarationAccess().getTypeDeclParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getDeclarationAccess().getVarDeclParserRuleCall_2()); }
		rulevarDecl
		{ after(grammarAccess.getDeclarationAccess().getVarDeclParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstDecl__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstDeclAccess().getConstSpecParserRuleCall_1_0()); }
		ruleconstSpec
		{ after(grammarAccess.getConstDeclAccess().getConstSpecParserRuleCall_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getConstDeclAccess().getGroup_1_1()); }
		(rule__ConstDecl__Group_1_1__0)
		{ after(grammarAccess.getConstDeclAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeDeclAccess().getTypeSpecParserRuleCall_1_0()); }
		ruletypeSpec
		{ after(grammarAccess.getTypeDeclAccess().getTypeSpecParserRuleCall_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeDeclAccess().getGroup_1_1()); }
		(rule__TypeDecl__Group_1_1__0)
		{ after(grammarAccess.getTypeDeclAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDeclAccess().getFunctionParserRuleCall_2_0()); }
		rulefunction
		{ after(grammarAccess.getFunctionDeclAccess().getFunctionParserRuleCall_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionDeclAccess().getSignatureParserRuleCall_2_1()); }
		rulesignature
		{ after(grammarAccess.getFunctionDeclAccess().getSignatureParserRuleCall_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDecl__Alternatives_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodDeclAccess().getFunctionParserRuleCall_3_0()); }
		rulefunction
		{ after(grammarAccess.getMethodDeclAccess().getFunctionParserRuleCall_3_0()); }
	)
	|
	(
		{ before(grammarAccess.getMethodDeclAccess().getSignatureParserRuleCall_3_1()); }
		rulesignature
		{ after(grammarAccess.getMethodDeclAccess().getSignatureParserRuleCall_3_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclAccess().getVarSpecParserRuleCall_1_0()); }
		rulevarSpec
		{ after(grammarAccess.getVarDeclAccess().getVarSpecParserRuleCall_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getVarDeclAccess().getGroup_1_1()); }
		(rule__VarDecl__Group_1_1__0)
		{ after(grammarAccess.getVarDeclAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarSpec__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarSpecAccess().getGroup_1_0()); }
		(rule__VarSpec__Group_1_0__0)
		{ after(grammarAccess.getVarSpecAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getVarSpecAccess().getGroup_1_1()); }
		(rule__VarSpec__Group_1_1__0)
		{ after(grammarAccess.getVarSpecAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getDeclarationParserRuleCall_0()); }
		ruledeclaration
		{ after(grammarAccess.getStatementAccess().getDeclarationParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getLabeledStmtParserRuleCall_1()); }
		rulelabeledStmt
		{ after(grammarAccess.getStatementAccess().getLabeledStmtParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getSimpleStmtParserRuleCall_2()); }
		rulesimpleStmt
		{ after(grammarAccess.getStatementAccess().getSimpleStmtParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getGoStmtParserRuleCall_3()); }
		rulegoStmt
		{ after(grammarAccess.getStatementAccess().getGoStmtParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getReturnStmtParserRuleCall_4()); }
		rulereturnStmt
		{ after(grammarAccess.getStatementAccess().getReturnStmtParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getBreakStmtParserRuleCall_5()); }
		rulebreakStmt
		{ after(grammarAccess.getStatementAccess().getBreakStmtParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getContinueStmtParserRuleCall_6()); }
		rulecontinueStmt
		{ after(grammarAccess.getStatementAccess().getContinueStmtParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getGotoStmtParserRuleCall_7()); }
		rulegotoStmt
		{ after(grammarAccess.getStatementAccess().getGotoStmtParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getFallthroughStmtParserRuleCall_8()); }
		rulefallthroughStmt
		{ after(grammarAccess.getStatementAccess().getFallthroughStmtParserRuleCall_8()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getBlockParserRuleCall_9()); }
		ruleblock
		{ after(grammarAccess.getStatementAccess().getBlockParserRuleCall_9()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getIfStmtParserRuleCall_10()); }
		ruleifStmt
		{ after(grammarAccess.getStatementAccess().getIfStmtParserRuleCall_10()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getSwitchStmtParserRuleCall_11()); }
		ruleswitchStmt
		{ after(grammarAccess.getStatementAccess().getSwitchStmtParserRuleCall_11()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getSelectStmtParserRuleCall_12()); }
		ruleselectStmt
		{ after(grammarAccess.getStatementAccess().getSelectStmtParserRuleCall_12()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getForStmtParserRuleCall_13()); }
		ruleforStmt
		{ after(grammarAccess.getStatementAccess().getForStmtParserRuleCall_13()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getDeferStmtParserRuleCall_14()); }
		ruledeferStmt
		{ after(grammarAccess.getStatementAccess().getDeferStmtParserRuleCall_14()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleStmt__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleStmtAccess().getSendStmtParserRuleCall_0()); }
		rulesendStmt
		{ after(grammarAccess.getSimpleStmtAccess().getSendStmtParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleStmtAccess().getExpressionStmtParserRuleCall_1()); }
		ruleexpressionStmt
		{ after(grammarAccess.getSimpleStmtAccess().getExpressionStmtParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleStmtAccess().getIncDecStmtParserRuleCall_2()); }
		ruleincDecStmt
		{ after(grammarAccess.getSimpleStmtAccess().getIncDecStmtParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleStmtAccess().getAssignmentParserRuleCall_3()); }
		ruleassignment
		{ after(grammarAccess.getSimpleStmtAccess().getAssignmentParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleStmtAccess().getShortVarDeclParserRuleCall_4()); }
		ruleshortVarDecl
		{ after(grammarAccess.getSimpleStmtAccess().getShortVarDeclParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleStmtAccess().getEmptyStmtParserRuleCall_5()); }
		ruleemptyStmt
		{ after(grammarAccess.getSimpleStmtAccess().getEmptyStmtParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IncDecStmt__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIncDecStmtAccess().getPlusSignPlusSignKeyword_1_0()); }
		'++'
		{ after(grammarAccess.getIncDecStmtAccess().getPlusSignPlusSignKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getIncDecStmtAccess().getHyphenMinusHyphenMinusKeyword_1_1()); }
		'--'
		{ after(grammarAccess.getIncDecStmtAccess().getHyphenMinusHyphenMinusKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign_op__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssign_opAccess().getPlusSignKeyword_0_0()); }
		'+'
		{ after(grammarAccess.getAssign_opAccess().getPlusSignKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAssign_opAccess().getHyphenMinusKeyword_0_1()); }
		'-'
		{ after(grammarAccess.getAssign_opAccess().getHyphenMinusKeyword_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getAssign_opAccess().getVerticalLineKeyword_0_2()); }
		'|'
		{ after(grammarAccess.getAssign_opAccess().getVerticalLineKeyword_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getAssign_opAccess().getCircumflexAccentKeyword_0_3()); }
		'^'
		{ after(grammarAccess.getAssign_opAccess().getCircumflexAccentKeyword_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getAssign_opAccess().getAsteriskKeyword_0_4()); }
		'*'
		{ after(grammarAccess.getAssign_opAccess().getAsteriskKeyword_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getAssign_opAccess().getSolidusKeyword_0_5()); }
		'/'
		{ after(grammarAccess.getAssign_opAccess().getSolidusKeyword_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getAssign_opAccess().getPercentSignKeyword_0_6()); }
		'%'
		{ after(grammarAccess.getAssign_opAccess().getPercentSignKeyword_0_6()); }
	)
	|
	(
		{ before(grammarAccess.getAssign_opAccess().getLessThanSignLessThanSignKeyword_0_7()); }
		'<<'
		{ after(grammarAccess.getAssign_opAccess().getLessThanSignLessThanSignKeyword_0_7()); }
	)
	|
	(
		{ before(grammarAccess.getAssign_opAccess().getGreaterThanSignGreaterThanSignKeyword_0_8()); }
		'>>'
		{ after(grammarAccess.getAssign_opAccess().getGreaterThanSignGreaterThanSignKeyword_0_8()); }
	)
	|
	(
		{ before(grammarAccess.getAssign_opAccess().getAmpersandKeyword_0_9()); }
		'&'
		{ after(grammarAccess.getAssign_opAccess().getAmpersandKeyword_0_9()); }
	)
	|
	(
		{ before(grammarAccess.getAssign_opAccess().getAmpersandCircumflexAccentKeyword_0_10()); }
		'&^'
		{ after(grammarAccess.getAssign_opAccess().getAmpersandCircumflexAccentKeyword_0_10()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStmt__Alternatives_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStmtAccess().getIfStmtParserRuleCall_4_1_0()); }
		ruleifStmt
		{ after(grammarAccess.getIfStmtAccess().getIfStmtParserRuleCall_4_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getIfStmtAccess().getBlockParserRuleCall_4_1_1()); }
		ruleblock
		{ after(grammarAccess.getIfStmtAccess().getBlockParserRuleCall_4_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStmt__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSwitchStmtAccess().getExprSwitchStmtParserRuleCall_0()); }
		ruleexprSwitchStmt
		{ after(grammarAccess.getSwitchStmtAccess().getExprSwitchStmtParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSwitchStmtAccess().getTypeSwitchStmtParserRuleCall_1()); }
		ruletypeSwitchStmt
		{ after(grammarAccess.getSwitchStmtAccess().getTypeSwitchStmtParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSwitchCase__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprSwitchCaseAccess().getGroup_0()); }
		(rule__ExprSwitchCase__Group_0__0)
		{ after(grammarAccess.getExprSwitchCaseAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getExprSwitchCaseAccess().getDefaultKeyword_1()); }
		'default'
		{ after(grammarAccess.getExprSwitchCaseAccess().getDefaultKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSwitchCase__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeSwitchCaseAccess().getGroup_0()); }
		(rule__TypeSwitchCase__Group_0__0)
		{ after(grammarAccess.getTypeSwitchCaseAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeSwitchCaseAccess().getDefaultKeyword_1()); }
		'default'
		{ after(grammarAccess.getTypeSwitchCaseAccess().getDefaultKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommCase__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommCaseAccess().getGroup_0()); }
		(rule__CommCase__Group_0__0)
		{ after(grammarAccess.getCommCaseAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getCommCaseAccess().getDefaultKeyword_1()); }
		'default'
		{ after(grammarAccess.getCommCaseAccess().getDefaultKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommCase__Alternatives_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommCaseAccess().getSendStmtParserRuleCall_0_1_0()); }
		rulesendStmt
		{ after(grammarAccess.getCommCaseAccess().getSendStmtParserRuleCall_0_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getCommCaseAccess().getRecvStmtParserRuleCall_0_1_1()); }
		rulerecvStmt
		{ after(grammarAccess.getCommCaseAccess().getRecvStmtParserRuleCall_0_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RecvStmt__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRecvStmtAccess().getGroup_0_0()); }
		(rule__RecvStmt__Group_0_0__0)
		{ after(grammarAccess.getRecvStmtAccess().getGroup_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getRecvStmtAccess().getGroup_0_1()); }
		(rule__RecvStmt__Group_0_1__0)
		{ after(grammarAccess.getRecvStmtAccess().getGroup_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStmt__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForStmtAccess().getExpressionParserRuleCall_1_0()); }
		ruleexpression
		{ after(grammarAccess.getForStmtAccess().getExpressionParserRuleCall_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getForStmtAccess().getForClauseParserRuleCall_1_1()); }
		ruleforClause
		{ after(grammarAccess.getForStmtAccess().getForClauseParserRuleCall_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getForStmtAccess().getRangeClauseParserRuleCall_1_2()); }
		rulerangeClause
		{ after(grammarAccess.getForStmtAccess().getRangeClauseParserRuleCall_1_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeClause__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRangeClauseAccess().getGroup_0_0()); }
		(rule__RangeClause__Group_0_0__0)
		{ after(grammarAccess.getRangeClauseAccess().getGroup_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getRangeClauseAccess().getGroup_0_1()); }
		(rule__RangeClause__Group_0_1__0)
		{ after(grammarAccess.getRangeClauseAccess().getGroup_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getTypeNameParserRuleCall_0()); }
		ruletypeName
		{ after(grammarAccess.getTypeAccess().getTypeNameParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getTypeLitParserRuleCall_1()); }
		ruletypeLit
		{ after(grammarAccess.getTypeAccess().getTypeLitParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getGroup_2()); }
		(rule__Type__Group_2__0)
		{ after(grammarAccess.getTypeAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeName__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeNameAccess().getIDENTIFIERTerminalRuleCall_0()); }
		RULE_IDENTIFIER
		{ after(grammarAccess.getTypeNameAccess().getIDENTIFIERTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeNameAccess().getQualifiedIdentParserRuleCall_1()); }
		rulequalifiedIdent
		{ after(grammarAccess.getTypeNameAccess().getQualifiedIdentParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeLit__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeLitAccess().getArrayTypeParserRuleCall_0()); }
		rulearrayType
		{ after(grammarAccess.getTypeLitAccess().getArrayTypeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeLitAccess().getStructTypeParserRuleCall_1()); }
		rulestructType
		{ after(grammarAccess.getTypeLitAccess().getStructTypeParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeLitAccess().getPointerTypeParserRuleCall_2()); }
		rulepointerType
		{ after(grammarAccess.getTypeLitAccess().getPointerTypeParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getTypeLitAccess().getFunctionTypeParserRuleCall_3()); }
		rulefunctionType
		{ after(grammarAccess.getTypeLitAccess().getFunctionTypeParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getTypeLitAccess().getInterfaceTypeParserRuleCall_4()); }
		ruleinterfaceType
		{ after(grammarAccess.getTypeLitAccess().getInterfaceTypeParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getTypeLitAccess().getSliceTypeParserRuleCall_5()); }
		rulesliceType
		{ after(grammarAccess.getTypeLitAccess().getSliceTypeParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getTypeLitAccess().getMapTypeParserRuleCall_6()); }
		rulemapType
		{ after(grammarAccess.getTypeLitAccess().getMapTypeParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getTypeLitAccess().getChannelTypeParserRuleCall_7()); }
		rulechannelType
		{ after(grammarAccess.getTypeLitAccess().getChannelTypeParserRuleCall_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelType__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getChannelTypeAccess().getChanKeyword_0_0()); }
		'chan'
		{ after(grammarAccess.getChannelTypeAccess().getChanKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getChannelTypeAccess().getGroup_0_1()); }
		(rule__ChannelType__Group_0_1__0)
		{ after(grammarAccess.getChannelTypeAccess().getGroup_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getChannelTypeAccess().getGroup_0_2()); }
		(rule__ChannelType__Group_0_2__0)
		{ after(grammarAccess.getChannelTypeAccess().getGroup_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodSpec__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodSpecAccess().getGroup_0()); }
		(rule__MethodSpec__Group_0__0)
		{ after(grammarAccess.getMethodSpecAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getMethodSpecAccess().getTypeNameParserRuleCall_1()); }
		ruletypeName
		{ after(grammarAccess.getMethodSpecAccess().getTypeNameParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Result__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getResultAccess().getParametersParserRuleCall_0()); }
		ruleparameters
		{ after(grammarAccess.getResultAccess().getParametersParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getResultAccess().getTypeParserRuleCall_1()); }
		ruletype
		{ after(grammarAccess.getResultAccess().getTypeParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperandAccess().getLiteralParserRuleCall_0()); }
		ruleliteral
		{ after(grammarAccess.getOperandAccess().getLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getOperandAccess().getOperandNameParserRuleCall_1()); }
		ruleoperandName
		{ after(grammarAccess.getOperandAccess().getOperandNameParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getOperandAccess().getMethodExprParserRuleCall_2()); }
		rulemethodExpr
		{ after(grammarAccess.getOperandAccess().getMethodExprParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getOperandAccess().getGroup_3()); }
		(rule__Operand__Group_3__0)
		{ after(grammarAccess.getOperandAccess().getGroup_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getBasicLitParserRuleCall_0()); }
		rulebasicLit
		{ after(grammarAccess.getLiteralAccess().getBasicLitParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getCompositeLitParserRuleCall_1()); }
		rulecompositeLit
		{ after(grammarAccess.getLiteralAccess().getCompositeLitParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getFunctionLitParserRuleCall_2()); }
		rulefunctionLit
		{ after(grammarAccess.getLiteralAccess().getFunctionLitParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicLit__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBasicLitAccess().getINT_LITTerminalRuleCall_0()); }
		RULE_INT_LIT
		{ after(grammarAccess.getBasicLitAccess().getINT_LITTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getBasicLitAccess().getFLOAT_LITTerminalRuleCall_1()); }
		RULE_FLOAT_LIT
		{ after(grammarAccess.getBasicLitAccess().getFLOAT_LITTerminalRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getBasicLitAccess().getIMAGINARY_LITTerminalRuleCall_2()); }
		RULE_IMAGINARY_LIT
		{ after(grammarAccess.getBasicLitAccess().getIMAGINARY_LITTerminalRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getBasicLitAccess().getRUNE_LITTerminalRuleCall_3()); }
		RULE_RUNE_LIT
		{ after(grammarAccess.getBasicLitAccess().getRUNE_LITTerminalRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getBasicLitAccess().getSTRING_LITTerminalRuleCall_4()); }
		RULE_STRING_LIT
		{ after(grammarAccess.getBasicLitAccess().getSTRING_LITTerminalRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OperandName__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperandNameAccess().getIDENTIFIERTerminalRuleCall_0()); }
		RULE_IDENTIFIER
		{ after(grammarAccess.getOperandNameAccess().getIDENTIFIERTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getOperandNameAccess().getQualifiedIdentParserRuleCall_1()); }
		rulequalifiedIdent
		{ after(grammarAccess.getOperandNameAccess().getQualifiedIdentParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralTypeAccess().getStructTypeParserRuleCall_0()); }
		rulestructType
		{ after(grammarAccess.getLiteralTypeAccess().getStructTypeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralTypeAccess().getArrayTypeParserRuleCall_1()); }
		rulearrayType
		{ after(grammarAccess.getLiteralTypeAccess().getArrayTypeParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralTypeAccess().getGroup_2()); }
		(rule__LiteralType__Group_2__0)
		{ after(grammarAccess.getLiteralTypeAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralTypeAccess().getSliceTypeParserRuleCall_3()); }
		rulesliceType
		{ after(grammarAccess.getLiteralTypeAccess().getSliceTypeParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralTypeAccess().getMapTypeParserRuleCall_4()); }
		rulemapType
		{ after(grammarAccess.getLiteralTypeAccess().getMapTypeParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralTypeAccess().getTypeNameParserRuleCall_5()); }
		ruletypeName
		{ after(grammarAccess.getLiteralTypeAccess().getTypeNameParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Key__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getKeyAccess().getIDENTIFIERTerminalRuleCall_0()); }
		RULE_IDENTIFIER
		{ after(grammarAccess.getKeyAccess().getIDENTIFIERTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getKeyAccess().getExpressionParserRuleCall_1()); }
		ruleexpression
		{ after(grammarAccess.getKeyAccess().getExpressionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getKeyAccess().getLiteralValueParserRuleCall_2()); }
		ruleliteralValue
		{ after(grammarAccess.getKeyAccess().getLiteralValueParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementAccess().getExpressionParserRuleCall_0()); }
		ruleexpression
		{ after(grammarAccess.getElementAccess().getExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getElementAccess().getLiteralValueParserRuleCall_1()); }
		ruleliteralValue
		{ after(grammarAccess.getElementAccess().getLiteralValueParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDecl__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFieldDeclAccess().getGroup_0_0()); }
		(rule__FieldDecl__Group_0_0__0)
		{ after(grammarAccess.getFieldDeclAccess().getGroup_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getFieldDeclAccess().getAnonymousFieldParserRuleCall_0_1()); }
		ruleanonymousField
		{ after(grammarAccess.getFieldDeclAccess().getAnonymousFieldParserRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExprAccess().getAlternatives_0()); }
		(rule__PrimaryExpr__Alternatives_0)
		{ after(grammarAccess.getPrimaryExprAccess().getAlternatives_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExprAccess().getPrimaryExprSelectorParserRuleCall_1()); }
		ruleprimaryExprSelector
		{ after(grammarAccess.getPrimaryExprAccess().getPrimaryExprSelectorParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExprAccess().getPrimaryExprIndexParserRuleCall_2()); }
		ruleprimaryExprIndex
		{ after(grammarAccess.getPrimaryExprAccess().getPrimaryExprIndexParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExprAccess().getPrimaryExprSliceParserRuleCall_3()); }
		ruleprimaryExprSlice
		{ after(grammarAccess.getPrimaryExprAccess().getPrimaryExprSliceParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExprAccess().getPrimaryExprTypeAssertionParserRuleCall_4()); }
		ruleprimaryExprTypeAssertion
		{ after(grammarAccess.getPrimaryExprAccess().getPrimaryExprTypeAssertionParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExprAccess().getPrimaryExprArgumentsParserRuleCall_5()); }
		ruleprimaryExprArguments
		{ after(grammarAccess.getPrimaryExprAccess().getPrimaryExprArgumentsParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExprAccess().getOperandParserRuleCall_0_0()); }
		ruleoperand
		{ after(grammarAccess.getPrimaryExprAccess().getOperandParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExprAccess().getConversionParserRuleCall_0_1()); }
		ruleconversion
		{ after(grammarAccess.getPrimaryExprAccess().getConversionParserRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExprStuff__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExprStuffAccess().getSelectorParserRuleCall_0()); }
		ruleselector
		{ after(grammarAccess.getPrimaryExprStuffAccess().getSelectorParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExprStuffAccess().getIndexParserRuleCall_1()); }
		ruleindex
		{ after(grammarAccess.getPrimaryExprStuffAccess().getIndexParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExprStuffAccess().getSliceParserRuleCall_2()); }
		ruleslice
		{ after(grammarAccess.getPrimaryExprStuffAccess().getSliceParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExprStuffAccess().getTypeAssertionParserRuleCall_3()); }
		ruletypeAssertion
		{ after(grammarAccess.getPrimaryExprStuffAccess().getTypeAssertionParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExprStuffAccess().getArgumentsParserRuleCall_4()); }
		rulearguments
		{ after(grammarAccess.getPrimaryExprStuffAccess().getArgumentsParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Slice__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSliceAccess().getGroup_1_0()); }
		(rule__Slice__Group_1_0__0)
		{ after(grammarAccess.getSliceAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getSliceAccess().getGroup_1_1()); }
		(rule__Slice__Group_1_1__0)
		{ after(grammarAccess.getSliceAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArgumentsAccess().getExpressionListParserRuleCall_1_0_0()); }
		ruleexpressionList
		{ after(grammarAccess.getArgumentsAccess().getExpressionListParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getArgumentsAccess().getGroup_1_0_1()); }
		(rule__Arguments__Group_1_0_1__0)
		{ after(grammarAccess.getArgumentsAccess().getGroup_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReceiverType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReceiverTypeAccess().getTypeNameParserRuleCall_0()); }
		ruletypeName
		{ after(grammarAccess.getReceiverTypeAccess().getTypeNameParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getReceiverTypeAccess().getGroup_1()); }
		(rule__ReceiverType__Group_1__0)
		{ after(grammarAccess.getReceiverTypeAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getReceiverTypeAccess().getGroup_2()); }
		(rule__ReceiverType__Group_2__0)
		{ after(grammarAccess.getReceiverTypeAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpr__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExprAccess().getPrimaryExprParserRuleCall_0()); }
		ruleprimaryExpr
		{ after(grammarAccess.getUnaryExprAccess().getPrimaryExprParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryExprAccess().getGroup_1()); }
		(rule__UnaryExpr__Group_1__0)
		{ after(grammarAccess.getUnaryExprAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpr__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExprAccess().getPlusSignKeyword_1_0_0()); }
		'+'
		{ after(grammarAccess.getUnaryExprAccess().getPlusSignKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryExprAccess().getHyphenMinusKeyword_1_0_1()); }
		'-'
		{ after(grammarAccess.getUnaryExprAccess().getHyphenMinusKeyword_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryExprAccess().getExclamationMarkKeyword_1_0_2()); }
		'!'
		{ after(grammarAccess.getUnaryExprAccess().getExclamationMarkKeyword_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryExprAccess().getCircumflexAccentKeyword_1_0_3()); }
		'^'
		{ after(grammarAccess.getUnaryExprAccess().getCircumflexAccentKeyword_1_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryExprAccess().getAsteriskKeyword_1_0_4()); }
		'*'
		{ after(grammarAccess.getUnaryExprAccess().getAsteriskKeyword_1_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryExprAccess().getAmpersandKeyword_1_0_5()); }
		'&'
		{ after(grammarAccess.getUnaryExprAccess().getAmpersandKeyword_1_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryExprAccess().getLessThanSignHyphenMinusKeyword_1_0_6()); }
		'<-'
		{ after(grammarAccess.getUnaryExprAccess().getLessThanSignHyphenMinusKeyword_1_0_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFile__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceFile__Group__0__Impl
	rule__SourceFile__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFile__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceFileAccess().getPackageClauseParserRuleCall_0()); }
	rulepackageClause
	{ after(grammarAccess.getSourceFileAccess().getPackageClauseParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFile__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceFile__Group__1__Impl
	rule__SourceFile__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFile__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceFileAccess().getEosParserRuleCall_1()); }
	ruleeos
	{ after(grammarAccess.getSourceFileAccess().getEosParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFile__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceFile__Group__2__Impl
	rule__SourceFile__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFile__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceFileAccess().getGroup_2()); }
	(rule__SourceFile__Group_2__0)*
	{ after(grammarAccess.getSourceFileAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFile__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceFile__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFile__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceFileAccess().getGroup_3()); }
	(rule__SourceFile__Group_3__0)*
	{ after(grammarAccess.getSourceFileAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SourceFile__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceFile__Group_2__0__Impl
	rule__SourceFile__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFile__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceFileAccess().getImportDeclParserRuleCall_2_0()); }
	ruleimportDecl
	{ after(grammarAccess.getSourceFileAccess().getImportDeclParserRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFile__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceFile__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFile__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceFileAccess().getEosParserRuleCall_2_1()); }
	ruleeos
	{ after(grammarAccess.getSourceFileAccess().getEosParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SourceFile__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceFile__Group_3__0__Impl
	rule__SourceFile__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFile__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceFileAccess().getTopLevelDeclParserRuleCall_3_0()); }
	ruletopLevelDecl
	{ after(grammarAccess.getSourceFileAccess().getTopLevelDeclParserRuleCall_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFile__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceFile__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFile__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceFileAccess().getEosParserRuleCall_3_1()); }
	ruleeos
	{ after(grammarAccess.getSourceFileAccess().getEosParserRuleCall_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PackageClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PackageClause__Group__0__Impl
	rule__PackageClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPackageClauseAccess().getPackageKeyword_0()); }
	'package'
	{ after(grammarAccess.getPackageClauseAccess().getPackageKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PackageClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPackageClauseAccess().getIDENTIFIERTerminalRuleCall_1()); }
	RULE_IDENTIFIER
	{ after(grammarAccess.getPackageClauseAccess().getIDENTIFIERTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImportDecl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportDecl__Group__0__Impl
	rule__ImportDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDecl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportDeclAccess().getImportKeyword_0()); }
	'import'
	{ after(grammarAccess.getImportDeclAccess().getImportKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDecl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportDecl__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDecl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportDeclAccess().getAlternatives_1()); }
	(rule__ImportDecl__Alternatives_1)
	{ after(grammarAccess.getImportDeclAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImportDecl__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportDecl__Group_1_1__0__Impl
	rule__ImportDecl__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDecl__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportDeclAccess().getLeftParenthesisKeyword_1_1_0()); }
	'('
	{ after(grammarAccess.getImportDeclAccess().getLeftParenthesisKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDecl__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportDecl__Group_1_1__1__Impl
	rule__ImportDecl__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDecl__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportDeclAccess().getGroup_1_1_1()); }
	(rule__ImportDecl__Group_1_1_1__0)*
	{ after(grammarAccess.getImportDeclAccess().getGroup_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDecl__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportDecl__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDecl__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportDeclAccess().getRightParenthesisKeyword_1_1_2()); }
	')'
	{ after(grammarAccess.getImportDeclAccess().getRightParenthesisKeyword_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImportDecl__Group_1_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportDecl__Group_1_1_1__0__Impl
	rule__ImportDecl__Group_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDecl__Group_1_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportDeclAccess().getImportSpecParserRuleCall_1_1_1_0()); }
	ruleimportSpec
	{ after(grammarAccess.getImportDeclAccess().getImportSpecParserRuleCall_1_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDecl__Group_1_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportDecl__Group_1_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDecl__Group_1_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportDeclAccess().getEosParserRuleCall_1_1_1_1()); }
	ruleeos
	{ after(grammarAccess.getImportDeclAccess().getEosParserRuleCall_1_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImportSpec__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportSpec__Group__0__Impl
	rule__ImportSpec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportSpec__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportSpecAccess().getAlternatives_0()); }
	(rule__ImportSpec__Alternatives_0)?
	{ after(grammarAccess.getImportSpecAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportSpec__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportSpec__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportSpec__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportSpecAccess().getImportPathParserRuleCall_1()); }
	ruleimportPath
	{ after(grammarAccess.getImportSpecAccess().getImportPathParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstDecl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstDecl__Group__0__Impl
	rule__ConstDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstDecl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstDeclAccess().getConstKeyword_0()); }
	'const'
	{ after(grammarAccess.getConstDeclAccess().getConstKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstDecl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstDecl__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstDecl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstDeclAccess().getAlternatives_1()); }
	(rule__ConstDecl__Alternatives_1)
	{ after(grammarAccess.getConstDeclAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstDecl__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstDecl__Group_1_1__0__Impl
	rule__ConstDecl__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstDecl__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstDeclAccess().getLeftParenthesisKeyword_1_1_0()); }
	'('
	{ after(grammarAccess.getConstDeclAccess().getLeftParenthesisKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstDecl__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstDecl__Group_1_1__1__Impl
	rule__ConstDecl__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstDecl__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstDeclAccess().getGroup_1_1_1()); }
	(rule__ConstDecl__Group_1_1_1__0)*
	{ after(grammarAccess.getConstDeclAccess().getGroup_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstDecl__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstDecl__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstDecl__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstDeclAccess().getRightParenthesisKeyword_1_1_2()); }
	')'
	{ after(grammarAccess.getConstDeclAccess().getRightParenthesisKeyword_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstDecl__Group_1_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstDecl__Group_1_1_1__0__Impl
	rule__ConstDecl__Group_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstDecl__Group_1_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstDeclAccess().getConstSpecParserRuleCall_1_1_1_0()); }
	ruleconstSpec
	{ after(grammarAccess.getConstDeclAccess().getConstSpecParserRuleCall_1_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstDecl__Group_1_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstDecl__Group_1_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstDecl__Group_1_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstDeclAccess().getEosParserRuleCall_1_1_1_1()); }
	ruleeos
	{ after(grammarAccess.getConstDeclAccess().getEosParserRuleCall_1_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstSpec__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstSpec__Group__0__Impl
	rule__ConstSpec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstSpec__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstSpecAccess().getIdentifierListParserRuleCall_0()); }
	ruleidentifierList
	{ after(grammarAccess.getConstSpecAccess().getIdentifierListParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstSpec__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstSpec__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstSpec__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstSpecAccess().getGroup_1()); }
	(rule__ConstSpec__Group_1__0)?
	{ after(grammarAccess.getConstSpecAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstSpec__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstSpec__Group_1__0__Impl
	rule__ConstSpec__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstSpec__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstSpecAccess().getTypeParserRuleCall_1_0()); }
	(ruletype)?
	{ after(grammarAccess.getConstSpecAccess().getTypeParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstSpec__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstSpec__Group_1__1__Impl
	rule__ConstSpec__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstSpec__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstSpecAccess().getEqualsSignKeyword_1_1()); }
	'='
	{ after(grammarAccess.getConstSpecAccess().getEqualsSignKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstSpec__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstSpec__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstSpec__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstSpecAccess().getExpressionListParserRuleCall_1_2()); }
	ruleexpressionList
	{ after(grammarAccess.getConstSpecAccess().getExpressionListParserRuleCall_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IdentifierList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IdentifierList__Group__0__Impl
	rule__IdentifierList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdentifierListAccess().getIDENTIFIERTerminalRuleCall_0()); }
	RULE_IDENTIFIER
	{ after(grammarAccess.getIdentifierListAccess().getIDENTIFIERTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IdentifierList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdentifierListAccess().getGroup_1()); }
	(rule__IdentifierList__Group_1__0)*
	{ after(grammarAccess.getIdentifierListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IdentifierList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IdentifierList__Group_1__0__Impl
	rule__IdentifierList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdentifierListAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getIdentifierListAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IdentifierList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdentifierListAccess().getIDENTIFIERTerminalRuleCall_1_1()); }
	RULE_IDENTIFIER
	{ after(grammarAccess.getIdentifierListAccess().getIDENTIFIERTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionList__Group__0__Impl
	rule__ExpressionList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionListAccess().getExpressionParserRuleCall_0()); }
	ruleexpression
	{ after(grammarAccess.getExpressionListAccess().getExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionListAccess().getGroup_1()); }
	(rule__ExpressionList__Group_1__0)*
	{ after(grammarAccess.getExpressionListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionList__Group_1__0__Impl
	rule__ExpressionList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionListAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getExpressionListAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionListAccess().getExpressionParserRuleCall_1_1()); }
	ruleexpression
	{ after(grammarAccess.getExpressionListAccess().getExpressionParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDecl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeDecl__Group__0__Impl
	rule__TypeDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeDeclAccess().getTypeKeyword_0()); }
	'type'
	{ after(grammarAccess.getTypeDeclAccess().getTypeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeDecl__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeDeclAccess().getAlternatives_1()); }
	(rule__TypeDecl__Alternatives_1)
	{ after(grammarAccess.getTypeDeclAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDecl__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeDecl__Group_1_1__0__Impl
	rule__TypeDecl__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeDeclAccess().getLeftParenthesisKeyword_1_1_0()); }
	'('
	{ after(grammarAccess.getTypeDeclAccess().getLeftParenthesisKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeDecl__Group_1_1__1__Impl
	rule__TypeDecl__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeDeclAccess().getGroup_1_1_1()); }
	(rule__TypeDecl__Group_1_1_1__0)*
	{ after(grammarAccess.getTypeDeclAccess().getGroup_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeDecl__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeDeclAccess().getRightParenthesisKeyword_1_1_2()); }
	')'
	{ after(grammarAccess.getTypeDeclAccess().getRightParenthesisKeyword_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDecl__Group_1_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeDecl__Group_1_1_1__0__Impl
	rule__TypeDecl__Group_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group_1_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeDeclAccess().getTypeSpecParserRuleCall_1_1_1_0()); }
	ruletypeSpec
	{ after(grammarAccess.getTypeDeclAccess().getTypeSpecParserRuleCall_1_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group_1_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeDecl__Group_1_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group_1_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeDeclAccess().getEosParserRuleCall_1_1_1_1()); }
	ruleeos
	{ after(grammarAccess.getTypeDeclAccess().getEosParserRuleCall_1_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeSpec__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeSpec__Group__0__Impl
	rule__TypeSpec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpec__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeSpecAccess().getIDENTIFIERTerminalRuleCall_0()); }
	RULE_IDENTIFIER
	{ after(grammarAccess.getTypeSpecAccess().getIDENTIFIERTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpec__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeSpec__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpec__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeSpecAccess().getTypeParserRuleCall_1()); }
	ruletype
	{ after(grammarAccess.getTypeSpecAccess().getTypeParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDecl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDecl__Group__0__Impl
	rule__FunctionDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclAccess().getFuncKeyword_0()); }
	'func'
	{ after(grammarAccess.getFunctionDeclAccess().getFuncKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDecl__Group__1__Impl
	rule__FunctionDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclAccess().getIDENTIFIERTerminalRuleCall_1()); }
	RULE_IDENTIFIER
	{ after(grammarAccess.getFunctionDeclAccess().getIDENTIFIERTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDecl__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclAccess().getAlternatives_2()); }
	(rule__FunctionDecl__Alternatives_2)
	{ after(grammarAccess.getFunctionDeclAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getSignatureParserRuleCall_0()); }
	rulesignature
	{ after(grammarAccess.getFunctionAccess().getSignatureParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getBlockParserRuleCall_1()); }
	ruleblock
	{ after(grammarAccess.getFunctionAccess().getBlockParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MethodDecl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodDecl__Group__0__Impl
	rule__MethodDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDecl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodDeclAccess().getFuncKeyword_0()); }
	'func'
	{ after(grammarAccess.getMethodDeclAccess().getFuncKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDecl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodDecl__Group__1__Impl
	rule__MethodDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDecl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodDeclAccess().getReceiverParserRuleCall_1()); }
	rulereceiver
	{ after(grammarAccess.getMethodDeclAccess().getReceiverParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDecl__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodDecl__Group__2__Impl
	rule__MethodDecl__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDecl__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodDeclAccess().getIDENTIFIERTerminalRuleCall_2()); }
	RULE_IDENTIFIER
	{ after(grammarAccess.getMethodDeclAccess().getIDENTIFIERTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDecl__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodDecl__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodDecl__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodDeclAccess().getAlternatives_3()); }
	(rule__MethodDecl__Alternatives_3)
	{ after(grammarAccess.getMethodDeclAccess().getAlternatives_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDecl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDecl__Group__0__Impl
	rule__VarDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclAccess().getVarKeyword_0()); }
	'var'
	{ after(grammarAccess.getVarDeclAccess().getVarKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDecl__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclAccess().getAlternatives_1()); }
	(rule__VarDecl__Alternatives_1)
	{ after(grammarAccess.getVarDeclAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDecl__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDecl__Group_1_1__0__Impl
	rule__VarDecl__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclAccess().getLeftParenthesisKeyword_1_1_0()); }
	'('
	{ after(grammarAccess.getVarDeclAccess().getLeftParenthesisKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDecl__Group_1_1__1__Impl
	rule__VarDecl__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclAccess().getGroup_1_1_1()); }
	(rule__VarDecl__Group_1_1_1__0)*
	{ after(grammarAccess.getVarDeclAccess().getGroup_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDecl__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclAccess().getRightParenthesisKeyword_1_1_2()); }
	')'
	{ after(grammarAccess.getVarDeclAccess().getRightParenthesisKeyword_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDecl__Group_1_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDecl__Group_1_1_1__0__Impl
	rule__VarDecl__Group_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group_1_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclAccess().getVarSpecParserRuleCall_1_1_1_0()); }
	rulevarSpec
	{ after(grammarAccess.getVarDeclAccess().getVarSpecParserRuleCall_1_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group_1_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDecl__Group_1_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group_1_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclAccess().getEosParserRuleCall_1_1_1_1()); }
	ruleeos
	{ after(grammarAccess.getVarDeclAccess().getEosParserRuleCall_1_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarSpec__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarSpec__Group__0__Impl
	rule__VarSpec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarSpec__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarSpecAccess().getIdentifierListParserRuleCall_0()); }
	ruleidentifierList
	{ after(grammarAccess.getVarSpecAccess().getIdentifierListParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarSpec__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarSpec__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarSpec__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarSpecAccess().getAlternatives_1()); }
	(rule__VarSpec__Alternatives_1)
	{ after(grammarAccess.getVarSpecAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarSpec__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarSpec__Group_1_0__0__Impl
	rule__VarSpec__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarSpec__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarSpecAccess().getTypeParserRuleCall_1_0_0()); }
	ruletype
	{ after(grammarAccess.getVarSpecAccess().getTypeParserRuleCall_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarSpec__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarSpec__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarSpec__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarSpecAccess().getGroup_1_0_1()); }
	(rule__VarSpec__Group_1_0_1__0)?
	{ after(grammarAccess.getVarSpecAccess().getGroup_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarSpec__Group_1_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarSpec__Group_1_0_1__0__Impl
	rule__VarSpec__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarSpec__Group_1_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarSpecAccess().getEqualsSignKeyword_1_0_1_0()); }
	'='
	{ after(grammarAccess.getVarSpecAccess().getEqualsSignKeyword_1_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarSpec__Group_1_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarSpec__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarSpec__Group_1_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarSpecAccess().getExpressionListParserRuleCall_1_0_1_1()); }
	ruleexpressionList
	{ after(grammarAccess.getVarSpecAccess().getExpressionListParserRuleCall_1_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarSpec__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarSpec__Group_1_1__0__Impl
	rule__VarSpec__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarSpec__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarSpecAccess().getEqualsSignKeyword_1_1_0()); }
	'='
	{ after(grammarAccess.getVarSpecAccess().getEqualsSignKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarSpec__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarSpec__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarSpec__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarSpecAccess().getExpressionListParserRuleCall_1_1_1()); }
	ruleexpressionList
	{ after(grammarAccess.getVarSpecAccess().getExpressionListParserRuleCall_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0()); }
	'{'
	{ after(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__1__Impl
	rule__Block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getStatementListParserRuleCall_1()); }
	rulestatementList
	{ after(grammarAccess.getBlockAccess().getStatementListParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2()); }
	'}'
	{ after(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StatementList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StatementList__Group__0__Impl
	rule__StatementList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementListAccess().getStatementParserRuleCall_0()); }
	rulestatement
	{ after(grammarAccess.getStatementListAccess().getStatementParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StatementList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementListAccess().getEosParserRuleCall_1()); }
	ruleeos
	{ after(grammarAccess.getStatementListAccess().getEosParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SendStmt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SendStmt__Group__0__Impl
	rule__SendStmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SendStmt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSendStmtAccess().getExpressionParserRuleCall_0()); }
	ruleexpression
	{ after(grammarAccess.getSendStmtAccess().getExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SendStmt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SendStmt__Group__1__Impl
	rule__SendStmt__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SendStmt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSendStmtAccess().getLessThanSignHyphenMinusKeyword_1()); }
	'<-'
	{ after(grammarAccess.getSendStmtAccess().getLessThanSignHyphenMinusKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SendStmt__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SendStmt__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SendStmt__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSendStmtAccess().getExpressionParserRuleCall_2()); }
	ruleexpression
	{ after(grammarAccess.getSendStmtAccess().getExpressionParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IncDecStmt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IncDecStmt__Group__0__Impl
	rule__IncDecStmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IncDecStmt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncDecStmtAccess().getExpressionParserRuleCall_0()); }
	ruleexpression
	{ after(grammarAccess.getIncDecStmtAccess().getExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IncDecStmt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IncDecStmt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IncDecStmt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIncDecStmtAccess().getAlternatives_1()); }
	(rule__IncDecStmt__Alternatives_1)
	{ after(grammarAccess.getIncDecStmtAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getExpressionListParserRuleCall_0()); }
	ruleexpressionList
	{ after(grammarAccess.getAssignmentAccess().getExpressionListParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getAssign_opParserRuleCall_1()); }
	ruleassign_op
	{ after(grammarAccess.getAssignmentAccess().getAssign_opParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getExpressionListParserRuleCall_2()); }
	ruleexpressionList
	{ after(grammarAccess.getAssignmentAccess().getExpressionListParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assign_op__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assign_op__Group__0__Impl
	rule__Assign_op__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign_op__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssign_opAccess().getAlternatives_0()); }
	(rule__Assign_op__Alternatives_0)?
	{ after(grammarAccess.getAssign_opAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign_op__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assign_op__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign_op__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssign_opAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getAssign_opAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShortVarDecl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShortVarDecl__Group__0__Impl
	rule__ShortVarDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortVarDecl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShortVarDeclAccess().getIdentifierListParserRuleCall_0()); }
	ruleidentifierList
	{ after(grammarAccess.getShortVarDeclAccess().getIdentifierListParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortVarDecl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShortVarDecl__Group__1__Impl
	rule__ShortVarDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortVarDecl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShortVarDeclAccess().getColonEqualsSignKeyword_1()); }
	':='
	{ after(grammarAccess.getShortVarDeclAccess().getColonEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortVarDecl__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShortVarDecl__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortVarDecl__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShortVarDeclAccess().getExpressionListParserRuleCall_2()); }
	ruleexpressionList
	{ after(grammarAccess.getShortVarDeclAccess().getExpressionListParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LabeledStmt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LabeledStmt__Group__0__Impl
	rule__LabeledStmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStmt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLabeledStmtAccess().getIDENTIFIERTerminalRuleCall_0()); }
	RULE_IDENTIFIER
	{ after(grammarAccess.getLabeledStmtAccess().getIDENTIFIERTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStmt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LabeledStmt__Group__1__Impl
	rule__LabeledStmt__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStmt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLabeledStmtAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getLabeledStmtAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStmt__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LabeledStmt__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStmt__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLabeledStmtAccess().getStatementParserRuleCall_2()); }
	rulestatement
	{ after(grammarAccess.getLabeledStmtAccess().getStatementParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStmt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnStmt__Group__0__Impl
	rule__ReturnStmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStmt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnStmtAccess().getReturnKeyword_0()); }
	'return'
	{ after(grammarAccess.getReturnStmtAccess().getReturnKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStmt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnStmt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStmt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnStmtAccess().getExpressionListParserRuleCall_1()); }
	(ruleexpressionList)?
	{ after(grammarAccess.getReturnStmtAccess().getExpressionListParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BreakStmt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BreakStmt__Group__0__Impl
	rule__BreakStmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStmt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBreakStmtAccess().getBreakKeyword_0()); }
	'break'
	{ after(grammarAccess.getBreakStmtAccess().getBreakKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStmt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BreakStmt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStmt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBreakStmtAccess().getIDENTIFIERTerminalRuleCall_1()); }
	(RULE_IDENTIFIER)?
	{ after(grammarAccess.getBreakStmtAccess().getIDENTIFIERTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ContinueStmt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContinueStmt__Group__0__Impl
	rule__ContinueStmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContinueStmt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContinueStmtAccess().getContinueKeyword_0()); }
	'continue'
	{ after(grammarAccess.getContinueStmtAccess().getContinueKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContinueStmt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContinueStmt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContinueStmt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContinueStmtAccess().getIDENTIFIERTerminalRuleCall_1()); }
	(RULE_IDENTIFIER)?
	{ after(grammarAccess.getContinueStmtAccess().getIDENTIFIERTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GotoStmt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GotoStmt__Group__0__Impl
	rule__GotoStmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GotoStmt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGotoStmtAccess().getGotoKeyword_0()); }
	'goto'
	{ after(grammarAccess.getGotoStmtAccess().getGotoKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GotoStmt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GotoStmt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GotoStmt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGotoStmtAccess().getIDENTIFIERTerminalRuleCall_1()); }
	RULE_IDENTIFIER
	{ after(grammarAccess.getGotoStmtAccess().getIDENTIFIERTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DeferStmt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeferStmt__Group__0__Impl
	rule__DeferStmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeferStmt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeferStmtAccess().getDeferKeyword_0()); }
	'defer'
	{ after(grammarAccess.getDeferStmtAccess().getDeferKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeferStmt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeferStmt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeferStmt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeferStmtAccess().getExpressionParserRuleCall_1()); }
	ruleexpression
	{ after(grammarAccess.getDeferStmtAccess().getExpressionParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfStmt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStmt__Group__0__Impl
	rule__IfStmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStmt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStmtAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getIfStmtAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStmt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStmt__Group__1__Impl
	rule__IfStmt__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStmt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStmtAccess().getGroup_1()); }
	(rule__IfStmt__Group_1__0)?
	{ after(grammarAccess.getIfStmtAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStmt__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStmt__Group__2__Impl
	rule__IfStmt__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStmt__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStmtAccess().getExpressionParserRuleCall_2()); }
	ruleexpression
	{ after(grammarAccess.getIfStmtAccess().getExpressionParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStmt__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStmt__Group__3__Impl
	rule__IfStmt__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStmt__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStmtAccess().getBlockParserRuleCall_3()); }
	ruleblock
	{ after(grammarAccess.getIfStmtAccess().getBlockParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStmt__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStmt__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStmt__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStmtAccess().getGroup_4()); }
	(rule__IfStmt__Group_4__0)?
	{ after(grammarAccess.getIfStmtAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfStmt__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStmt__Group_1__0__Impl
	rule__IfStmt__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStmt__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStmtAccess().getSimpleStmtParserRuleCall_1_0()); }
	rulesimpleStmt
	{ after(grammarAccess.getIfStmtAccess().getSimpleStmtParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStmt__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStmt__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStmt__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStmtAccess().getSemicolonKeyword_1_1()); }
	';'
	{ after(grammarAccess.getIfStmtAccess().getSemicolonKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfStmt__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStmt__Group_4__0__Impl
	rule__IfStmt__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStmt__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStmtAccess().getElseKeyword_4_0()); }
	'else'
	{ after(grammarAccess.getIfStmtAccess().getElseKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStmt__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStmt__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStmt__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStmtAccess().getAlternatives_4_1()); }
	(rule__IfStmt__Alternatives_4_1)
	{ after(grammarAccess.getIfStmtAccess().getAlternatives_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprSwitchStmt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSwitchStmt__Group__0__Impl
	rule__ExprSwitchStmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSwitchStmt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSwitchStmtAccess().getSwitchKeyword_0()); }
	'switch'
	{ after(grammarAccess.getExprSwitchStmtAccess().getSwitchKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSwitchStmt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSwitchStmt__Group__1__Impl
	rule__ExprSwitchStmt__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSwitchStmt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSwitchStmtAccess().getGroup_1()); }
	(rule__ExprSwitchStmt__Group_1__0)?
	{ after(grammarAccess.getExprSwitchStmtAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSwitchStmt__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSwitchStmt__Group__2__Impl
	rule__ExprSwitchStmt__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSwitchStmt__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSwitchStmtAccess().getExpressionParserRuleCall_2()); }
	(ruleexpression)?
	{ after(grammarAccess.getExprSwitchStmtAccess().getExpressionParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSwitchStmt__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSwitchStmt__Group__3__Impl
	rule__ExprSwitchStmt__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSwitchStmt__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSwitchStmtAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getExprSwitchStmtAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSwitchStmt__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSwitchStmt__Group__4__Impl
	rule__ExprSwitchStmt__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSwitchStmt__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSwitchStmtAccess().getExprCaseClauseParserRuleCall_4()); }
	(ruleexprCaseClause)*
	{ after(grammarAccess.getExprSwitchStmtAccess().getExprCaseClauseParserRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSwitchStmt__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSwitchStmt__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSwitchStmt__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSwitchStmtAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getExprSwitchStmtAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprSwitchStmt__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSwitchStmt__Group_1__0__Impl
	rule__ExprSwitchStmt__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSwitchStmt__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSwitchStmtAccess().getSimpleStmtParserRuleCall_1_0()); }
	rulesimpleStmt
	{ after(grammarAccess.getExprSwitchStmtAccess().getSimpleStmtParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSwitchStmt__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSwitchStmt__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSwitchStmt__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSwitchStmtAccess().getSemicolonKeyword_1_1()); }
	';'
	{ after(grammarAccess.getExprSwitchStmtAccess().getSemicolonKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprCaseClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprCaseClause__Group__0__Impl
	rule__ExprCaseClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprCaseClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprCaseClauseAccess().getExprSwitchCaseParserRuleCall_0()); }
	ruleexprSwitchCase
	{ after(grammarAccess.getExprCaseClauseAccess().getExprSwitchCaseParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprCaseClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprCaseClause__Group__1__Impl
	rule__ExprCaseClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprCaseClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprCaseClauseAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getExprCaseClauseAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprCaseClause__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprCaseClause__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprCaseClause__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprCaseClauseAccess().getStatementListParserRuleCall_2()); }
	rulestatementList
	{ after(grammarAccess.getExprCaseClauseAccess().getStatementListParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprSwitchCase__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSwitchCase__Group_0__0__Impl
	rule__ExprSwitchCase__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSwitchCase__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSwitchCaseAccess().getCaseKeyword_0_0()); }
	'case'
	{ after(grammarAccess.getExprSwitchCaseAccess().getCaseKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSwitchCase__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSwitchCase__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSwitchCase__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSwitchCaseAccess().getExpressionListParserRuleCall_0_1()); }
	ruleexpressionList
	{ after(grammarAccess.getExprSwitchCaseAccess().getExpressionListParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeSwitchStmt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeSwitchStmt__Group__0__Impl
	rule__TypeSwitchStmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSwitchStmt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeSwitchStmtAccess().getSwitchKeyword_0()); }
	'switch'
	{ after(grammarAccess.getTypeSwitchStmtAccess().getSwitchKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSwitchStmt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeSwitchStmt__Group__1__Impl
	rule__TypeSwitchStmt__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSwitchStmt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeSwitchStmtAccess().getGroup_1()); }
	(rule__TypeSwitchStmt__Group_1__0)?
	{ after(grammarAccess.getTypeSwitchStmtAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSwitchStmt__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeSwitchStmt__Group__2__Impl
	rule__TypeSwitchStmt__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSwitchStmt__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeSwitchStmtAccess().getTypeSwitchGuardParserRuleCall_2()); }
	ruletypeSwitchGuard
	{ after(grammarAccess.getTypeSwitchStmtAccess().getTypeSwitchGuardParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSwitchStmt__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeSwitchStmt__Group__3__Impl
	rule__TypeSwitchStmt__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSwitchStmt__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeSwitchStmtAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getTypeSwitchStmtAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSwitchStmt__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeSwitchStmt__Group__4__Impl
	rule__TypeSwitchStmt__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSwitchStmt__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeSwitchStmtAccess().getTypeCaseClauseParserRuleCall_4()); }
	(ruletypeCaseClause)*
	{ after(grammarAccess.getTypeSwitchStmtAccess().getTypeCaseClauseParserRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSwitchStmt__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeSwitchStmt__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSwitchStmt__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeSwitchStmtAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getTypeSwitchStmtAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeSwitchStmt__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeSwitchStmt__Group_1__0__Impl
	rule__TypeSwitchStmt__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSwitchStmt__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeSwitchStmtAccess().getSimpleStmtParserRuleCall_1_0()); }
	rulesimpleStmt
	{ after(grammarAccess.getTypeSwitchStmtAccess().getSimpleStmtParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSwitchStmt__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeSwitchStmt__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSwitchStmt__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeSwitchStmtAccess().getSemicolonKeyword_1_1()); }
	';'
	{ after(grammarAccess.getTypeSwitchStmtAccess().getSemicolonKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeSwitchGuard__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeSwitchGuard__Group__0__Impl
	rule__TypeSwitchGuard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSwitchGuard__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeSwitchGuardAccess().getGroup_0()); }
	(rule__TypeSwitchGuard__Group_0__0)?
	{ after(grammarAccess.getTypeSwitchGuardAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSwitchGuard__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeSwitchGuard__Group__1__Impl
	rule__TypeSwitchGuard__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSwitchGuard__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeSwitchGuardAccess().getPrimaryExprParserRuleCall_1()); }
	ruleprimaryExpr
	{ after(grammarAccess.getTypeSwitchGuardAccess().getPrimaryExprParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSwitchGuard__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeSwitchGuard__Group__2__Impl
	rule__TypeSwitchGuard__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSwitchGuard__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeSwitchGuardAccess().getFullStopKeyword_2()); }
	'.'
	{ after(grammarAccess.getTypeSwitchGuardAccess().getFullStopKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSwitchGuard__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeSwitchGuard__Group__3__Impl
	rule__TypeSwitchGuard__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSwitchGuard__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeSwitchGuardAccess().getLeftParenthesisKeyword_3()); }
	'('
	{ after(grammarAccess.getTypeSwitchGuardAccess().getLeftParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSwitchGuard__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeSwitchGuard__Group__4__Impl
	rule__TypeSwitchGuard__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSwitchGuard__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeSwitchGuardAccess().getTypeKeyword_4()); }
	'type'
	{ after(grammarAccess.getTypeSwitchGuardAccess().getTypeKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSwitchGuard__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeSwitchGuard__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSwitchGuard__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeSwitchGuardAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getTypeSwitchGuardAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeSwitchGuard__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeSwitchGuard__Group_0__0__Impl
	rule__TypeSwitchGuard__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSwitchGuard__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeSwitchGuardAccess().getIDENTIFIERTerminalRuleCall_0_0()); }
	RULE_IDENTIFIER
	{ after(grammarAccess.getTypeSwitchGuardAccess().getIDENTIFIERTerminalRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSwitchGuard__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeSwitchGuard__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSwitchGuard__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeSwitchGuardAccess().getColonEqualsSignKeyword_0_1()); }
	':='
	{ after(grammarAccess.getTypeSwitchGuardAccess().getColonEqualsSignKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeCaseClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeCaseClause__Group__0__Impl
	rule__TypeCaseClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeCaseClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeCaseClauseAccess().getTypeSwitchCaseParserRuleCall_0()); }
	ruletypeSwitchCase
	{ after(grammarAccess.getTypeCaseClauseAccess().getTypeSwitchCaseParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeCaseClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeCaseClause__Group__1__Impl
	rule__TypeCaseClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeCaseClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeCaseClauseAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getTypeCaseClauseAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeCaseClause__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeCaseClause__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeCaseClause__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeCaseClauseAccess().getStatementListParserRuleCall_2()); }
	rulestatementList
	{ after(grammarAccess.getTypeCaseClauseAccess().getStatementListParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeSwitchCase__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeSwitchCase__Group_0__0__Impl
	rule__TypeSwitchCase__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSwitchCase__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeSwitchCaseAccess().getCaseKeyword_0_0()); }
	'case'
	{ after(grammarAccess.getTypeSwitchCaseAccess().getCaseKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSwitchCase__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeSwitchCase__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSwitchCase__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeSwitchCaseAccess().getTypeListParserRuleCall_0_1()); }
	ruletypeList
	{ after(grammarAccess.getTypeSwitchCaseAccess().getTypeListParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeList__Group__0__Impl
	rule__TypeList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeListAccess().getTypeParserRuleCall_0()); }
	ruletype
	{ after(grammarAccess.getTypeListAccess().getTypeParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeListAccess().getGroup_1()); }
	(rule__TypeList__Group_1__0)*
	{ after(grammarAccess.getTypeListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeList__Group_1__0__Impl
	rule__TypeList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeListAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getTypeListAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeListAccess().getTypeParserRuleCall_1_1()); }
	ruletype
	{ after(grammarAccess.getTypeListAccess().getTypeParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectStmt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStmt__Group__0__Impl
	rule__SelectStmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStmt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStmtAccess().getSelectKeyword_0()); }
	'select'
	{ after(grammarAccess.getSelectStmtAccess().getSelectKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStmt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStmt__Group__1__Impl
	rule__SelectStmt__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStmt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStmtAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getSelectStmtAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStmt__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStmt__Group__2__Impl
	rule__SelectStmt__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStmt__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStmtAccess().getCommClauseParserRuleCall_2()); }
	(rulecommClause)*
	{ after(grammarAccess.getSelectStmtAccess().getCommClauseParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStmt__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStmt__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStmt__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStmtAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getSelectStmtAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CommClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommClause__Group__0__Impl
	rule__CommClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CommClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommClauseAccess().getCommCaseParserRuleCall_0()); }
	rulecommCase
	{ after(grammarAccess.getCommClauseAccess().getCommCaseParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommClause__Group__1__Impl
	rule__CommClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CommClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommClauseAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getCommClauseAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommClause__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommClause__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CommClause__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommClauseAccess().getStatementListParserRuleCall_2()); }
	rulestatementList
	{ after(grammarAccess.getCommClauseAccess().getStatementListParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CommCase__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommCase__Group_0__0__Impl
	rule__CommCase__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CommCase__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommCaseAccess().getCaseKeyword_0_0()); }
	'case'
	{ after(grammarAccess.getCommCaseAccess().getCaseKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CommCase__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CommCase__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CommCase__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommCaseAccess().getAlternatives_0_1()); }
	(rule__CommCase__Alternatives_0_1)
	{ after(grammarAccess.getCommCaseAccess().getAlternatives_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RecvStmt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RecvStmt__Group__0__Impl
	rule__RecvStmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RecvStmt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRecvStmtAccess().getAlternatives_0()); }
	(rule__RecvStmt__Alternatives_0)?
	{ after(grammarAccess.getRecvStmtAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RecvStmt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RecvStmt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RecvStmt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRecvStmtAccess().getExpressionParserRuleCall_1()); }
	ruleexpression
	{ after(grammarAccess.getRecvStmtAccess().getExpressionParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RecvStmt__Group_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RecvStmt__Group_0_0__0__Impl
	rule__RecvStmt__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RecvStmt__Group_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRecvStmtAccess().getExpressionListParserRuleCall_0_0_0()); }
	ruleexpressionList
	{ after(grammarAccess.getRecvStmtAccess().getExpressionListParserRuleCall_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RecvStmt__Group_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RecvStmt__Group_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RecvStmt__Group_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRecvStmtAccess().getEqualsSignKeyword_0_0_1()); }
	'='
	{ after(grammarAccess.getRecvStmtAccess().getEqualsSignKeyword_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RecvStmt__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RecvStmt__Group_0_1__0__Impl
	rule__RecvStmt__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RecvStmt__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRecvStmtAccess().getIdentifierListParserRuleCall_0_1_0()); }
	ruleidentifierList
	{ after(grammarAccess.getRecvStmtAccess().getIdentifierListParserRuleCall_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RecvStmt__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RecvStmt__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RecvStmt__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRecvStmtAccess().getColonEqualsSignKeyword_0_1_1()); }
	':='
	{ after(grammarAccess.getRecvStmtAccess().getColonEqualsSignKeyword_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForStmt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStmt__Group__0__Impl
	rule__ForStmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStmt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStmtAccess().getForKeyword_0()); }
	'for'
	{ after(grammarAccess.getForStmtAccess().getForKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStmt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStmt__Group__1__Impl
	rule__ForStmt__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStmt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStmtAccess().getAlternatives_1()); }
	(rule__ForStmt__Alternatives_1)?
	{ after(grammarAccess.getForStmtAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStmt__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStmt__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStmt__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStmtAccess().getBlockParserRuleCall_2()); }
	ruleblock
	{ after(grammarAccess.getForStmtAccess().getBlockParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForClause__Group__0__Impl
	rule__ForClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForClauseAccess().getSimpleStmtParserRuleCall_0()); }
	(rulesimpleStmt)?
	{ after(grammarAccess.getForClauseAccess().getSimpleStmtParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForClause__Group__1__Impl
	rule__ForClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForClauseAccess().getSemicolonKeyword_1()); }
	';'
	{ after(grammarAccess.getForClauseAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForClause__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForClause__Group__2__Impl
	rule__ForClause__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForClause__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForClauseAccess().getExpressionParserRuleCall_2()); }
	(ruleexpression)?
	{ after(grammarAccess.getForClauseAccess().getExpressionParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForClause__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForClause__Group__3__Impl
	rule__ForClause__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForClause__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForClauseAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getForClauseAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForClause__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForClause__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForClause__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForClauseAccess().getSimpleStmtParserRuleCall_4()); }
	(rulesimpleStmt)?
	{ after(grammarAccess.getForClauseAccess().getSimpleStmtParserRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RangeClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeClause__Group__0__Impl
	rule__RangeClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeClauseAccess().getAlternatives_0()); }
	(rule__RangeClause__Alternatives_0)?
	{ after(grammarAccess.getRangeClauseAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeClause__Group__1__Impl
	rule__RangeClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeClauseAccess().getRangeKeyword_1()); }
	'range'
	{ after(grammarAccess.getRangeClauseAccess().getRangeKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeClause__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeClause__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeClause__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeClauseAccess().getExpressionParserRuleCall_2()); }
	ruleexpression
	{ after(grammarAccess.getRangeClauseAccess().getExpressionParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RangeClause__Group_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeClause__Group_0_0__0__Impl
	rule__RangeClause__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeClause__Group_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeClauseAccess().getExpressionListParserRuleCall_0_0_0()); }
	ruleexpressionList
	{ after(grammarAccess.getRangeClauseAccess().getExpressionListParserRuleCall_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeClause__Group_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeClause__Group_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeClause__Group_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeClauseAccess().getEqualsSignKeyword_0_0_1()); }
	'='
	{ after(grammarAccess.getRangeClauseAccess().getEqualsSignKeyword_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RangeClause__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeClause__Group_0_1__0__Impl
	rule__RangeClause__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeClause__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeClauseAccess().getIdentifierListParserRuleCall_0_1_0()); }
	ruleidentifierList
	{ after(grammarAccess.getRangeClauseAccess().getIdentifierListParserRuleCall_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeClause__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeClause__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeClause__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeClauseAccess().getColonEqualsSignKeyword_0_1_1()); }
	':='
	{ after(grammarAccess.getRangeClauseAccess().getColonEqualsSignKeyword_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GoStmt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GoStmt__Group__0__Impl
	rule__GoStmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GoStmt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoStmtAccess().getGoKeyword_0()); }
	'go'
	{ after(grammarAccess.getGoStmtAccess().getGoKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GoStmt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GoStmt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GoStmt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoStmtAccess().getExpressionParserRuleCall_1()); }
	ruleexpression
	{ after(grammarAccess.getGoStmtAccess().getExpressionParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type__Group_2__0__Impl
	rule__Type__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAccess().getLeftParenthesisKeyword_2_0()); }
	'('
	{ after(grammarAccess.getTypeAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type__Group_2__1__Impl
	rule__Type__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAccess().getTypeParserRuleCall_2_1()); }
	ruletype
	{ after(grammarAccess.getTypeAccess().getTypeParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAccess().getRightParenthesisKeyword_2_2()); }
	')'
	{ after(grammarAccess.getTypeAccess().getRightParenthesisKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayType__Group__0__Impl
	rule__ArrayType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayTypeAccess().getLeftSquareBracketKeyword_0()); }
	'['
	{ after(grammarAccess.getArrayTypeAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayType__Group__1__Impl
	rule__ArrayType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayTypeAccess().getArrayLengthParserRuleCall_1()); }
	rulearrayLength
	{ after(grammarAccess.getArrayTypeAccess().getArrayLengthParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayType__Group__2__Impl
	rule__ArrayType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayTypeAccess().getRightSquareBracketKeyword_2()); }
	']'
	{ after(grammarAccess.getArrayTypeAccess().getRightSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayType__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayType__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayTypeAccess().getElementTypeParserRuleCall_3()); }
	ruleelementType
	{ after(grammarAccess.getArrayTypeAccess().getElementTypeParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PointerType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PointerType__Group__0__Impl
	rule__PointerType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PointerType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPointerTypeAccess().getAsteriskKeyword_0()); }
	'*'
	{ after(grammarAccess.getPointerTypeAccess().getAsteriskKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PointerType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PointerType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PointerType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPointerTypeAccess().getTypeParserRuleCall_1()); }
	ruletype
	{ after(grammarAccess.getPointerTypeAccess().getTypeParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InterfaceType__Group__0__Impl
	rule__InterfaceType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInterfaceTypeAccess().getInterfaceKeyword_0()); }
	'interface'
	{ after(grammarAccess.getInterfaceTypeAccess().getInterfaceKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InterfaceType__Group__1__Impl
	rule__InterfaceType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInterfaceTypeAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getInterfaceTypeAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceType__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InterfaceType__Group__2__Impl
	rule__InterfaceType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceType__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInterfaceTypeAccess().getGroup_2()); }
	(rule__InterfaceType__Group_2__0)*
	{ after(grammarAccess.getInterfaceTypeAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceType__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InterfaceType__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceType__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInterfaceTypeAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getInterfaceTypeAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceType__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InterfaceType__Group_2__0__Impl
	rule__InterfaceType__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceType__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInterfaceTypeAccess().getMethodSpecParserRuleCall_2_0()); }
	rulemethodSpec
	{ after(grammarAccess.getInterfaceTypeAccess().getMethodSpecParserRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceType__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InterfaceType__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceType__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInterfaceTypeAccess().getEosParserRuleCall_2_1()); }
	ruleeos
	{ after(grammarAccess.getInterfaceTypeAccess().getEosParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SliceType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SliceType__Group__0__Impl
	rule__SliceType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SliceType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSliceTypeAccess().getLeftSquareBracketKeyword_0()); }
	'['
	{ after(grammarAccess.getSliceTypeAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SliceType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SliceType__Group__1__Impl
	rule__SliceType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SliceType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSliceTypeAccess().getRightSquareBracketKeyword_1()); }
	']'
	{ after(grammarAccess.getSliceTypeAccess().getRightSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SliceType__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SliceType__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SliceType__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSliceTypeAccess().getElementTypeParserRuleCall_2()); }
	ruleelementType
	{ after(grammarAccess.getSliceTypeAccess().getElementTypeParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MapType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapType__Group__0__Impl
	rule__MapType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapTypeAccess().getMapKeyword_0()); }
	'map'
	{ after(grammarAccess.getMapTypeAccess().getMapKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapType__Group__1__Impl
	rule__MapType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapTypeAccess().getLeftSquareBracketKeyword_1()); }
	'['
	{ after(grammarAccess.getMapTypeAccess().getLeftSquareBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapType__Group__2__Impl
	rule__MapType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapTypeAccess().getTypeParserRuleCall_2()); }
	ruletype
	{ after(grammarAccess.getMapTypeAccess().getTypeParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapType__Group__3__Impl
	rule__MapType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapTypeAccess().getRightSquareBracketKeyword_3()); }
	']'
	{ after(grammarAccess.getMapTypeAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapType__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapTypeAccess().getElementTypeParserRuleCall_4()); }
	ruleelementType
	{ after(grammarAccess.getMapTypeAccess().getElementTypeParserRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ChannelType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ChannelType__Group__0__Impl
	rule__ChannelType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChannelTypeAccess().getAlternatives_0()); }
	(rule__ChannelType__Alternatives_0)
	{ after(grammarAccess.getChannelTypeAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ChannelType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChannelTypeAccess().getElementTypeParserRuleCall_1()); }
	ruleelementType
	{ after(grammarAccess.getChannelTypeAccess().getElementTypeParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ChannelType__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ChannelType__Group_0_1__0__Impl
	rule__ChannelType__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelType__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChannelTypeAccess().getChanKeyword_0_1_0()); }
	'chan'
	{ after(grammarAccess.getChannelTypeAccess().getChanKeyword_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelType__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ChannelType__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelType__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChannelTypeAccess().getLessThanSignHyphenMinusKeyword_0_1_1()); }
	'<-'
	{ after(grammarAccess.getChannelTypeAccess().getLessThanSignHyphenMinusKeyword_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ChannelType__Group_0_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ChannelType__Group_0_2__0__Impl
	rule__ChannelType__Group_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelType__Group_0_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChannelTypeAccess().getLessThanSignHyphenMinusKeyword_0_2_0()); }
	'<-'
	{ after(grammarAccess.getChannelTypeAccess().getLessThanSignHyphenMinusKeyword_0_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelType__Group_0_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ChannelType__Group_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelType__Group_0_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChannelTypeAccess().getChanKeyword_0_2_1()); }
	'chan'
	{ after(grammarAccess.getChannelTypeAccess().getChanKeyword_0_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MethodSpec__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodSpec__Group_0__0__Impl
	rule__MethodSpec__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodSpec__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodSpecAccess().getIDENTIFIERTerminalRuleCall_0_0()); }
	RULE_IDENTIFIER
	{ after(grammarAccess.getMethodSpecAccess().getIDENTIFIERTerminalRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodSpec__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodSpec__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodSpec__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodSpecAccess().getSignatureParserRuleCall_0_1()); }
	rulesignature
	{ after(grammarAccess.getMethodSpecAccess().getSignatureParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionType__Group__0__Impl
	rule__FunctionType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionTypeAccess().getFuncKeyword_0()); }
	'func'
	{ after(grammarAccess.getFunctionTypeAccess().getFuncKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionTypeAccess().getSignatureParserRuleCall_1()); }
	rulesignature
	{ after(grammarAccess.getFunctionTypeAccess().getSignatureParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Signature__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Signature__Group__0__Impl
	rule__Signature__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signature__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSignatureAccess().getParametersParserRuleCall_0()); }
	ruleparameters
	{ after(grammarAccess.getSignatureAccess().getParametersParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Signature__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Signature__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signature__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSignatureAccess().getResultParserRuleCall_1()); }
	(ruleresult)?
	{ after(grammarAccess.getSignatureAccess().getResultParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parameters__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameters__Group__0__Impl
	rule__Parameters__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametersAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getParametersAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameters__Group__1__Impl
	rule__Parameters__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametersAccess().getGroup_1()); }
	(rule__Parameters__Group_1__0)?
	{ after(grammarAccess.getParametersAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameters__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametersAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getParametersAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parameters__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameters__Group_1__0__Impl
	rule__Parameters__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametersAccess().getParameterListParserRuleCall_1_0()); }
	ruleparameterList
	{ after(grammarAccess.getParametersAccess().getParameterListParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameters__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametersAccess().getCommaKeyword_1_1()); }
	(',')?
	{ after(grammarAccess.getParametersAccess().getCommaKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group__0__Impl
	rule__ParameterList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getParameterDeclParserRuleCall_0()); }
	ruleparameterDecl
	{ after(grammarAccess.getParameterListAccess().getParameterDeclParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getGroup_1()); }
	(rule__ParameterList__Group_1__0)*
	{ after(grammarAccess.getParameterListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group_1__0__Impl
	rule__ParameterList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getParameterListAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getParameterDeclParserRuleCall_1_1()); }
	ruleparameterDecl
	{ after(grammarAccess.getParameterListAccess().getParameterDeclParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDecl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterDecl__Group__0__Impl
	rule__ParameterDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDecl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterDeclAccess().getIdentifierListParserRuleCall_0()); }
	(ruleidentifierList)?
	{ after(grammarAccess.getParameterDeclAccess().getIdentifierListParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDecl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterDecl__Group__1__Impl
	rule__ParameterDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDecl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterDeclAccess().getFullStopFullStopFullStopKeyword_1()); }
	('...')?
	{ after(grammarAccess.getParameterDeclAccess().getFullStopFullStopFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDecl__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterDecl__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDecl__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterDeclAccess().getTypeParserRuleCall_2()); }
	ruletype
	{ after(grammarAccess.getParameterDeclAccess().getTypeParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Operand__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operand__Group_3__0__Impl
	rule__Operand__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperandAccess().getLeftParenthesisKeyword_3_0()); }
	'('
	{ after(grammarAccess.getOperandAccess().getLeftParenthesisKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operand__Group_3__1__Impl
	rule__Operand__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperandAccess().getExpressionParserRuleCall_3_1()); }
	ruleexpression
	{ after(grammarAccess.getOperandAccess().getExpressionParserRuleCall_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operand__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperandAccess().getRightParenthesisKeyword_3_2()); }
	')'
	{ after(grammarAccess.getOperandAccess().getRightParenthesisKeyword_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedIdent__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedIdent__Group__0__Impl
	rule__QualifiedIdent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedIdent__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedIdentAccess().getIDENTIFIERTerminalRuleCall_0()); }
	RULE_IDENTIFIER
	{ after(grammarAccess.getQualifiedIdentAccess().getIDENTIFIERTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedIdent__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedIdent__Group__1__Impl
	rule__QualifiedIdent__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedIdent__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedIdentAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getQualifiedIdentAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedIdent__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedIdent__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedIdent__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedIdentAccess().getIDENTIFIERTerminalRuleCall_2()); }
	RULE_IDENTIFIER
	{ after(grammarAccess.getQualifiedIdentAccess().getIDENTIFIERTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CompositeLit__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompositeLit__Group__0__Impl
	rule__CompositeLit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeLit__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositeLitAccess().getLiteralTypeParserRuleCall_0()); }
	ruleliteralType
	{ after(grammarAccess.getCompositeLitAccess().getLiteralTypeParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeLit__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompositeLit__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeLit__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositeLitAccess().getLiteralValueParserRuleCall_1()); }
	ruleliteralValue
	{ after(grammarAccess.getCompositeLitAccess().getLiteralValueParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralType__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralType__Group_2__0__Impl
	rule__LiteralType__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralType__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralTypeAccess().getLeftSquareBracketKeyword_2_0()); }
	'['
	{ after(grammarAccess.getLiteralTypeAccess().getLeftSquareBracketKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralType__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralType__Group_2__1__Impl
	rule__LiteralType__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralType__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralTypeAccess().getFullStopFullStopFullStopKeyword_2_1()); }
	'...'
	{ after(grammarAccess.getLiteralTypeAccess().getFullStopFullStopFullStopKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralType__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralType__Group_2__2__Impl
	rule__LiteralType__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralType__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralTypeAccess().getRightSquareBracketKeyword_2_2()); }
	']'
	{ after(grammarAccess.getLiteralTypeAccess().getRightSquareBracketKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralType__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralType__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralType__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralTypeAccess().getElementTypeParserRuleCall_2_3()); }
	ruleelementType
	{ after(grammarAccess.getLiteralTypeAccess().getElementTypeParserRuleCall_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralValue__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralValue__Group__0__Impl
	rule__LiteralValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralValue__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralValueAccess().getLeftCurlyBracketKeyword_0()); }
	'{'
	{ after(grammarAccess.getLiteralValueAccess().getLeftCurlyBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralValue__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralValue__Group__1__Impl
	rule__LiteralValue__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralValue__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralValueAccess().getGroup_1()); }
	(rule__LiteralValue__Group_1__0)?
	{ after(grammarAccess.getLiteralValueAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralValue__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralValue__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralValue__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralValueAccess().getRightCurlyBracketKeyword_2()); }
	'}'
	{ after(grammarAccess.getLiteralValueAccess().getRightCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralValue__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralValue__Group_1__0__Impl
	rule__LiteralValue__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralValue__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralValueAccess().getElementListParserRuleCall_1_0()); }
	ruleelementList
	{ after(grammarAccess.getLiteralValueAccess().getElementListParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralValue__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralValue__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralValue__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralValueAccess().getCommaKeyword_1_1()); }
	(',')?
	{ after(grammarAccess.getLiteralValueAccess().getCommaKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ElementList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElementList__Group__0__Impl
	rule__ElementList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementListAccess().getKeyedElementParserRuleCall_0()); }
	rulekeyedElement
	{ after(grammarAccess.getElementListAccess().getKeyedElementParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElementList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementListAccess().getGroup_1()); }
	(rule__ElementList__Group_1__0)*
	{ after(grammarAccess.getElementListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ElementList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElementList__Group_1__0__Impl
	rule__ElementList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementListAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getElementListAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElementList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementListAccess().getKeyedElementParserRuleCall_1_1()); }
	rulekeyedElement
	{ after(grammarAccess.getElementListAccess().getKeyedElementParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__KeyedElement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__KeyedElement__Group__0__Impl
	rule__KeyedElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyedElement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeyedElementAccess().getGroup_0()); }
	(rule__KeyedElement__Group_0__0)?
	{ after(grammarAccess.getKeyedElementAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyedElement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__KeyedElement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyedElement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeyedElementAccess().getElementParserRuleCall_1()); }
	ruleelement
	{ after(grammarAccess.getKeyedElementAccess().getElementParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__KeyedElement__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__KeyedElement__Group_0__0__Impl
	rule__KeyedElement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyedElement__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeyedElementAccess().getKeyParserRuleCall_0_0()); }
	rulekey
	{ after(grammarAccess.getKeyedElementAccess().getKeyParserRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyedElement__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__KeyedElement__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyedElement__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeyedElementAccess().getColonKeyword_0_1()); }
	':'
	{ after(grammarAccess.getKeyedElementAccess().getColonKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StructType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StructType__Group__0__Impl
	rule__StructType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StructType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructTypeAccess().getStructKeyword_0()); }
	'struct'
	{ after(grammarAccess.getStructTypeAccess().getStructKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StructType__Group__1__Impl
	rule__StructType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StructType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructTypeAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getStructTypeAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructType__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StructType__Group__2__Impl
	rule__StructType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StructType__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructTypeAccess().getGroup_2()); }
	(rule__StructType__Group_2__0)*
	{ after(grammarAccess.getStructTypeAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructType__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StructType__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StructType__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructTypeAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getStructTypeAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StructType__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StructType__Group_2__0__Impl
	rule__StructType__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StructType__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructTypeAccess().getFieldDeclParserRuleCall_2_0()); }
	rulefieldDecl
	{ after(grammarAccess.getStructTypeAccess().getFieldDeclParserRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StructType__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StructType__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StructType__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructTypeAccess().getEosParserRuleCall_2_1()); }
	ruleeos
	{ after(grammarAccess.getStructTypeAccess().getEosParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FieldDecl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FieldDecl__Group__0__Impl
	rule__FieldDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDecl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldDeclAccess().getAlternatives_0()); }
	(rule__FieldDecl__Alternatives_0)
	{ after(grammarAccess.getFieldDeclAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDecl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FieldDecl__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDecl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldDeclAccess().getSTRING_LITTerminalRuleCall_1()); }
	(RULE_STRING_LIT)?
	{ after(grammarAccess.getFieldDeclAccess().getSTRING_LITTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FieldDecl__Group_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FieldDecl__Group_0_0__0__Impl
	rule__FieldDecl__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDecl__Group_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldDeclAccess().getIdentifierListParserRuleCall_0_0_0()); }
	ruleidentifierList
	{ after(grammarAccess.getFieldDeclAccess().getIdentifierListParserRuleCall_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDecl__Group_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FieldDecl__Group_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDecl__Group_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldDeclAccess().getTypeParserRuleCall_0_0_1()); }
	ruletype
	{ after(grammarAccess.getFieldDeclAccess().getTypeParserRuleCall_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AnonymousField__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AnonymousField__Group__0__Impl
	rule__AnonymousField__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnonymousField__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnonymousFieldAccess().getAsteriskKeyword_0()); }
	('*')?
	{ after(grammarAccess.getAnonymousFieldAccess().getAsteriskKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnonymousField__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AnonymousField__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnonymousField__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnonymousFieldAccess().getTypeNameParserRuleCall_1()); }
	ruletypeName
	{ after(grammarAccess.getAnonymousFieldAccess().getTypeNameParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionLit__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionLit__Group__0__Impl
	rule__FunctionLit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionLit__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionLitAccess().getFuncKeyword_0()); }
	'func'
	{ after(grammarAccess.getFunctionLitAccess().getFuncKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionLit__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionLit__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionLit__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionLitAccess().getFunctionParserRuleCall_1()); }
	rulefunction
	{ after(grammarAccess.getFunctionLitAccess().getFunctionParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExprSelector__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExprSelector__Group__0__Impl
	rule__PrimaryExprSelector__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExprSelector__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExprSelectorAccess().getPrimaryExprStuffParserRuleCall_0()); }
	ruleprimaryExprStuff
	{ after(grammarAccess.getPrimaryExprSelectorAccess().getPrimaryExprStuffParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExprSelector__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExprSelector__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExprSelector__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExprSelectorAccess().getPrimaryExprSelectorParserRuleCall_1()); }
	ruleprimaryExprSelector
	{ after(grammarAccess.getPrimaryExprSelectorAccess().getPrimaryExprSelectorParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExprIndex__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExprIndex__Group__0__Impl
	rule__PrimaryExprIndex__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExprIndex__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExprIndexAccess().getPrimaryExprStuffParserRuleCall_0()); }
	ruleprimaryExprStuff
	{ after(grammarAccess.getPrimaryExprIndexAccess().getPrimaryExprStuffParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExprIndex__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExprIndex__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExprIndex__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExprIndexAccess().getPrimaryExprIndexParserRuleCall_1()); }
	ruleprimaryExprIndex
	{ after(grammarAccess.getPrimaryExprIndexAccess().getPrimaryExprIndexParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExprSlice__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExprSlice__Group__0__Impl
	rule__PrimaryExprSlice__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExprSlice__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExprSliceAccess().getPrimaryExprStuffParserRuleCall_0()); }
	ruleprimaryExprStuff
	{ after(grammarAccess.getPrimaryExprSliceAccess().getPrimaryExprStuffParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExprSlice__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExprSlice__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExprSlice__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExprSliceAccess().getPrimaryExprSliceParserRuleCall_1()); }
	ruleprimaryExprSlice
	{ after(grammarAccess.getPrimaryExprSliceAccess().getPrimaryExprSliceParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExprTypeAssertion__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExprTypeAssertion__Group__0__Impl
	rule__PrimaryExprTypeAssertion__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExprTypeAssertion__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExprTypeAssertionAccess().getPrimaryExprStuffParserRuleCall_0()); }
	ruleprimaryExprStuff
	{ after(grammarAccess.getPrimaryExprTypeAssertionAccess().getPrimaryExprStuffParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExprTypeAssertion__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExprTypeAssertion__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExprTypeAssertion__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExprTypeAssertionAccess().getPrimaryExprTypeAssertionParserRuleCall_1()); }
	ruleprimaryExprTypeAssertion
	{ after(grammarAccess.getPrimaryExprTypeAssertionAccess().getPrimaryExprTypeAssertionParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExprArguments__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExprArguments__Group__0__Impl
	rule__PrimaryExprArguments__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExprArguments__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExprArgumentsAccess().getPrimaryExprStuffParserRuleCall_0()); }
	ruleprimaryExprStuff
	{ after(grammarAccess.getPrimaryExprArgumentsAccess().getPrimaryExprStuffParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExprArguments__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExprArguments__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExprArguments__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExprArgumentsAccess().getPrimaryExprArgumentsParserRuleCall_1()); }
	ruleprimaryExprArguments
	{ after(grammarAccess.getPrimaryExprArgumentsAccess().getPrimaryExprArgumentsParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Selector__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selector__Group__0__Impl
	rule__Selector__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorAccess().getFullStopKeyword_0()); }
	'.'
	{ after(grammarAccess.getSelectorAccess().getFullStopKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Selector__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectorAccess().getIDENTIFIERTerminalRuleCall_1()); }
	RULE_IDENTIFIER
	{ after(grammarAccess.getSelectorAccess().getIDENTIFIERTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Index__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Index__Group__0__Impl
	rule__Index__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Index__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexAccess().getLeftSquareBracketKeyword_0()); }
	'['
	{ after(grammarAccess.getIndexAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Index__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Index__Group__1__Impl
	rule__Index__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Index__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexAccess().getExpressionParserRuleCall_1()); }
	ruleexpression
	{ after(grammarAccess.getIndexAccess().getExpressionParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Index__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Index__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Index__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIndexAccess().getRightSquareBracketKeyword_2()); }
	']'
	{ after(grammarAccess.getIndexAccess().getRightSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Slice__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Slice__Group__0__Impl
	rule__Slice__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Slice__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSliceAccess().getLeftSquareBracketKeyword_0()); }
	'['
	{ after(grammarAccess.getSliceAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Slice__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Slice__Group__1__Impl
	rule__Slice__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Slice__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSliceAccess().getAlternatives_1()); }
	(rule__Slice__Alternatives_1)
	{ after(grammarAccess.getSliceAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Slice__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Slice__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Slice__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSliceAccess().getRightSquareBracketKeyword_2()); }
	']'
	{ after(grammarAccess.getSliceAccess().getRightSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Slice__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Slice__Group_1_0__0__Impl
	rule__Slice__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Slice__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSliceAccess().getExpressionParserRuleCall_1_0_0()); }
	(ruleexpression)?
	{ after(grammarAccess.getSliceAccess().getExpressionParserRuleCall_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Slice__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Slice__Group_1_0__1__Impl
	rule__Slice__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Slice__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSliceAccess().getColonKeyword_1_0_1()); }
	':'
	{ after(grammarAccess.getSliceAccess().getColonKeyword_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Slice__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Slice__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Slice__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSliceAccess().getExpressionParserRuleCall_1_0_2()); }
	(ruleexpression)?
	{ after(grammarAccess.getSliceAccess().getExpressionParserRuleCall_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Slice__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Slice__Group_1_1__0__Impl
	rule__Slice__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Slice__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSliceAccess().getExpressionParserRuleCall_1_1_0()); }
	(ruleexpression)?
	{ after(grammarAccess.getSliceAccess().getExpressionParserRuleCall_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Slice__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Slice__Group_1_1__1__Impl
	rule__Slice__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Slice__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSliceAccess().getColonKeyword_1_1_1()); }
	':'
	{ after(grammarAccess.getSliceAccess().getColonKeyword_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Slice__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Slice__Group_1_1__2__Impl
	rule__Slice__Group_1_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Slice__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSliceAccess().getExpressionParserRuleCall_1_1_2()); }
	ruleexpression
	{ after(grammarAccess.getSliceAccess().getExpressionParserRuleCall_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Slice__Group_1_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Slice__Group_1_1__3__Impl
	rule__Slice__Group_1_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Slice__Group_1_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSliceAccess().getColonKeyword_1_1_3()); }
	':'
	{ after(grammarAccess.getSliceAccess().getColonKeyword_1_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Slice__Group_1_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Slice__Group_1_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Slice__Group_1_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSliceAccess().getExpressionParserRuleCall_1_1_4()); }
	ruleexpression
	{ after(grammarAccess.getSliceAccess().getExpressionParserRuleCall_1_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeAssertion__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeAssertion__Group__0__Impl
	rule__TypeAssertion__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeAssertion__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAssertionAccess().getFullStopKeyword_0()); }
	'.'
	{ after(grammarAccess.getTypeAssertionAccess().getFullStopKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeAssertion__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeAssertion__Group__1__Impl
	rule__TypeAssertion__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeAssertion__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAssertionAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getTypeAssertionAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeAssertion__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeAssertion__Group__2__Impl
	rule__TypeAssertion__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeAssertion__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAssertionAccess().getTypeParserRuleCall_2()); }
	ruletype
	{ after(grammarAccess.getTypeAssertionAccess().getTypeParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeAssertion__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeAssertion__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeAssertion__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAssertionAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getTypeAssertionAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Arguments__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arguments__Group__0__Impl
	rule__Arguments__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentsAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getArgumentsAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arguments__Group__1__Impl
	rule__Arguments__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentsAccess().getGroup_1()); }
	(rule__Arguments__Group_1__0)?
	{ after(grammarAccess.getArgumentsAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arguments__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentsAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getArgumentsAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Arguments__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arguments__Group_1__0__Impl
	rule__Arguments__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentsAccess().getAlternatives_1_0()); }
	(rule__Arguments__Alternatives_1_0)
	{ after(grammarAccess.getArgumentsAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arguments__Group_1__1__Impl
	rule__Arguments__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentsAccess().getFullStopFullStopFullStopKeyword_1_1()); }
	('...')?
	{ after(grammarAccess.getArgumentsAccess().getFullStopFullStopFullStopKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arguments__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentsAccess().getCommaKeyword_1_2()); }
	(',')?
	{ after(grammarAccess.getArgumentsAccess().getCommaKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Arguments__Group_1_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arguments__Group_1_0_1__0__Impl
	rule__Arguments__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__Group_1_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentsAccess().getTypeParserRuleCall_1_0_1_0()); }
	ruletype
	{ after(grammarAccess.getArgumentsAccess().getTypeParserRuleCall_1_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__Group_1_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arguments__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__Group_1_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentsAccess().getGroup_1_0_1_1()); }
	(rule__Arguments__Group_1_0_1_1__0)?
	{ after(grammarAccess.getArgumentsAccess().getGroup_1_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Arguments__Group_1_0_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arguments__Group_1_0_1_1__0__Impl
	rule__Arguments__Group_1_0_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__Group_1_0_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentsAccess().getCommaKeyword_1_0_1_1_0()); }
	','
	{ after(grammarAccess.getArgumentsAccess().getCommaKeyword_1_0_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__Group_1_0_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Arguments__Group_1_0_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Arguments__Group_1_0_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArgumentsAccess().getExpressionListParserRuleCall_1_0_1_1_1()); }
	ruleexpressionList
	{ after(grammarAccess.getArgumentsAccess().getExpressionListParserRuleCall_1_0_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MethodExpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodExpr__Group__0__Impl
	rule__MethodExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodExpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodExprAccess().getReceiverTypeParserRuleCall_0()); }
	rulereceiverType
	{ after(grammarAccess.getMethodExprAccess().getReceiverTypeParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodExpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodExpr__Group__1__Impl
	rule__MethodExpr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodExpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodExprAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getMethodExprAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodExpr__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodExpr__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodExpr__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodExprAccess().getIDENTIFIERTerminalRuleCall_2()); }
	RULE_IDENTIFIER
	{ after(grammarAccess.getMethodExprAccess().getIDENTIFIERTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ReceiverType__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReceiverType__Group_1__0__Impl
	rule__ReceiverType__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReceiverType__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReceiverTypeAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getReceiverTypeAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReceiverType__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReceiverType__Group_1__1__Impl
	rule__ReceiverType__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReceiverType__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReceiverTypeAccess().getAsteriskKeyword_1_1()); }
	'*'
	{ after(grammarAccess.getReceiverTypeAccess().getAsteriskKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReceiverType__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReceiverType__Group_1__2__Impl
	rule__ReceiverType__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ReceiverType__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReceiverTypeAccess().getTypeNameParserRuleCall_1_2()); }
	ruletypeName
	{ after(grammarAccess.getReceiverTypeAccess().getTypeNameParserRuleCall_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReceiverType__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReceiverType__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReceiverType__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReceiverTypeAccess().getRightParenthesisKeyword_1_3()); }
	')'
	{ after(grammarAccess.getReceiverTypeAccess().getRightParenthesisKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ReceiverType__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReceiverType__Group_2__0__Impl
	rule__ReceiverType__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReceiverType__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReceiverTypeAccess().getLeftParenthesisKeyword_2_0()); }
	'('
	{ after(grammarAccess.getReceiverTypeAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReceiverType__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReceiverType__Group_2__1__Impl
	rule__ReceiverType__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReceiverType__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReceiverTypeAccess().getReceiverTypeParserRuleCall_2_1()); }
	rulereceiverType
	{ after(grammarAccess.getReceiverTypeAccess().getReceiverTypeParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReceiverType__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReceiverType__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReceiverType__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReceiverTypeAccess().getRightParenthesisKeyword_2_2()); }
	')'
	{ after(grammarAccess.getReceiverTypeAccess().getRightParenthesisKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getUnaryExprParserRuleCall_0()); }
	ruleunaryExpr
	{ after(grammarAccess.getExpressionAccess().getUnaryExprParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getExpressionMatchedParserRuleCall_1()); }
	ruleexpressionMatched
	{ after(grammarAccess.getExpressionAccess().getExpressionMatchedParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionMatched__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionMatched__Group__0__Impl
	rule__ExpressionMatched__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionMatched__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionMatchedAccess().getBINARY_OPTerminalRuleCall_0()); }
	RULE_BINARY_OP
	{ after(grammarAccess.getExpressionMatchedAccess().getBINARY_OPTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionMatched__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpressionMatched__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionMatched__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionMatchedAccess().getExpressionParserRuleCall_1()); }
	ruleexpression
	{ after(grammarAccess.getExpressionMatchedAccess().getExpressionParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpr__Group_1__0__Impl
	rule__UnaryExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExprAccess().getAlternatives_1_0()); }
	(rule__UnaryExpr__Alternatives_1_0)
	{ after(grammarAccess.getUnaryExprAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpr__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExprAccess().getUnaryExprParserRuleCall_1_1()); }
	ruleunaryExpr
	{ after(grammarAccess.getUnaryExprAccess().getUnaryExprParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Conversion__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conversion__Group__0__Impl
	rule__Conversion__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conversion__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConversionAccess().getTypeParserRuleCall_0()); }
	ruletype
	{ after(grammarAccess.getConversionAccess().getTypeParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conversion__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conversion__Group__1__Impl
	rule__Conversion__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Conversion__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConversionAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getConversionAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conversion__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conversion__Group__2__Impl
	rule__Conversion__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Conversion__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConversionAccess().getExpressionParserRuleCall_2()); }
	ruleexpression
	{ after(grammarAccess.getConversionAccess().getExpressionParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conversion__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conversion__Group__3__Impl
	rule__Conversion__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Conversion__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConversionAccess().getCommaKeyword_3()); }
	(',')?
	{ after(grammarAccess.getConversionAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conversion__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conversion__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conversion__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConversionAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getConversionAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__GreetingsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getGreetingsSourceFileParserRuleCall_0()); }
		rulesourceFile
		{ after(grammarAccess.getModelAccess().getGreetingsSourceFileParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_IDENTIFIER : RULE_LETTER (RULE_LETTER|RULE_UNICODE_DIGIT)*;

RULE_BINARY_OP : ('||'|'&&'|RULE_REL_OP|RULE_ADD_OP|RULE_MUL_OP);

fragment RULE_REL_OP : ('=='|'!='|'<'|'<='|'>'|'>=');

fragment RULE_ADD_OP : ('+'|'-'|'|'|'^');

fragment RULE_MUL_OP : ('*'|'/'|'%'|'<<'|'>>'|'&'|'&^');

fragment RULE_UNARY_OP : ('+'|'-'|'!'|'^'|'*'|'&'|'<-');

RULE_INT_LIT : (RULE_DECIMAL_LIT|RULE_OCTAL_LIT|RULE_HEX_LIT);

fragment RULE_DECIMAL_LIT : '1'..'9' RULE_DECIMAL_DIGIT*;

fragment RULE_OCTAL_LIT : '0' RULE_OCTAL_DIGIT*;

fragment RULE_HEX_LIT : '0' ('X'|'x') RULE_HEX_DIGIT+;

RULE_FLOAT_LIT : (RULE_DECIMALS '.' RULE_DECIMALS? RULE_EXPONENT?|RULE_DECIMALS RULE_EXPONENT|'.' RULE_DECIMALS RULE_EXPONENT?);

fragment RULE_DECIMALS : RULE_DECIMAL_DIGIT+;

fragment RULE_EXPONENT : ('e'|'E') ('+'|'-')? RULE_DECIMALS;

RULE_IMAGINARY_LIT : (RULE_DECIMALS|RULE_FLOAT_LIT) 'i';

RULE_RUNE_LIT : '\'' (RULE_UNICODE_VALUE|RULE_BYTE_VALUE) '\'';

fragment RULE_UNICODE_VALUE : (RULE_UNICODE_CHAR|RULE_LITTLE_U_VALUE|RULE_BIG_U_VALUE|RULE_ESCAPED_CHAR);

fragment RULE_BYTE_VALUE : (RULE_OCTAL_BYTE_VALUE|RULE_HEX_BYTE_VALUE);

fragment RULE_OCTAL_BYTE_VALUE : '\\' RULE_OCTAL_DIGIT RULE_OCTAL_DIGIT RULE_OCTAL_DIGIT;

fragment RULE_HEX_BYTE_VALUE : '\\x' RULE_HEX_DIGIT RULE_HEX_DIGIT;

fragment RULE_LITTLE_U_VALUE : '\\u' RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT;

fragment RULE_BIG_U_VALUE : '\\U' RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT RULE_HEX_DIGIT;

fragment RULE_ESCAPED_CHAR : '\\' ('a'|'b'|'f'|'n'|'r'|'t'|'v'|'\\'|'\''|'"');

RULE_STRING_LIT : (RULE_RAW_STRING_LIT|RULE_INTERPRETED_STRING_LIT);

fragment RULE_RAW_STRING_LIT : '\'' (RULE_UNICODE_CHAR|RULE_NEWLINE)* '\'';

fragment RULE_INTERPRETED_STRING_LIT : '"' (RULE_UNICODE_VALUE|RULE_BYTE_VALUE)* '"';

fragment RULE_LETTER : (RULE_UNICODE_LETTER|'_');

fragment RULE_DECIMAL_DIGIT : '0'..'9';

fragment RULE_OCTAL_DIGIT : '0'..'7';

fragment RULE_HEX_DIGIT : ('0'..'9'|'A'..'F'|'a'..'f');

fragment RULE_NEWLINE : '\n';

fragment RULE_UNICODE_CHAR : ('A'..'Z'|'a'..'z');

fragment RULE_UNICODE_DIGIT : ('0..9'|'\u0660..\u0669'|'\u06F0..\u06F9'|'\u0966..\u096F'|'\u09E6..\u09EF'|'\u0A66..\u0A6F'|'\u0AE6..\u0AEF'|'\u0B66..\u0B6F'|'\u0BE7..\u0BEF'|'\u0C66..\u0C6F'|'\u0CE6..\u0CEF'|'\u0D66..\u0D6F'|'\u0E50..\u0E59'|'\u0ED0..\u0ED9'|'\u0F20..\u0F29'|'\u1040..\u1049'|'\u1369..\u1371'|'\u17E0..\u17E9'|'\u1810..\u1819'|'\uFF10..\uFF19');

fragment RULE_UNICODE_LETTER : ('A..Z'|'a..z'|'\u00AA'|'\u00B5'|'\u00BA'|'\u00C0..\u00D6'|'\u00D8..\u00F6'|'\u00F8..\u021F'|'\u0222..\u0233'|'\u0250..\u02AD'|'\u02B0..\u02B8'|'\u02BB..\u02C1'|'\u02D0..\u02D1'|'\u02E0..\u02E4'|'\u02EE'|'\u037A'|'\u0386'|'\u0388..\u038A'|'\u038C'|'\u038E..\u03A1'|'\u03A3..\u03CE'|'\u03D0..\u03D7'|'\u03DA..\u03F3'|'\u0400..\u0481'|'\u048C..\u04C4'|'\u04C7..\u04C8'|'\u04CB..\u04CC'|'\u04D0..\u04F5'|'\u04F8..\u04F9'|'\u0531..\u0556'|'\u0559'|'\u0561..\u0587'|'\u05D0..\u05EA'|'\u05F0..\u05F2'|'\u0621..\u063A'|'\u0640..\u064A'|'\u0671..\u06D3'|'\u06D5'|'\u06E5..\u06E6'|'\u06FA..\u06FC'|'\u0710'|'\u0712..\u072C'|'\u0780..\u07A5'|'\u0905..\u0939'|'\u093D'|'\u0950'|'\u0958..\u0961'|'\u0985..\u098C'|'\u098F..\u0990'|'\u0993..\u09A8'|'\u09AA..\u09B0'|'\u09B2'|'\u09B6..\u09B9'|'\u09DC..\u09DD'|'\u09DF..\u09E1'|'\u09F0..\u09F1'|'\u0A05..\u0A0A'|'\u0A0F..\u0A10'|'\u0A13..\u0A28'|'\u0A2A..\u0A30'|'\u0A32..\u0A33'|'\u0A35..\u0A36'|'\u0A38..\u0A39'|'\u0A59..\u0A5C'|'\u0A5E'|'\u0A72..\u0A74'|'\u0A85..\u0A8B'|'\u0A8D'|'\u0A8F..\u0A91'|'\u0A93..\u0AA8'|'\u0AAA..\u0AB0'|'\u0AB2..\u0AB3'|'\u0AB5..\u0AB9'|'\u0ABD'|'\u0AD0'|'\u0AE0'|'\u0B05..\u0B0C'|'\u0B0F..\u0B10'|'\u0B13..\u0B28'|'\u0B2A..\u0B30'|'\u0B32..\u0B33'|'\u0B36..\u0B39'|'\u0B3D'|'\u0B5C..\u0B5D'|'\u0B5F..\u0B61'|'\u0B85..\u0B8A'|'\u0B8E..\u0B90'|'\u0B92..\u0B95'|'\u0B99..\u0B9A'|'\u0B9C'|'\u0B9E..\u0B9F'|'\u0BA3..\u0BA4'|'\u0BA8..\u0BAA'|'\u0BAE..\u0BB5'|'\u0BB7..\u0BB9'|'\u0C05..\u0C0C'|'\u0C0E..\u0C10'|'\u0C12..\u0C28'|'\u0C2A..\u0C33'|'\u0C35..\u0C39'|'\u0C60..\u0C61'|'\u0C85..\u0C8C'|'\u0C8E..\u0C90'|'\u0C92..\u0CA8'|'\u0CAA..\u0CB3'|'\u0CB5..\u0CB9'|'\u0CDE'|'\u0CE0..\u0CE1'|'\u0D05..\u0D0C'|'\u0D0E..\u0D10'|'\u0D12..\u0D28'|'\u0D2A..\u0D39'|'\u0D60..\u0D61'|'\u0D85..\u0D96'|'\u0D9A..\u0DB1'|'\u0DB3..\u0DBB'|'\u0DBD'|'\u0DC0..\u0DC6'|'\u0E01..\u0E30'|'\u0E32..\u0E33'|'\u0E40..\u0E46'|'\u0E81..\u0E82'|'\u0E84'|'\u0E87..\u0E88'|'\u0E8A'|'\u0E8D'|'\u0E94..\u0E97'|'\u0E99..\u0E9F'|'\u0EA1..\u0EA3'|'\u0EA5'|'\u0EA7'|'\u0EAA..\u0EAB'|'\u0EAD..\u0EB0'|'\u0EB2..\u0EB3'|'\u0EBD..\u0EC4'|'\u0EC6'|'\u0EDC..\u0EDD'|'\u0F00'|'\u0F40..\u0F6A'|'\u0F88..\u0F8B'|'\u1000..\u1021'|'\u1023..\u1027'|'\u1029..\u102A'|'\u1050..\u1055'|'\u10A0..\u10C5'|'\u10D0..\u10F6'|'\u1100..\u1159'|'\u115F..\u11A2'|'\u11A8..\u11F9'|'\u1200..\u1206'|'\u1208..\u1246'|'\u1248'|'\u124A..\u124D'|'\u1250..\u1256'|'\u1258'|'\u125A..\u125D'|'\u1260..\u1286'|'\u1288'|'\u128A..\u128D'|'\u1290..\u12AE'|'\u12B0'|'\u12B2..\u12B5'|'\u12B8..\u12BE'|'\u12C0'|'\u12C2..\u12C5'|'\u12C8..\u12CE'|'\u12D0..\u12D6'|'\u12D8..\u12EE'|'\u12F0..\u130E'|'\u1310'|'\u1312..\u1315'|'\u1318..\u131E'|'\u1320..\u1346'|'\u1348..\u135A'|'\u13A0..\u13B0'|'\u13B1..\u13F4'|'\u1401..\u1676'|'\u1681..\u169A'|'\u16A0..\u16EA'|'\u1780..\u17B3'|'\u1820..\u1877'|'\u1880..\u18A8'|'\u1E00..\u1E9B'|'\u1EA0..\u1EE0'|'\u1EE1..\u1EF9'|'\u1F00..\u1F15'|'\u1F18..\u1F1D'|'\u1F20..\u1F39'|'\u1F3A..\u1F45'|'\u1F48..\u1F4D'|'\u1F50..\u1F57'|'\u1F59'|'\u1F5B'|'\u1F5D'|'\u1F5F..\u1F7D'|'\u1F80..\u1FB4'|'\u1FB6..\u1FBC'|'\u1FBE'|'\u1FC2..\u1FC4'|'\u1FC6..\u1FCC'|'\u1FD0..\u1FD3'|'\u1FD6..\u1FDB'|'\u1FE0..\u1FEC'|'\u1FF2..\u1FF4'|'\u1FF6..\u1FFC'|'\u207F'|'\u2102'|'\u2107'|'\u210A..\u2113'|'\u2115'|'\u2119..\u211D'|'\u2124'|'\u2126'|'\u2128'|'\u212A..\u212D'|'\u212F..\u2131'|'\u2133..\u2139'|'\u2160..\u2183'|'\u3005..\u3007'|'\u3021..\u3029'|'\u3031..\u3035'|'\u3038..\u303A'|'\u3041..\u3094'|'\u309D..\u309E'|'\u30A1..\u30FA'|'\u30FC..\u30FE'|'\u3105..\u312C'|'\u3131..\u318E'|'\u31A0..\u31B7'|'\u3400'|'\u4DB5'|'\u4E00'|'\u9FA5'|'\uA000..\uA48C'|'\uAC00'|'\uD7A3'|'\uF900..\uFA2D'|'\uFB00..\uFB06'|'\uFB13..\uFB17'|'\uFB1D'|'\uFB1F..\uFB28'|'\uFB2A..\uFB36'|'\uFB38..\uFB3C'|'\uFB3E'|'\uFB40..\uFB41'|'\uFB43..\uFB44'|'\uFB46..\uFBB1'|'\uFBD3..\uFD3D'|'\uFD50..\uFD8F'|'\uFD92..\uFDC7'|'\uFDF0..\uFDFB'|'\uFE70..\uFE72'|'\uFE74'|'\uFE76..\uFEFC'|'\uFF21..\uFF3A'|'\uFF41..\uFF5A'|'\uFF66..\uFFBE'|'\uFFC2..\uFFC7'|'\uFFCA..\uFFCF'|'\uFFD2..\uFFD7'|'\uFFDA..\uFFDC');

RULE_WS : '\t'+;

RULE_COMMENT : '/*' .* '*/';

RULE_TERMINATOR : '\r' '\n'+;

RULE_LINE_COMMENT : '//' ~(('\r'|'\n'))*;
