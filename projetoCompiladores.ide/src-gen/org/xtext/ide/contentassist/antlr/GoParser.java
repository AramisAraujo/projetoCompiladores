/*
 * generated by Xtext 2.13.0
 */
package org.xtext.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.ide.contentassist.antlr.internal.InternalGoParser;
import org.xtext.services.GoGrammarAccess;

public class GoParser extends AbstractContentAssistParser {

	@Inject
	private GoGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalGoParser createParser() {
		InternalGoParser result = new InternalGoParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getIdentifier_Unicode_ValueAccess().getAlternatives_1(), "rule__Identifier_Unicode_Value__Alternatives_1");
					put(grammarAccess.getUnicode_valueAccess().getAlternatives(), "rule__Unicode_value__Alternatives");
					put(grammarAccess.getByte_valueAccess().getAlternatives(), "rule__Byte_value__Alternatives");
					put(grammarAccess.getOctal_byte_valueAccess().getAlternatives_1(), "rule__Octal_byte_value__Alternatives_1");
					put(grammarAccess.getOctal_byte_valueAccess().getAlternatives_2(), "rule__Octal_byte_value__Alternatives_2");
					put(grammarAccess.getOctal_byte_valueAccess().getAlternatives_3(), "rule__Octal_byte_value__Alternatives_3");
					put(grammarAccess.getEscaped_charAccess().getAlternatives_1(), "rule__Escaped_char__Alternatives_1");
					put(grammarAccess.getString_litAccess().getAlternatives(), "rule__String_lit__Alternatives");
					put(grammarAccess.getRaw_string_litAccess().getAlternatives_1(), "rule__Raw_string_lit__Alternatives_1");
					put(grammarAccess.getInterpreted_string_litAccess().getAlternatives_1(), "rule__Interpreted_string_lit__Alternatives_1");
					put(grammarAccess.getImport_declAccess().getAlternatives_1(), "rule__Import_decl__Alternatives_1");
					put(grammarAccess.getImport_specAccess().getAlternatives_0(), "rule__Import_spec__Alternatives_0");
					put(grammarAccess.getIdentifier_Unicode_ValueAccess().getGroup(), "rule__Identifier_Unicode_Value__Group__0");
					put(grammarAccess.getOctal_byte_valueAccess().getGroup(), "rule__Octal_byte_value__Group__0");
					put(grammarAccess.getHex_byte_valueAccess().getGroup(), "rule__Hex_byte_value__Group__0");
					put(grammarAccess.getLittle_u_valueAccess().getGroup(), "rule__Little_u_value__Group__0");
					put(grammarAccess.getBig_u_valueAccess().getGroup(), "rule__Big_u_value__Group__0");
					put(grammarAccess.getEscaped_charAccess().getGroup(), "rule__Escaped_char__Group__0");
					put(grammarAccess.getRaw_string_litAccess().getGroup(), "rule__Raw_string_lit__Group__0");
					put(grammarAccess.getInterpreted_string_litAccess().getGroup(), "rule__Interpreted_string_lit__Group__0");
					put(grammarAccess.getImport_declAccess().getGroup(), "rule__Import_decl__Group__0");
					put(grammarAccess.getImport_declAccess().getGroup_1_1(), "rule__Import_decl__Group_1_1__0");
					put(grammarAccess.getImport_declAccess().getGroup_1_1_1(), "rule__Import_decl__Group_1_1_1__0");
					put(grammarAccess.getImport_specAccess().getGroup(), "rule__Import_spec__Group__0");
					put(grammarAccess.getModelAccess().getGreetingsAssignment(), "rule__Model__GreetingsAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public GoGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GoGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
