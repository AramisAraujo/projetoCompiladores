/*
 * generated by Xtext 2.14.0
 */
package org.xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.ide.contentassist.antlr.internal.InternalGoParser;
import org.xtext.services.GoGrammarAccess;

public class GoParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(GoGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, GoGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getImportDeclAccess().getAlternatives_1(), "rule__ImportDecl__Alternatives_1");
			builder.put(grammarAccess.getImportSpecAccess().getAlternatives_0(), "rule__ImportSpec__Alternatives_0");
			builder.put(grammarAccess.getTopLevelDeclAccess().getAlternatives(), "rule__TopLevelDecl__Alternatives");
			builder.put(grammarAccess.getDeclarationAccess().getAlternatives(), "rule__Declaration__Alternatives");
			builder.put(grammarAccess.getConstDeclAccess().getAlternatives_1(), "rule__ConstDecl__Alternatives_1");
			builder.put(grammarAccess.getTypeDeclAccess().getAlternatives_1(), "rule__TypeDecl__Alternatives_1");
			builder.put(grammarAccess.getFunctionDeclAccess().getAlternatives_2(), "rule__FunctionDecl__Alternatives_2");
			builder.put(grammarAccess.getMethodDeclAccess().getAlternatives_3(), "rule__MethodDecl__Alternatives_3");
			builder.put(grammarAccess.getVarDeclAccess().getAlternatives_1(), "rule__VarDecl__Alternatives_1");
			builder.put(grammarAccess.getVarSpecAccess().getAlternatives_1(), "rule__VarSpec__Alternatives_1");
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getSimpleStmtAccess().getAlternatives(), "rule__SimpleStmt__Alternatives");
			builder.put(grammarAccess.getIncDecStmtAccess().getAlternatives_1(), "rule__IncDecStmt__Alternatives_1");
			builder.put(grammarAccess.getAssign_opAccess().getAlternatives_0(), "rule__Assign_op__Alternatives_0");
			builder.put(grammarAccess.getIfStmtAccess().getAlternatives_4_1(), "rule__IfStmt__Alternatives_4_1");
			builder.put(grammarAccess.getSwitchStmtAccess().getAlternatives(), "rule__SwitchStmt__Alternatives");
			builder.put(grammarAccess.getExprSwitchCaseAccess().getAlternatives(), "rule__ExprSwitchCase__Alternatives");
			builder.put(grammarAccess.getTypeSwitchCaseAccess().getAlternatives(), "rule__TypeSwitchCase__Alternatives");
			builder.put(grammarAccess.getCommCaseAccess().getAlternatives(), "rule__CommCase__Alternatives");
			builder.put(grammarAccess.getCommCaseAccess().getAlternatives_0_1(), "rule__CommCase__Alternatives_0_1");
			builder.put(grammarAccess.getRecvStmtAccess().getAlternatives_0(), "rule__RecvStmt__Alternatives_0");
			builder.put(grammarAccess.getForStmtAccess().getAlternatives_1(), "rule__ForStmt__Alternatives_1");
			builder.put(grammarAccess.getRangeClauseAccess().getAlternatives_0(), "rule__RangeClause__Alternatives_0");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getTypeNameAccess().getAlternatives(), "rule__TypeName__Alternatives");
			builder.put(grammarAccess.getTypeLitAccess().getAlternatives(), "rule__TypeLit__Alternatives");
			builder.put(grammarAccess.getChannelTypeAccess().getAlternatives_0(), "rule__ChannelType__Alternatives_0");
			builder.put(grammarAccess.getMethodSpecAccess().getAlternatives(), "rule__MethodSpec__Alternatives");
			builder.put(grammarAccess.getResultAccess().getAlternatives(), "rule__Result__Alternatives");
			builder.put(grammarAccess.getOperandAccess().getAlternatives(), "rule__Operand__Alternatives");
			builder.put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
			builder.put(grammarAccess.getBasicLitAccess().getAlternatives(), "rule__BasicLit__Alternatives");
			builder.put(grammarAccess.getOperandNameAccess().getAlternatives(), "rule__OperandName__Alternatives");
			builder.put(grammarAccess.getLiteralTypeAccess().getAlternatives(), "rule__LiteralType__Alternatives");
			builder.put(grammarAccess.getKeyAccess().getAlternatives(), "rule__Key__Alternatives");
			builder.put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
			builder.put(grammarAccess.getFieldDeclAccess().getAlternatives_0(), "rule__FieldDecl__Alternatives_0");
			builder.put(grammarAccess.getPrimaryExprAccess().getAlternatives(), "rule__PrimaryExpr__Alternatives");
			builder.put(grammarAccess.getPrimaryExprAccess().getAlternatives_0(), "rule__PrimaryExpr__Alternatives_0");
			builder.put(grammarAccess.getPrimaryExprStuffAccess().getAlternatives(), "rule__PrimaryExprStuff__Alternatives");
			builder.put(grammarAccess.getSliceAccess().getAlternatives_1(), "rule__Slice__Alternatives_1");
			builder.put(grammarAccess.getArgumentsAccess().getAlternatives_1_0(), "rule__Arguments__Alternatives_1_0");
			builder.put(grammarAccess.getReceiverTypeAccess().getAlternatives(), "rule__ReceiverType__Alternatives");
			builder.put(grammarAccess.getUnaryExprAccess().getAlternatives(), "rule__UnaryExpr__Alternatives");
			builder.put(grammarAccess.getUnaryExprAccess().getAlternatives_1_0(), "rule__UnaryExpr__Alternatives_1_0");
			builder.put(grammarAccess.getSourceFileAccess().getGroup(), "rule__SourceFile__Group__0");
			builder.put(grammarAccess.getSourceFileAccess().getGroup_2(), "rule__SourceFile__Group_2__0");
			builder.put(grammarAccess.getSourceFileAccess().getGroup_3(), "rule__SourceFile__Group_3__0");
			builder.put(grammarAccess.getPackageClauseAccess().getGroup(), "rule__PackageClause__Group__0");
			builder.put(grammarAccess.getImportDeclAccess().getGroup(), "rule__ImportDecl__Group__0");
			builder.put(grammarAccess.getImportDeclAccess().getGroup_1_1(), "rule__ImportDecl__Group_1_1__0");
			builder.put(grammarAccess.getImportDeclAccess().getGroup_1_1_1(), "rule__ImportDecl__Group_1_1_1__0");
			builder.put(grammarAccess.getImportSpecAccess().getGroup(), "rule__ImportSpec__Group__0");
			builder.put(grammarAccess.getConstDeclAccess().getGroup(), "rule__ConstDecl__Group__0");
			builder.put(grammarAccess.getConstDeclAccess().getGroup_1_1(), "rule__ConstDecl__Group_1_1__0");
			builder.put(grammarAccess.getConstDeclAccess().getGroup_1_1_1(), "rule__ConstDecl__Group_1_1_1__0");
			builder.put(grammarAccess.getConstSpecAccess().getGroup(), "rule__ConstSpec__Group__0");
			builder.put(grammarAccess.getConstSpecAccess().getGroup_1(), "rule__ConstSpec__Group_1__0");
			builder.put(grammarAccess.getIdentifierListAccess().getGroup(), "rule__IdentifierList__Group__0");
			builder.put(grammarAccess.getIdentifierListAccess().getGroup_1(), "rule__IdentifierList__Group_1__0");
			builder.put(grammarAccess.getExpressionListAccess().getGroup(), "rule__ExpressionList__Group__0");
			builder.put(grammarAccess.getExpressionListAccess().getGroup_1(), "rule__ExpressionList__Group_1__0");
			builder.put(grammarAccess.getTypeDeclAccess().getGroup(), "rule__TypeDecl__Group__0");
			builder.put(grammarAccess.getTypeDeclAccess().getGroup_1_1(), "rule__TypeDecl__Group_1_1__0");
			builder.put(grammarAccess.getTypeDeclAccess().getGroup_1_1_1(), "rule__TypeDecl__Group_1_1_1__0");
			builder.put(grammarAccess.getTypeSpecAccess().getGroup(), "rule__TypeSpec__Group__0");
			builder.put(grammarAccess.getFunctionDeclAccess().getGroup(), "rule__FunctionDecl__Group__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
			builder.put(grammarAccess.getMethodDeclAccess().getGroup(), "rule__MethodDecl__Group__0");
			builder.put(grammarAccess.getVarDeclAccess().getGroup(), "rule__VarDecl__Group__0");
			builder.put(grammarAccess.getVarDeclAccess().getGroup_1_1(), "rule__VarDecl__Group_1_1__0");
			builder.put(grammarAccess.getVarDeclAccess().getGroup_1_1_1(), "rule__VarDecl__Group_1_1_1__0");
			builder.put(grammarAccess.getVarSpecAccess().getGroup(), "rule__VarSpec__Group__0");
			builder.put(grammarAccess.getVarSpecAccess().getGroup_1_0(), "rule__VarSpec__Group_1_0__0");
			builder.put(grammarAccess.getVarSpecAccess().getGroup_1_0_1(), "rule__VarSpec__Group_1_0_1__0");
			builder.put(grammarAccess.getVarSpecAccess().getGroup_1_1(), "rule__VarSpec__Group_1_1__0");
			builder.put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
			builder.put(grammarAccess.getStatementListAccess().getGroup(), "rule__StatementList__Group__0");
			builder.put(grammarAccess.getSendStmtAccess().getGroup(), "rule__SendStmt__Group__0");
			builder.put(grammarAccess.getIncDecStmtAccess().getGroup(), "rule__IncDecStmt__Group__0");
			builder.put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
			builder.put(grammarAccess.getAssign_opAccess().getGroup(), "rule__Assign_op__Group__0");
			builder.put(grammarAccess.getShortVarDeclAccess().getGroup(), "rule__ShortVarDecl__Group__0");
			builder.put(grammarAccess.getLabeledStmtAccess().getGroup(), "rule__LabeledStmt__Group__0");
			builder.put(grammarAccess.getReturnStmtAccess().getGroup(), "rule__ReturnStmt__Group__0");
			builder.put(grammarAccess.getBreakStmtAccess().getGroup(), "rule__BreakStmt__Group__0");
			builder.put(grammarAccess.getContinueStmtAccess().getGroup(), "rule__ContinueStmt__Group__0");
			builder.put(grammarAccess.getGotoStmtAccess().getGroup(), "rule__GotoStmt__Group__0");
			builder.put(grammarAccess.getDeferStmtAccess().getGroup(), "rule__DeferStmt__Group__0");
			builder.put(grammarAccess.getIfStmtAccess().getGroup(), "rule__IfStmt__Group__0");
			builder.put(grammarAccess.getIfStmtAccess().getGroup_1(), "rule__IfStmt__Group_1__0");
			builder.put(grammarAccess.getIfStmtAccess().getGroup_4(), "rule__IfStmt__Group_4__0");
			builder.put(grammarAccess.getExprSwitchStmtAccess().getGroup(), "rule__ExprSwitchStmt__Group__0");
			builder.put(grammarAccess.getExprSwitchStmtAccess().getGroup_1(), "rule__ExprSwitchStmt__Group_1__0");
			builder.put(grammarAccess.getExprCaseClauseAccess().getGroup(), "rule__ExprCaseClause__Group__0");
			builder.put(grammarAccess.getExprSwitchCaseAccess().getGroup_0(), "rule__ExprSwitchCase__Group_0__0");
			builder.put(grammarAccess.getTypeSwitchStmtAccess().getGroup(), "rule__TypeSwitchStmt__Group__0");
			builder.put(grammarAccess.getTypeSwitchStmtAccess().getGroup_1(), "rule__TypeSwitchStmt__Group_1__0");
			builder.put(grammarAccess.getTypeSwitchGuardAccess().getGroup(), "rule__TypeSwitchGuard__Group__0");
			builder.put(grammarAccess.getTypeSwitchGuardAccess().getGroup_0(), "rule__TypeSwitchGuard__Group_0__0");
			builder.put(grammarAccess.getTypeCaseClauseAccess().getGroup(), "rule__TypeCaseClause__Group__0");
			builder.put(grammarAccess.getTypeSwitchCaseAccess().getGroup_0(), "rule__TypeSwitchCase__Group_0__0");
			builder.put(grammarAccess.getTypeListAccess().getGroup(), "rule__TypeList__Group__0");
			builder.put(grammarAccess.getTypeListAccess().getGroup_1(), "rule__TypeList__Group_1__0");
			builder.put(grammarAccess.getSelectStmtAccess().getGroup(), "rule__SelectStmt__Group__0");
			builder.put(grammarAccess.getCommClauseAccess().getGroup(), "rule__CommClause__Group__0");
			builder.put(grammarAccess.getCommCaseAccess().getGroup_0(), "rule__CommCase__Group_0__0");
			builder.put(grammarAccess.getRecvStmtAccess().getGroup(), "rule__RecvStmt__Group__0");
			builder.put(grammarAccess.getRecvStmtAccess().getGroup_0_0(), "rule__RecvStmt__Group_0_0__0");
			builder.put(grammarAccess.getRecvStmtAccess().getGroup_0_1(), "rule__RecvStmt__Group_0_1__0");
			builder.put(grammarAccess.getForStmtAccess().getGroup(), "rule__ForStmt__Group__0");
			builder.put(grammarAccess.getForClauseAccess().getGroup(), "rule__ForClause__Group__0");
			builder.put(grammarAccess.getRangeClauseAccess().getGroup(), "rule__RangeClause__Group__0");
			builder.put(grammarAccess.getRangeClauseAccess().getGroup_0_0(), "rule__RangeClause__Group_0_0__0");
			builder.put(grammarAccess.getRangeClauseAccess().getGroup_0_1(), "rule__RangeClause__Group_0_1__0");
			builder.put(grammarAccess.getGoStmtAccess().getGroup(), "rule__GoStmt__Group__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_2(), "rule__Type__Group_2__0");
			builder.put(grammarAccess.getArrayTypeAccess().getGroup(), "rule__ArrayType__Group__0");
			builder.put(grammarAccess.getPointerTypeAccess().getGroup(), "rule__PointerType__Group__0");
			builder.put(grammarAccess.getInterfaceTypeAccess().getGroup(), "rule__InterfaceType__Group__0");
			builder.put(grammarAccess.getInterfaceTypeAccess().getGroup_2(), "rule__InterfaceType__Group_2__0");
			builder.put(grammarAccess.getSliceTypeAccess().getGroup(), "rule__SliceType__Group__0");
			builder.put(grammarAccess.getMapTypeAccess().getGroup(), "rule__MapType__Group__0");
			builder.put(grammarAccess.getChannelTypeAccess().getGroup(), "rule__ChannelType__Group__0");
			builder.put(grammarAccess.getChannelTypeAccess().getGroup_0_1(), "rule__ChannelType__Group_0_1__0");
			builder.put(grammarAccess.getChannelTypeAccess().getGroup_0_2(), "rule__ChannelType__Group_0_2__0");
			builder.put(grammarAccess.getMethodSpecAccess().getGroup_0(), "rule__MethodSpec__Group_0__0");
			builder.put(grammarAccess.getFunctionTypeAccess().getGroup(), "rule__FunctionType__Group__0");
			builder.put(grammarAccess.getSignatureAccess().getGroup(), "rule__Signature__Group__0");
			builder.put(grammarAccess.getParametersAccess().getGroup(), "rule__Parameters__Group__0");
			builder.put(grammarAccess.getParametersAccess().getGroup_1(), "rule__Parameters__Group_1__0");
			builder.put(grammarAccess.getParameterListAccess().getGroup(), "rule__ParameterList__Group__0");
			builder.put(grammarAccess.getParameterListAccess().getGroup_1(), "rule__ParameterList__Group_1__0");
			builder.put(grammarAccess.getParameterDeclAccess().getGroup(), "rule__ParameterDecl__Group__0");
			builder.put(grammarAccess.getOperandAccess().getGroup_3(), "rule__Operand__Group_3__0");
			builder.put(grammarAccess.getQualifiedIdentAccess().getGroup(), "rule__QualifiedIdent__Group__0");
			builder.put(grammarAccess.getCompositeLitAccess().getGroup(), "rule__CompositeLit__Group__0");
			builder.put(grammarAccess.getLiteralTypeAccess().getGroup_2(), "rule__LiteralType__Group_2__0");
			builder.put(grammarAccess.getLiteralValueAccess().getGroup(), "rule__LiteralValue__Group__0");
			builder.put(grammarAccess.getLiteralValueAccess().getGroup_1(), "rule__LiteralValue__Group_1__0");
			builder.put(grammarAccess.getElementListAccess().getGroup(), "rule__ElementList__Group__0");
			builder.put(grammarAccess.getElementListAccess().getGroup_1(), "rule__ElementList__Group_1__0");
			builder.put(grammarAccess.getKeyedElementAccess().getGroup(), "rule__KeyedElement__Group__0");
			builder.put(grammarAccess.getKeyedElementAccess().getGroup_0(), "rule__KeyedElement__Group_0__0");
			builder.put(grammarAccess.getStructTypeAccess().getGroup(), "rule__StructType__Group__0");
			builder.put(grammarAccess.getStructTypeAccess().getGroup_2(), "rule__StructType__Group_2__0");
			builder.put(grammarAccess.getFieldDeclAccess().getGroup(), "rule__FieldDecl__Group__0");
			builder.put(grammarAccess.getFieldDeclAccess().getGroup_0_0(), "rule__FieldDecl__Group_0_0__0");
			builder.put(grammarAccess.getAnonymousFieldAccess().getGroup(), "rule__AnonymousField__Group__0");
			builder.put(grammarAccess.getFunctionLitAccess().getGroup(), "rule__FunctionLit__Group__0");
			builder.put(grammarAccess.getPrimaryExprSelectorAccess().getGroup(), "rule__PrimaryExprSelector__Group__0");
			builder.put(grammarAccess.getPrimaryExprIndexAccess().getGroup(), "rule__PrimaryExprIndex__Group__0");
			builder.put(grammarAccess.getPrimaryExprSliceAccess().getGroup(), "rule__PrimaryExprSlice__Group__0");
			builder.put(grammarAccess.getPrimaryExprTypeAssertionAccess().getGroup(), "rule__PrimaryExprTypeAssertion__Group__0");
			builder.put(grammarAccess.getPrimaryExprArgumentsAccess().getGroup(), "rule__PrimaryExprArguments__Group__0");
			builder.put(grammarAccess.getSelectorAccess().getGroup(), "rule__Selector__Group__0");
			builder.put(grammarAccess.getIndexAccess().getGroup(), "rule__Index__Group__0");
			builder.put(grammarAccess.getSliceAccess().getGroup(), "rule__Slice__Group__0");
			builder.put(grammarAccess.getSliceAccess().getGroup_1_0(), "rule__Slice__Group_1_0__0");
			builder.put(grammarAccess.getSliceAccess().getGroup_1_1(), "rule__Slice__Group_1_1__0");
			builder.put(grammarAccess.getTypeAssertionAccess().getGroup(), "rule__TypeAssertion__Group__0");
			builder.put(grammarAccess.getArgumentsAccess().getGroup(), "rule__Arguments__Group__0");
			builder.put(grammarAccess.getArgumentsAccess().getGroup_1(), "rule__Arguments__Group_1__0");
			builder.put(grammarAccess.getArgumentsAccess().getGroup_1_0_1(), "rule__Arguments__Group_1_0_1__0");
			builder.put(grammarAccess.getArgumentsAccess().getGroup_1_0_1_1(), "rule__Arguments__Group_1_0_1_1__0");
			builder.put(grammarAccess.getMethodExprAccess().getGroup(), "rule__MethodExpr__Group__0");
			builder.put(grammarAccess.getReceiverTypeAccess().getGroup_1(), "rule__ReceiverType__Group_1__0");
			builder.put(grammarAccess.getReceiverTypeAccess().getGroup_2(), "rule__ReceiverType__Group_2__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
			builder.put(grammarAccess.getExpressionMatchedAccess().getGroup(), "rule__ExpressionMatched__Group__0");
			builder.put(grammarAccess.getUnaryExprAccess().getGroup_1(), "rule__UnaryExpr__Group_1__0");
			builder.put(grammarAccess.getConversionAccess().getGroup(), "rule__Conversion__Group__0");
			builder.put(grammarAccess.getModelAccess().getGreetingsAssignment(), "rule__Model__GreetingsAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private GoGrammarAccess grammarAccess;

	@Override
	protected InternalGoParser createParser() {
		InternalGoParser result = new InternalGoParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] {  };
	}

	public GoGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GoGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
