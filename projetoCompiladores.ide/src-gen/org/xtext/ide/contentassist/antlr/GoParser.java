/*
 * generated by Xtext 2.14.0
 */
package org.xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.ide.contentassist.antlr.internal.InternalGoParser;
import org.xtext.services.GoGrammarAccess;

public class GoParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(GoGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, GoGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getOPERATORSAccess().getAlternatives(), "rule__OPERATORS__Alternatives");
			builder.put(grammarAccess.getInt_litAccess().getAlternatives(), "rule__Int_lit__Alternatives");
			builder.put(grammarAccess.getFloat_litAccess().getAlternatives_1(), "rule__Float_lit__Alternatives_1");
			builder.put(grammarAccess.getExponentAccess().getAlternatives_0(), "rule__Exponent__Alternatives_0");
			builder.put(grammarAccess.getExponentAccess().getAlternatives_1(), "rule__Exponent__Alternatives_1");
			builder.put(grammarAccess.getImaginary_litAccess().getAlternatives_0(), "rule__Imaginary_lit__Alternatives_0");
			builder.put(grammarAccess.getRune_litAccess().getAlternatives_1(), "rule__Rune_lit__Alternatives_1");
			builder.put(grammarAccess.getByte_valueAccess().getAlternatives(), "rule__Byte_value__Alternatives");
			builder.put(grammarAccess.getString_litAccess().getAlternatives(), "rule__String_lit__Alternatives");
			builder.put(grammarAccess.getInterpreted_string_litAccess().getAlternatives_1(), "rule__Interpreted_string_lit__Alternatives_1");
			builder.put(grammarAccess.getLiteralsAccess().getAlternatives(), "rule__Literals__Alternatives");
			builder.put(grammarAccess.getTokenAccess().getAlternatives(), "rule__Token__Alternatives");
			builder.put(grammarAccess.getType_nameAccess().getAlternatives(), "rule__Type_name__Alternatives");
			builder.put(grammarAccess.getType_litAccess().getAlternatives(), "rule__Type_lit__Alternatives");
			builder.put(grammarAccess.getField_declAccess().getAlternatives_0(), "rule__Field_decl__Alternatives_0");
			builder.put(grammarAccess.getImport_declAccess().getAlternatives_1(), "rule__Import_decl__Alternatives_1");
			builder.put(grammarAccess.getImport_specAccess().getAlternatives_0(), "rule__Import_spec__Alternatives_0");
			builder.put(grammarAccess.getFloat_litAccess().getGroup(), "rule__Float_lit__Group__0");
			builder.put(grammarAccess.getFloat_litAccess().getGroup_1_0(), "rule__Float_lit__Group_1_0__0");
			builder.put(grammarAccess.getExponentAccess().getGroup(), "rule__Exponent__Group__0");
			builder.put(grammarAccess.getImaginary_litAccess().getGroup(), "rule__Imaginary_lit__Group__0");
			builder.put(grammarAccess.getRune_litAccess().getGroup(), "rule__Rune_lit__Group__0");
			builder.put(grammarAccess.getInterpreted_string_litAccess().getGroup(), "rule__Interpreted_string_lit__Group__0");
			builder.put(grammarAccess.getArray_typeAccess().getGroup(), "rule__Array_type__Group__0");
			builder.put(grammarAccess.getStruct_typeAccess().getGroup(), "rule__Struct_type__Group__0");
			builder.put(grammarAccess.getStruct_typeAccess().getGroup_2(), "rule__Struct_type__Group_2__0");
			builder.put(grammarAccess.getField_declAccess().getGroup(), "rule__Field_decl__Group__0");
			builder.put(grammarAccess.getField_declAccess().getGroup_0_0(), "rule__Field_decl__Group_0_0__0");
			builder.put(grammarAccess.getEmbedded_fieldAccess().getGroup(), "rule__Embedded_field__Group__0");
			builder.put(grammarAccess.getPointer_typeAccess().getGroup(), "rule__Pointer_type__Group__0");
			builder.put(grammarAccess.getParametersAccess().getGroup(), "rule__Parameters__Group__0");
			builder.put(grammarAccess.getParametersAccess().getGroup_1(), "rule__Parameters__Group_1__0");
			builder.put(grammarAccess.getParameter_listAccess().getGroup(), "rule__Parameter_list__Group__0");
			builder.put(grammarAccess.getParameter_listAccess().getGroup_1(), "rule__Parameter_list__Group_1__0");
			builder.put(grammarAccess.getParameter_declAccess().getGroup(), "rule__Parameter_decl__Group__0");
			builder.put(grammarAccess.getParameter_declAccess().getGroup_0(), "rule__Parameter_decl__Group_0__0");
			builder.put(grammarAccess.getIdentifier_listAccess().getGroup(), "rule__Identifier_list__Group__0");
			builder.put(grammarAccess.getIdentifier_listAccess().getGroup_1(), "rule__Identifier_list__Group_1__0");
			builder.put(grammarAccess.getQualified_identAccess().getGroup(), "rule__Qualified_ident__Group__0");
			builder.put(grammarAccess.getBreak_stmtAccess().getGroup(), "rule__Break_stmt__Group__0");
			builder.put(grammarAccess.getContinue_stmtAccess().getGroup(), "rule__Continue_stmt__Group__0");
			builder.put(grammarAccess.getGoto_stmtAccess().getGroup(), "rule__Goto_stmt__Group__0");
			builder.put(grammarAccess.getPackage_clauseAccess().getGroup(), "rule__Package_clause__Group__0");
			builder.put(grammarAccess.getImport_declAccess().getGroup(), "rule__Import_decl__Group__0");
			builder.put(grammarAccess.getImport_declAccess().getGroup_1_1(), "rule__Import_decl__Group_1_1__0");
			builder.put(grammarAccess.getImport_declAccess().getGroup_1_1_1(), "rule__Import_decl__Group_1_1_1__0");
			builder.put(grammarAccess.getImport_specAccess().getGroup(), "rule__Import_spec__Group__0");
			builder.put(grammarAccess.getModelAccess().getGreetingsAssignment(), "rule__Model__GreetingsAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private GoGrammarAccess grammarAccess;

	@Override
	protected InternalGoParser createParser() {
		InternalGoParser result = new InternalGoParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public GoGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GoGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
